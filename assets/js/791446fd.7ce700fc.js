"use strict";(self.webpackChunkstryker_mutator_github_io=self.webpackChunkstryker_mutator_github_io||[]).push([[5858],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return h}});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(r),h=s,k=p["".concat(l,".").concat(h)]||p[h]||m[h]||o;return r?n.createElement(k,a(a({ref:t},c),{},{components:r})):n.createElement(k,a({ref:t},c))}));function h(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,a=new Array(o);a[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var u=2;u<o;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7446:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return u}});r(7294);var n=r(3905);function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s.apply(this,arguments)}const o={slug:"stryker4s-40-minutes-to-40-seconds",title:"Stryker4s: from 40 minutes to 40 seconds",author:"Hugo van Rijswijk",author_title:"Stryker4s Team",author_url:"https://github.com/hugo-vrijswijk",author_image_url:"https://avatars.githubusercontent.com/u/10114577",tags:["stryker4s"]},a=void 0,i={permalink:"/blog/stryker4s-40-minutes-to-40-seconds",editUrl:"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2021-06-16-stryker4s-sbt-performance.mdx",source:"@site/blog/2021-06-16-stryker4s-sbt-performance.mdx",title:"Stryker4s: from 40 minutes to 40 seconds",description:"Stryker4s is your friendly mutation testing framework for Scala. Compared to earlier versions, Stryker4s 0.12 achieves a 60x speed increase in some scenarios \ud83e\udd2f. Are you curious to know how? Keep on reading.",date:"2021-06-16T00:00:00.000Z",formattedDate:"June 16, 2021",tags:[{label:"stryker4s",permalink:"/blog/tags/stryker-4-s"}],readingTime:7.01,hasTruncateMarker:!0,authors:[{name:"Hugo van Rijswijk",title:"Stryker4s Team",url:"https://github.com/hugo-vrijswijk",imageURL:"https://avatars.githubusercontent.com/u/10114577"}],frontMatter:{slug:"stryker4s-40-minutes-to-40-seconds",title:"Stryker4s: from 40 minutes to 40 seconds",author:"Hugo van Rijswijk",author_title:"Stryker4s Team",author_url:"https://github.com/hugo-vrijswijk",author_image_url:"https://avatars.githubusercontent.com/u/10114577",tags:["stryker4s"]},prevItem:{title:"Announcing Stryker.NET 1.0",permalink:"/blog/2021-30-10-announcing-stryker-net-1.md"},nextItem:{title:"Announcing StrykerJS 5.0 - Brave new Dimension",permalink:"/blog/announcing-stryker-js-5-brave-new-dimension.md"}},l={authorsImageUrls:[void 0]},u=[{value:"\ud83d\udcc3 In short",id:"-in-short",level:2},{value:"\ud83d\udc22 The old",id:"-the-old",level:2},{value:"\ud83d\udc07 The new",id:"-the-new",level:2},{value:"\ud83c\udfd7\ufe0f Meet: build info",id:"\ufe0f-meet-build-info",level:3},{value:"\ud83e\uddea Meet: test interfaces",id:"-meet-test-interfaces",level:3},{value:"\ud83d\udd00 Meet: concurrency",id:"-meet-concurrency",level:3},{value:"\ud83e\uddf0 Putting it all together",id:"-putting-it-all-together",level:3},{value:"\ud83d\udd2e What&#39;s next?",id:"-whats-next",level:2}],c={toc:u};function m({components:e,...t}){return(0,n.kt)("wrapper",s({},c,t,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Stryker4s is your friendly mutation testing framework for Scala. Compared to earlier versions, Stryker4s ",(0,n.kt)("inlineCode",{parentName:"p"},"0.12")," achieves a 60x speed increase in some scenarios \ud83e\udd2f. Are you curious to know how? Keep on reading."),(0,n.kt)("p",null,"If you're new to mutation testing, it's a way to measure your tests' effectiveness. A mutation testing framework will make small changes, called ",(0,n.kt)("em",{parentName:"p"},"mutants"),', one by one in your source code. Then it will run your tests to see if one of them fails. If so, you just "killed" that mutant; if not, it "survived". If too many mutants survive, you probably want to improve your tests. The mutation testing report will give you insides into the test cases you may have missed. If this all sounds complicated, please take a look at the recent talk ',(0,n.kt)("a",s({parentName:"p"},{href:"https://www.youtube.com/watch?v=Vq9eqZzblfg"}),'"Who is testing your tests?"')," from ",(0,n.kt)("em",{parentName:"p"},"Scala Love in the City")," or check out the rest of the ",(0,n.kt)("a",s({parentName:"p"},{href:"/"}),"website"),"."),(0,n.kt)("p",null,"In this blog we'll talk about the performance improvements made in the last couple Stryker4s versions and dive into how they are made possible."),(0,n.kt)("h2",s({},{id:"-in-short"}),"\ud83d\udcc3 In short"),(0,n.kt)("p",null,"Imagine you're on your way to a sunny holiday destination. You've checked in your luggage, gone through customs, and boarded the plane. Then, the plane moves forward a couple of meters, and you're thrown out and sent back to customs before going through the whole thing again. It'll take years before you get to sip on your umbrella cocktail \ud83c\udf79! This is exactly how Stryker4s has been running your code\u2026 until now."),(0,n.kt)("p",null,"A lot has changed in recent versions of Stryker4s. Stryker4s now runs your tests in an entirely different way, bringing big performance improvements. As an example, running Stryker4s on the Stryker4s codebase used to take about 40 minutes on ",(0,n.kt)("inlineCode",{parentName:"p"},"0.9.1"),". On",(0,n.kt)("inlineCode",{parentName:"p"},"0.12.1"),", this has been reduced to a fast 40 seconds. A short list of some new features:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"\u2728 New testrunner boasting improved performance"),(0,n.kt)("li",{parentName:"ul"},"\ud83d\udd00 Concurrency to improve speed by using all available cores"),(0,n.kt)("li",{parentName:"ul"},"\ud83d\udd75\ufe0f\u200d\u2640\ufe0f Coverage analysis to skip mutants without coverage"),(0,n.kt)("li",{parentName:"ul"},"\u23f1\ufe0f Timeout detection in tests"),(0,n.kt)("li",{parentName:"ul"},"\ud83d\udc7d New mutator: regular expressions. Thanks to ",(0,n.kt)("a",s({parentName:"li"},{href:"https://github.com/stryker-mutator/weapon-regex/"}),"Weapon regeX"),"!")),(0,n.kt)("p",null,"In the rest of this blog post, we'll do a deep-dive into the increased performance. Let's start by taking a look at the older version of Stryker4s."),(0,n.kt)("h2",s({},{id:"-the-old"}),"\ud83d\udc22 The old"),(0,n.kt)("p",null,"In the older sbt plugin, there was a lot of overhead in running your tests. As a quick reminder, Stryker4s uses ",(0,n.kt)("a",s({parentName:"p"},{href:"https://stryker-mutator.io/blog/mutation-switching/"}),"mutation switching"),", so it only has to compile your code once, instead of for each mutant. After mutating your source code, Stryker4s would essentially just call ",(0,n.kt)("inlineCode",{parentName:"p"},"sbt test")," with the mutated code for every mutant. This means sbt would:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Look for code changes (which there never are)."),(0,n.kt)("li",{parentName:"ol"},"Make sure all compiled code is up-to-date (which it always is)."),(0,n.kt)("li",{parentName:"ol"},"Start a new Java process with your class files, dependencies, and a small sbt entry point library."),(0,n.kt)("li",{parentName:"ol"},"Run your tests and report the results back to the main sbt process."),(0,n.kt)("li",{parentName:"ol"},"Repeat for the next mutant.")),(0,n.kt)("mermaid",s({},{value:"sequenceDiagram\n  participant Stryker4s\n  participant sbt\n  participant sbt test process\n  Stryker4s->>sbt: Compile mutated code\n  loop For each mutant\n    Stryker4s->>sbt: executeTests\n    sbt->>sbt: Check for changes?\n    sbt->>+sbt test process: Start new process and run tests\n    sbt test process->>-sbt: Report test results\n    sbt->>Stryker4s: Tests successful Y/N\n  end"})),(0,n.kt)("p",null,"Doing those checks and starting a new process makes a lot of sense for a development workflow, but not for mutation testing. This implementation of the test runner hasn't changed much in the two years that the plugin has existed. Time for some improvements!"),(0,n.kt)("h2",s({},{id:"-the-new"}),"\ud83d\udc07 The new"),(0,n.kt)("p",null,"It's clear the process can be optimized. Once Stryker4s is set up and all mutations have been compiled, the only thing we really want to do is run some tests and get a result. Sbt doesn't give plugins full control over the entire test process, but it does have all the information about ",(0,n.kt)("em",{parentName:"p"},"what")," your project looks like. This is something we can work with!"),(0,n.kt)("h3",s({},{id:"\ufe0f-meet-build-info"}),"\ud83c\udfd7\ufe0f Meet: build info"),(0,n.kt)("p",null,"The first thing Stryker4s needs to do is figure out what tests our project contains. One of the great things about sbt is its standardization and extensibility as a build tool. Because sbt knows exactly what your project looks like, plugins can retrieve all this information. To find out what tests you have, Stryker4s uses three pieces of information from sbt:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"fullClasspath")," location of all dependency JARs (including test-dependencies) and ",(0,n.kt)("inlineCode",{parentName:"li"},".class")," files of your compiled code."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"loadedTestFrameworks")," the configured test framework. Sbt detects a couple of frameworks by default, but if you use MUnit you might remember having to add ",(0,n.kt)("inlineCode",{parentName:"li"},'testFrameworks += new TestFramework("munit.Framework")')," to your build.sbt before MUnit can run."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"testGrouping")," contains every test suite sbt discovers in your project.")),(0,n.kt)("p",null,"You can try running these yourself in a sbt console to see how Stryker4s looks at your project:"),(0,n.kt)("pre",null,(0,n.kt)("code",s({parentName:"pre"},{}),"sbt:stryker4s-core> show fullClasspath\n[info] * Attributed(~/stryker4s/core/target/jvm-2.13/classes)\n[info] * Attributed(~/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-\nlibrary/2.13.4/scala-library-2.13.4.jar)\n[info] * Attributed(~/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/pathikrit/\nbetter-files_2.13/3.9.1/better-files_2.13-3.9.1.jar)\n...\nsbt:stryker4s-core> show loadedTestFrameworks\n[info] Map(TestFramework(org.scalatest.tools.Framework, org.scalatest.tools.ScalaTestFramework) -> org\n.scalatest.tools.Framework@2b9d52d5)\n...\nsbt:stryker4s-core> show testGrouping\n[info] * (<default>,Vector(Test stryker4s.config.TestFilterTest : subclass(false, org.scalatest.Suite)\n, Test stryker4s.extension.FileExtensionsTest : subclass(false, org.scalatest.Suite), Test stryker4s.m\nutants.MutatorTest : subclass(false, org.scalatest.Suite), Test stryker4s.mutants.AddAllMutationsTest\n: subclass(false, org.scalatest.Suite), ...\n")),(0,n.kt)("p",null,"We now know what tests are in your project. Let's have a look at running those tests:"),(0,n.kt)("h3",s({},{id:"-meet-test-interfaces"}),"\ud83e\uddea Meet: test interfaces"),(0,n.kt)("p",null,"This is something our friends in the NodeJS world are (rightfully) a little ",(0,n.kt)("a",s({parentName:"p"},{href:"https://stryker-mutator.io/docs/stryker-js/plugins#test-runners"}),"jealous of")," \ud83d\ude0f. When you call ",(0,n.kt)("inlineCode",{parentName:"p"},"sbt test"),", sbt will look for any registered test frameworks that implement the ",(0,n.kt)("a",s({parentName:"p"},{href:"https://github.com/sbt/test-interface"}),"test-interface")," (from ",(0,n.kt)("inlineCode",{parentName:"p"},"loadedTestFrameworks"),"). This is a small collection of interfaces that let a test framework tell sbt how to run tests in that framework. Because all test frameworks in sbt implement this interface, we have a single programmatic way to call any test framework. It doesn't matter if you're using ScalaTest, MUnit, Weaver-test or anything else. Using a bit of reflection, we can create an instance of the test framework runner and run tests:"),(0,n.kt)("pre",null,(0,n.kt)("code",s({parentName:"pre"},{className:"language-scala"}),"val framework = classLoader.loadClass(testFrameworkClass).getConstructor().newInstance().asInstanceOf[Framework]\nval runner = framework.runner(args, remoteArgs, classLoader)\n\nval testTasks: Array[Task] = runner.tasks(testGrouping.taskDefs)\n\ntestTasks.foreach(testTask => {\n  testTask.execute()\n})\n")),(0,n.kt)("p",null,"Stryker4s can then use this to activate a mutant and instantly run the tests without any overhead from sbt."),(0,n.kt)("h3",s({},{id:"-meet-concurrency"}),"\ud83d\udd00 Meet: concurrency"),(0,n.kt)("p",null,"Stryker4s activates and runs each mutant one by one in isolation. This is to make sure one mutant won't have an impact on the result of another. This is done by creating a separate process for it. However, there's no rule that says we can't start multiple Java processes at the same time and run those in parallel."),(0,n.kt)("p",null,"With multiple separate worker-processes, each worker has its own separate memory, threads, and active mutant. This way, if one mutant results in an ",(0,n.kt)("inlineCode",{parentName:"p"},"OutOfMemoryError")," it won't impact the others. In long-lived processes like mutation testing, the performance increases of parallelism far outweigh the overhead of starting and managing multiple workers."),(0,n.kt)("h3",s({},{id:"-putting-it-all-together"}),"\ud83e\uddf0 Putting it all together"),(0,n.kt)("p",null,"Stryker4s can start a new process with all the information collected above. Because Stryker4s now fully controls how it runs your tests, it can eliminate any overhead of starting new processes or looking for source code changes. It looks a little something like this:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Start new worker processes in parallel with the full test classpath and send them all the needed test setup."),(0,n.kt)("li",{parentName:"ol"},"Create a new instance of the test framework in the created process."),(0,n.kt)("li",{parentName:"ol"},"For each mutant, programmatically run the tests on the worker process.")),(0,n.kt)("mermaid",s({},{value:"sequenceDiagram\n  participant Stryker4s\n  participant sbt\n  participant testrunner worker\n  Stryker4s->>+sbt: compile\n  sbt--\x3e>-Stryker4s: .class files\n  Stryker4s->>+sbt: retrieve info\n  sbt--\x3e>-Stryker4s: project info\n  Stryker4s->>+testrunner worker: start <n> new workers\n  loop For each mutant\n    Stryker4s->>testrunner worker: run tests\n    testrunner worker--\x3e>Stryker4s: report test result\n  end\n  Stryker4s->>testrunner worker: close test worker\n  testrunner worker--\x3e>-Stryker4s:"})),(0,n.kt)("p",null,"As you can see, there's not much overhead left in running your tests. The limiting factor is now how fast your tests are! When running Stryker4s on itself, this method improves performance 60x: from 40 minutes to 40 seconds."),(0,n.kt)("h2",s({},{id:"-whats-next"}),"\ud83d\udd2e What's next?"),(0,n.kt)("p",null,"In this post, we've shown you how Stryker4s uses sbt's test information to reduce overhead and provide massive performance increases. We're very excited for you to try out the increased performance! If you have any feedback or questions, find us on ",(0,n.kt)("a",s({parentName:"p"},{href:"https://github.com/stryker-mutator/stryker4s"}),"GitHub")," or ",(0,n.kt)("a",s({parentName:"p"},{href:"https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM"}),"Slack"),"."),(0,n.kt)("p",null,"Next, we want to also bring these performance improvements to the Maven plugin, add per-test coverage support, improve the HTML report to show your tests and perhaps even support some ",(0,n.kt)("a",s({parentName:"p"},{href:"https://github.com/stryker-mutator/stryker4k"}),"new languages"),"?"))}m.isMDXComponent=!0}}]);