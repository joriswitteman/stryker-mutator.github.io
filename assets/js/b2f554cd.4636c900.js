"use strict";(self.webpackChunkstryker_mutator_github_io=self.webpackChunkstryker_mutator_github_io||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"announcing-incremental-mode","metadata":{"permalink":"/blog/announcing-incremental-mode","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2022-09-06-announcing-incremental-mode.md","source":"@site/blog/2022-09-06-announcing-incremental-mode.md","title":"Announcing StrykerJS incremental mode","description":"We\'re excited to announce StrykerJS 6.2. Of course, this release comes with some bug fixes, but in this article, we want to focus on a popular new feature: incremental mutation testing.","date":"2022-09-06T00:00:00.000Z","formattedDate":"September 6, 2022","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":6.645,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"announcing-incremental-mode","title":"Announcing StrykerJS incremental mode","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"nextItem":{"title":"Connect PIT to Stryker Dashboard","permalink":"/blog/connect-pit-to-stryker-dashboard"}},"content":"We\'re excited to announce StrykerJS 6.2. Of course, this release comes with [some bug fixes](https://github.com/stryker-mutator/stryker-js/releases/tag/v6.2.0), but in this article, we want to focus on a popular new feature: incremental mutation testing.\\n\\nIncremental mutation testing is ideal for Continuous Integration (CI) scenarios or if you want a faster feedback cycle locally. Indeed, many users seem to be interested in this since [it was our most upvoted issue ever](https://github.com/stryker-mutator/stryker-js/issues/2753).\\n\\nWhile in \'incremental mode\', StrykerJS will track the changes you make to your code and tests and only runs mutation testing on the changed code; while still providing a full mutation testing report at the end!\\n\\n\x3c!-- truncate --\x3e\\n\\nTo update to the latest version of StrykerJS, install `@latest` as follows:\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/core@latest\\n# OR\\nyarn add --dev @stryker-mutator/core@latest\\n```\\n\\nDon\'t forget to update Stryker plugins. For example, when using the mocha runner:\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/mocha-runner@latest\\n# OR\\nyarn add --dev @stryker-mutator/mocha-runner@latest\\n```\\n\\nIf you\'re new to mutation testing, it\'s a way to measure your tests\' effectiveness. Please take a look at [our RoboBar \ud83e\udd16\ud83c\udf77 example](https://stryker-mutator.io/example) and see how even 100% code coverage doesn\'t tell the whole story. Mutation testing is the only way to know if your tests are any good.\\n\\nNow, let\'s dive into incremental mode! \ud83c\udfca\u200d\u2642\ufe0f\\n\\n## \u23e9 Incremental mode\\n\\nYou enable incremental mode with the `--incremental` flag:\\n\\n```\\nnpx stryker run --incremental\\n```\\n\\n_**Note:** Setting `\\"incremental\\": true` in your stryker.conf.json file is also supported_\\n\\nThe first time you do an incremental run, StrykerJS will do an entire run as usual, except it will write the JSON result to a `reports/stryker-incremental.json` file at the end. The next time you run StrykerJS incrementally, it will read this JSON file and try to reuse as much of it as possible.\\n\\n_**Note:** You can change the file\'s location with the `--incrementalFile` option._\\n\\nReuse of a mutant result is possible when:\\n\\n- That mutant was \\"Killed\\"; the culprit test still exists and didn\'t change\\n- Or, that mutant was not \\"Killed\\"; no new test covers it, and no covering tests changed.\\n\\nStryker uses a file diff algorithm to determine which mutants or tests changed. It does this using google\'s [diff match patch](https://github.com/google/diff-match-patch) library, a small dependency with excellent diffing performance!\\n\\nYou can see the statistics of the incremental analysis in your console. It appears just after the dry run and looks like this:\\n\\n```\\n        Mutants:        1 files changed (+2 -2)\\n        Tests:          2 files changed (+22 -21)\\n        Result:         3731 of 3965 mutant result(s).\\n```\\n\\nHere you can see that:\\n\\n- One file with mutants changed (2 mutants added, 2 mutants removed)\\n- Two test files changed (22 tests added and 21 tests removed)\\n- In total, Stryker reuses 3731 mutant results, meaning only 234 mutants need to run this time.\\n\\n_**Note:** Stryker.NET has a similar feature called: \\"baseline\\". See [the PR for a detailed comparison](https://github.com/stryker-mutator/stryker-js/pull/3609#issuecomment-1170009387)._\\n\\n## \ud83e\udd62 Limitations\\n\\nWhen in incremental mode, Stryker will do its best to produce an accurate mutation testing report. But, due to the complex nature of mutation testing, there are inherent limitations:\\n\\n- Stryker will not detect any changes you\'ve made in files other than mutated files and test files.\\n- Detecting test changes is only supported when the test runner plugin reports the necessary test details.\\n- Other changes to your environment are not detected, such as updates to other files, updated (dev) dependencies, changes to environment variables, changes to `.snap` files, readme files, etc.\\n- [Static mutants](../../docs/mutation-testing-elements/static-mutants/) don\'t have test coverage; thus, Stryker won\'t detect test changes for them.\\n\\nSee [incremental limitations](../../docs/stryker-js/incremental/#limitations) for more details.\\n\\n## \ud83d\udd28 Forcing reruns\\n\\nWith these inherent limitations in mind, you can probably imagine a scenario where you want to force specific mutants to run while using incremental mode. You can do this with `--force`. With it, you tell StrykerJS to rerun all mutants in scope, regardless of the previous result found in the incremental file.\\n\\nUsing `--force` is especially beneficial when combined with a custom `--mutate` pattern. I.e., if you only want to rerun the mutants in `src/app.js`, you use:\\n\\n```\\nnpx stryker run --incremental --force --mutate src/app.js\\n```\\n\\nYou can even specify individual lines to mutate:\\n\\n```\\nnpx stryker run --incremental --force --mutate src/app.js:5-7\\n```\\n\\nIn this example, you tell Stryker to only run mutation testing for lines 5 through 7 in the `src/app.js` file and update the incremental report.\\n\\nUsing the combination of `--incremental` with a custom `--mutate` pattern, StrykerJS will not remove mutants that are not in scope and still report them as part of the full mutation report!\\n\\n## \ud83d\udd01 Continuous Integration (CI)\\n\\nIncremental mutation testing is ideal for CI scenarios! For example, when you open a Pull/Merge Request against your main branch, you probably don\'t need an entire mutation testing run; you are just interested in _changes since the last run on the main branch_.\\n\\nFor this to work, you need the `stryker-incremental.json` file. You could \'check in\' this file into source control, but it changes a lot, and you should not treat it as source code anyway. Instead, it is better to treat it as an artifact.\\n\\nThe CI process for mutation testing looks as follows.\\n\\n```mermaid\\ngraph TD; A(1. Download stryker-incremental.json artifact)--\x3eB(2. Run `stryker --incremental`)\\nB--\x3eC(3. Upload `stryker-incremental.json` artifact)\\n```\\n\\nYour preferred implementation of steps 1 and 3 will depend on your CI provider. Besides artifact storage provided by your CI provider, you can also opt for cloud storage. If you are using AWS, it might make sense to use an S3 bucket here. You probably want to opt for Azure blob storage when using Azure DevOps.\\n\\nIs your project open-source? Then you\'re in luck with the [Stryker Dashboard](https://dashboard.stryker-mutator.io), free to use for open-source projects. The JSON file format StrykerJS uses for its incremental mode is the same as the Stryker Dashboard\'s report file. So downloading this JSON report (step 1) is as easy as using a cURL request. Furthermore, since it already updates the report, you get \'step 3\' for free when using the [dashboard reporter](../../docs/General/dashboard/).\\n\\nFor example, to download the report for the `main` branch for a project called `my-org/my-repo`, you can use this cURL request:\\n\\n```bash\\ncurl --silent --create-dirs --output reports/stryker-incremental.json https://dashboard.stryker-mutator.io/api/reports/github.com/my-org/my-repo/main\\n```\\n\\nIn an actual CI scenario, where you might push multiple changes to a particular PR, you might want to download the report for the current branch first and fall back to the main branch if it didn\'t exist. If so, you can use this script (assuming the `$BRANCH_NAME` environment variable contains the current branch name).\\n\\n```bash\\ncurl --dump-header .header.out --silent --create-dirs --output reports/stryker-incremental.json https://dashboard.stryker-mutator.io/api/reports/github.com/my-org/my-repo/$BRANCH_NAME\\nif cat .header.out | grep HTTP | grep 404\\nthen\\n    echo \\"- falling back to main branch..\\"\\n    curl -s --create-dirs -o reports/stryker-incremental.json https://dashboard.stryker-mutator.io/api/reports/github.com/my-org/my-repo/main\\nfi\\nrm .header.out\\n```\\n\\nIf you only ever run Stryker with incremental mode, you might fear that the mutation report slowly \'drifts\' from reality because of [said limitations](#-limitations). We recommend doing a full mutation testing run now and then to prevent this, either with [`--force`](#-forcing-reruns) or using the dashboard reporter. We do this in CI to develop StrykerJS itself. Our complete CI process looks like this:\\n\\n```mermaid\\nflowchart TB;\\n    A(1. Download JSON report from dashboard)--\x3eB(2. Run stryker incremental)\\n    B--\x3eC(3. Upload JSON report to dashboard)\\n    C--Merge to main branch--\x3eD(4. Full mutation testing run)\\n    D--\x3eE(5. Upload new JSON report to dashboard)\\n```\\n\\n## \ud83d\udd2e What\'s next\\n\\nPlease try out incremental mode and let us know what you think. We would love to hear from you! You can take a look at the [incremental documentation page](../../docs/stryker-js/incremental). Also, look at the [6.2 release notes](https://github.com/stryker-mutator/stryker-js/releases/tag/v6.2.0) to see the complete list of changes in 6.2.\\n\\nIn the medium term, we\'ll be working on supporting more test runners and implementing performance improvements in the typescript checker. We maintain a [\ud83d\udee3 roadmap on github](https://github.com/stryker-mutator/stryker-js/wiki/Roadmap), so you can always see what we\'re actively working on.\\n\\nIn the meantime, we would love to hear from you! So please voice your feedback in the comment section below \ud83d\udc47, on [our slack channel](https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM) or by sending a [tweet](https://twitter.com/stryker_mutator/)."},{"id":"connect-pit-to-stryker-dashboard","metadata":{"permalink":"/blog/connect-pit-to-stryker-dashboard","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2022-08-16-connect-pit-to-stryker-dashboard.md","source":"@site/blog/2022-08-16-connect-pit-to-stryker-dashboard.md","title":"Connect PIT to Stryker Dashboard","description":"Until recently, it would be quite cumbersome to integrate PIT with the Stryker Mutator Dashboard.","date":"2022-08-16T00:00:00.000Z","formattedDate":"August 16, 2022","tags":[{"label":"pit","permalink":"/blog/tags/pit"},{"label":"java","permalink":"/blog/tags/java"},{"label":"maven","permalink":"/blog/tags/maven"},{"label":"dashboard","permalink":"/blog/tags/dashboard"}],"readingTime":2.02,"hasTruncateMarker":true,"authors":[{"name":"Maarten Mulders","title":"Stryker Team","url":"https://maarten.mulders.it/","imageURL":"https://maarten.mulders.it/img/twitter-profile-202106.png"}],"frontMatter":{"slug":"connect-pit-to-stryker-dashboard","title":"Connect PIT to Stryker Dashboard","author":"Maarten Mulders","author_title":"Stryker Team","author_url":"https://maarten.mulders.it/","author_image_url":"https://maarten.mulders.it/img/twitter-profile-202106.png","tags":["pit","java","maven","dashboard"]},"prevItem":{"title":"Announcing StrykerJS incremental mode","permalink":"/blog/announcing-incremental-mode"},"nextItem":{"title":"StrykerJS v6.0: Expeditious Superior Mutations","permalink":"/blog/stryker-js-v6-expeditious-superior-mutations"}},"content":"<head>\\n  <link rel=\\"canonical\\" href=\\"https://maarten.mulders.it/2022/07/mutation-testing-badge-with-pit-and-stryker-dashboard/\\" />\\n</head>\\n\\nUntil recently, it would be quite cumbersome to integrate PIT with the Stryker Mutator Dashboard.\\nIt involved (mis-) using a different PIT reporter, a fragile Bash script to fiddle around in one of the generated JavaScript files...\\nNot pretty at all.\\n\\nA first-class tool like PIT deserves a better integration with a first-class dashboard like the Stryker Mutator Dashboard!\\n\\n\x3c!-- truncate --\x3e\\n\\nThat\'s why today, I am introducing a much cleaner and simpler approach: the [Stryker Mutator Dashboard reporter for PIT](https://github.com/mthmulders/pit-stryker-dashboard-reporter).\\n\\nHere\'s how it works:\\n\\n1. It collects mutation testing results from [PIT](https://pitest.org/).\\n1. It converts the collected mutation testing results into the format that the [Stryker Mutator Dashboard](https://dashboard.stryker-mutator.io/) expects.\\n1. It uploads the converted report to the [Stryker Mutator Dashboard](https://dashboard.stryker-mutator.io/).\\n\\n## How to use it?\\n\\nI\'ve tried to make it as simple as possible to use the reporter.\\n\\nAs a prerequisite, make sure there is an environment variable `STRYKER_DASHBOARD_API_KEY` with the API key that you got when you set up your project.\\n\\nNow, follow these four steps:\\n\\n1. Find the place in your **pom.xml** where you define the _pitest-maven_ plugin.\\n2. Add a dependency to this plugin declaration:\\n   ```xml\\n   <dependency>\\n      <groupId>it.mulders.stryker</groupId>\\n      <artifactId>pit-dashboard-reporter</artifactId>\\n      <version>0.1.2</version>\\n   </dependency>\\n   ```\\n3. Configure PIT to use the new output format:\\n   ```xml\\n   <configuration>\\n       <outputFormats>\\n           <format>stryker-dashboard</format>\\n       </outputFormats>\\n   </configuration>\\n   ```\\n   1. Alternatively, if `<configuration>` is already there, add the `<outputFormats>`.\\n   2. Similarly, if `<outputFormats>` is already there, add (or replace) with `<format>stryker-dashboard</format>`.\\n4. **Important** If you are working on a multi-module Maven project, add the following to the `<configuration>` block:\\n   ```xml\\n   <pluginConfiguration>\\n       <stryker.moduleName>${project.artifactId}</stryker.moduleName>\\n   </pluginConfiguration>\\n   ```\\n   This will ensure the mutation testing results of the various Maven modules will not mix up in the report.\\n   You **should not** do this if you have a single-module Maven project!\\n5. For all the other things, the reporter will autoconfigure itself, given your build runs on any of the following environments:\\n\\n   - GitHub Actions\\n\\n   If your builds run in another environment, please feel free to [open an issue](https://github.com/mthmulders/pit-stryker-dashboard-reporter/issues/new).\\n\\n**That\'s all - you\'re done!**\\nKick off a fresh build, wait a few minutes and enjoy the online report!\\n\\n## Credits\\n\\nCredit where credit is due: this reporter would not exist without this [tremendous work](https://github.com/wmaarts/pitest-mutation-testing-elements-plugin) by Wouter Aarts.\\nHis reporter contains all the complex mapping from PIT results to [mutation-testing-elements\' JSON format](https://github.com/stryker-mutator/mutation-testing-elements/tree/master/packages/report-schema).\\n\\n## Post Scriptum\\n\\nI have a slightly longer version of this blog (including some historical background) on [my personal blog](https://maarten.mulders.it/2022/07/mutation-testing-badge-with-pit-and-stryker-dashboard/)."},{"id":"stryker-js-v6-expeditious-superior-mutations","metadata":{"permalink":"/blog/stryker-js-v6-expeditious-superior-mutations","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2022-05-04-announcing-stryker-6-expeditious-superior-mutations.md","source":"@site/blog/2022-05-04-announcing-stryker-6-expeditious-superior-mutations.md","title":"StrykerJS v6.0: Expeditious Superior Mutations","description":"We\'re excited to announce the next major release of the StrykerJS: StrykerJS 6.0.","date":"2022-05-04T00:00:00.000Z","formattedDate":"May 4, 2022","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":10.375,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"stryker-js-v6-expeditious-superior-mutations","title":"StrykerJS v6.0: Expeditious Superior Mutations","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Connect PIT to Stryker Dashboard","permalink":"/blog/connect-pit-to-stryker-dashboard"},"nextItem":{"title":"Announcing StrykerJS v6.0 Beta","permalink":"/blog/announcing-stryker-js-v6.0-beta"}},"content":"We\'re excited to announce the next major release of the StrykerJS: StrykerJS 6.0.\\n\\nStrykerJS now supports _native ECMAScript modules_, or ESM for short. To make this work, we changed some parts of StrykerJS, which includes small (yet technically breaking) changes. As a bonus, we\'ve improved performance considerably in some use cases! We\'re curious to know what you think. Why not try it today?\\n\\n\x3c!-- truncate --\x3e\\n\\nTo update to the latest version of StrykerJS, install `@latest` as follows:\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/core@latest\\n# OR\\nyarn add --dev @stryker-mutator/core@latest\\n```\\n\\nDon\'t forget to update Stryker plugins. For example, when using the mocha runner:\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/mocha-runner@latest\\n# OR\\nyarn add --dev @stryker-mutator/mocha-runner@latest\\n```\\n\\nIf you\'re new to mutation testing, it\'s a way to measure your tests\' effectiveness. Please take a look at our RoboBar \ud83e\udd16\ud83c\udf77 example and see how even 100% code coverage doesn\'t tell the whole story. Mutation testing is the only way to know if your tests are any good.\\n\\nSince the 6.0.0 beta release, we\'ve implemented a new warning message to inform users about `--ignoreStatic` and improved the performance and progress reporting; you can read about that in the [\ud83d\uddff Static mutant improvements](#-static-mutant-improvements) paragraph.\\n\\nNow, let\'s dive into the changes! \ud83c\udfca\u200d\u2642\ufe0f\\n\\n## \ud83d\udce6 ESM support\\n\\nAs stated in the introduction, StrykerJS v6 brings official support for ESM projects.\\n\\nWith ESM, you can use `import` and `export` statements. NodeJS has supported ESM since version 12. Browsers have gradually been adding support since 2017, and all major browsers support it by now. I recommend watching [Gil Tayar\'s introduction to ESM](https://www.youtube.com/watch?v=Zyoztl_7l7g) when you want to brush up on the ESM basics.\\n\\nThe `@stryker-mutator/karma-runner` and `@stryker-mutator/jest-runner` already worked with ESM (for Jest, you will need to configure the [`--experimental-vm-modules`](/docs/stryker-js/jest-runner#ecmascript-modules) flag), but our node-based runners did not. This changes with version 6.\\n\\nYou configure it like this:\\n\\n```json\\n\\n```\\n\\nAs you can see _no configuration change_ is needed. Updating StrykerJS is enough \ud83d\ude01.\\n\\n## \u23e9 Hot reload\\n\\nStrykerJS will run your tests many, many times. Consider that each mutant is tested in isolation, so it runs your tests as many times as there are (covered) mutants. A way to save time is only to load your tests once (using `import`/`require`) and then run them multiple times in quick succession while activating a different mutant each time. We call this feature \\"hot reload\\", and it is generally the fastest way to implement mutation testing.\\n\\nHot reloading is only possible because Stryker uses mutant schemata. With mutant schemata (or mutation switching), Stryker inserts all mutants into your source code yet only activates them one at a time.\\n\\nIt looks something like this:\\n\\n```ts\\nfunction add(a, b) {\\n  if (global.activeMutant === 0) {\\n    // \ud83d\udc7e BlockStatement mutator\\n  } else {\\n    return global.activeMutant === 1\\n      ? a - b // \ud83d\udc7d ArithmeticExpression mutator\\n      : a + b;\\n  }\\n}\\n```\\n\\nWhen older versions of Stryker are testing mutants inside a worker process, it looks like this:\\n\\n(old process)\\n\\n1. Activate the mutant\\n1. _Load all files_, using `require`\\n1. Run the tests with the test runner of choice.\\n1. _Unload all files_, using [`delete require.cache[\'path/to/cjs/module\']`](https://nodejs.org/api/modules.html#requirecache) to prepare for the next run.\\n1. Report the result\\n\\nAs you can see, _all files are loaded and unloaded_ for each mutant run. This way of reloading [won\'t ever work with native ESM](https://github.com/nodejs/tooling/issues/51), as there is simply no `cache` we can `delete` the loaded files from \ud83e\udd37\u200d\u2640\ufe0f.\\n\\nThe reloading is also expensive. Think about it: if your project contains 1k files, with a total of 10k mutants, it could mean a total of _ten million file IO actions_. That\'s why mutation testing with StrykerJS would slow down considerably when the size of your project grows.\\n\\nAs of v6, Node-based test runners use hot reload. The process is now:\\n\\n(new process using hot reload)\\n\\n1. (once) Load the code using `import`\\n1. Activate the mutant\\n1. Run the tests with the test runner of choice.\\n1. Report the result\\n\\nThe result is a significant performance improvement \ud83d\udc07. You can clearly see the difference when running StrykerJS on Stryker\'s core itself:\\n\\n| Old                                         |\\n| ------------------------------------------- |\\n| ![stryker-v5](/images/blogs/stryker-v5.gif) |\\n\\n| New \\\\*                                      |\\n| ------------------------------------------- |\\n| ![stryker-v6](/images/blogs/stryker-v6.gif) |\\n\\n\\\\* using `--ignoreStatic`\\n\\nThat\'s a whopping 70% performance improvement \ud83e\udd2f.\\n\\nHot reload is supported in `@stryker-mutator/mocha-runner` and `@stryker-mutator/jasmine-runner`. Please note that this feature is always on from version 6 onward, even for plain old CommonJS style projects! It does require a higher version of mocha or jasmine, respectively, see [breaking changes](#-breaking-changes). Support for `@stryker-mutator/cucumber-runner` is planned for version 8 of `@cucumber/cucumber` release.\\n\\nUnfortunately, we\'re not supporting hot reload for the `@stryker-mutator/jest-runner` or `@stryker-mutator/karma-runner` yet; please up-vote [#3455](https://github.com/stryker-mutator/stryker-js/issues/3455) or [#3454](https://github.com/stryker-mutator/stryker-js/issues/3454) respectively if you want to see it happen \ud83d\udc99.\\n\\n## \ud83d\uddff Static mutant improvements\\n\\nYes, indeed, hot reload sounds incredible! But what about _static mutants_?\\n\\nA static mutant is a mutant that is executed once on _file load_ rather than during _test run-time_.\\n\\nTake this small example:\\n\\n```js\\n// greet.js\\nconst hi = \'\ud83d\udc4b\';\\n\\nexport function greet(name) {\\n  return `${hi} ${name}`;\\n}\\n\\n// greet.spec.js\\nimport { greet } from \'./greet.js\';\\n\\nit(\'should greet me\', () => {\\n  expect(greet(\'me\')).toBe(\'\ud83d\udc4b me\');\\n});\\n```\\n\\nWhen you run StrykerJS on this code, it will create a mutant for the `hi` constant:\\n\\n```diff\\n-const hi = \'\ud83d\udc4b\';\\n+const hi = \'\';\\n```\\n\\nWhen you consider mutant schemata, the actual code produced by StrykerJS looks more like this:\\n\\n```js\\nconst hi = global.activeMutant === \'1\' ? \'\' : \'\ud83d\udc4b\';\\n```\\n\\nThis mutant is called a _static mutant_. It is executed on file-load rather than during test run-time. For more details on static mutants, see [the new documentation on them](/docs/mutation-testing-elements/static-mutants).\\n\\nNow, let\'s factor in [hot reload](#-hot-reload), where worker processes load the files once and reuse them across multiple mutant runs. This would mean that the mutant _survives no matter how good your tests are_. We can\'t have that \ud83d\ude2a!\\n\\nThat\'s why StrykerJS will detect static mutants and _still follow the old process_ to test them. However, instead of reloading the files (remember, this won\'t work for ESM files), it will create a shiny new worker process for every static mutant run (for NodeJS-based test runners).\\n\\nStryker will also sort mutants, testing static mutants after non-static mutants. This saves some time since this means fewer worker process restarts.\\n\\nFor example, imagine mutants A, B, and C, where B is a static mutant. To keep it simple, we will be running with concurrency 1, meaning only one worker exists at any one time.\\n\\n1. Mutant A: we start a worker process and test it.\\n1. Mutant B: we need to recreate the worker to test the static mutant\\n1. Mutant C: we need to recreate the worker _again_, because the previous mutant was static, which polluted the worker with a non-erasable mutant.\\n\\nBasic math tells us a worker is started three times in this example. Now imagine this example again, but with the mutants sorted: A, C, and B.\\n\\n1. Mutant A: we start a worker process and test it.\\n1. Mutant C: we reuse the worker and test it.\\n1. Mutant B: we need to recreate the worker to test the static mutant\\n\\nAs you can see, sorting the mutants just saved us from having to restart the worker once. This performance gain might sound insignificant, but with 1000s of mutants, it can save 100s of restarts, well worth the (small) effort.\\n\\nOne final note about static mutants: the progress-reporter will now accurately report their progress. It does this by assigning a _weight_ to each mutant to be tested, which it calculates using the performance measurements of the dry run. This means more smooth progress and a more realistic ETC estimate.\\n\\n## \ud83d\udd90 Ignore static mutants\\n\\nTesting static mutants can be very expensive. As explained in the previous paragraph, they need a fresh worker process for each run (for Node-based test runners). On top of that, Stryker cannot determine test coverage for them. So the only thing it can do is run all tests \ud83d\udc0c.\\n\\nAlso, they are generally less interesting for you to spend your time on since they include constant strings, numbers, etc.\\n\\nYou might even want to ignore them entirely! This is where `--ignoreStatic` comes in. With `--ignoreStatic` static mutants are ... well ignored. Of course, you can still see them in your HTML report, but they won\'t count towards your mutation score.\\n\\n<figure><img src=\\"/images/blogs/ignored-static-mutant.png\\" alt=\\"Ignored static mutant\\" />\\n<figcaption>An ignored static mutant</figcaption>\\n</figure>\\n\\nIgnoring static mutants improves performance, but your mileage may vary. It depends on the number of static mutants and the size of your project. For running StrykerJS on Stryker\'s core itself, we [saw a whopping 50% performance improvement by ignoring 6% of our mutants (the static mutants) \ud83e\udd2f](https://github.com/stryker-mutator/stryker-js/issues/3282#issuecomment-980110861).\\n\\nEven though it is a performance improvement, the default value for`\\"ignoreStatic\\"` is `false`, meaning Stryker won\'t ignore them. Our reasoning here is: \\"better be safe than sorry\\". But how would you know about this new feature when running Stryker on your project? Well, Stryker will tell you about it with a new warning message.\\n\\nYou will see the message when 2 conditions are met:\\n\\n1. Stryker estimates static mutants to take >= 40% of the total execution time; and\\n2. Your project\'s estimated average execution time of a static mutant is twice that of a non-static mutant in your project.\\n\\nStryker logs this message _right before testing mutants_, so you can quickly kill Stryker and run again with `--ignoreStatic` if you want.\\n\\nHere is an example you will see when running StrykerJS on Stryker\'s core without `ignoreStatic`:\\n\\n```\\nWARN MutantTestPlanner Detected 255 static mutants (8% of total) that are estimated to take 83% of the time running the tests!\\n  You might want to enable \\"ignoreStatic\\" to ignore these static mutants for your next run.\\n  For more information about static mutants, visit https://stryker-mutator.io/docs/mutation-testing-elements/static-mutants.\\n  (disable \\"warnings.slow\\" to ignore this warning)\\n```\\n\\nIf you\'re happy with the performance tradeoff and want Stryker to stop annoying you, you can disable this warning by disabling `\\"warnings.slow\\"` in your stryker.conf.json file.\\n\\n```json\\n{\\n  \\"ignoreStatic\\": false,\\n  \\"warnings\\": { \\"slow\\": false }\\n}\\n```\\n\\n## \ud83d\udcc3 ESM-based config\\n\\nFrom v6 onward, StrykerJS also supports _your config_ as ESM. Either by adding `{ \\"type\\": \\"module\\" }` to your package.json file, or by renaming `stryker.conf.js` to `stryker.conf.mjs`.\\n\\n```js\\n// stryker.conf.mjs\\n/** @type {import(\'@stryker-mutator/api/core\').PartialStrykerOptions} */\\nconst config = {\\n  reporters: [\'html\', \'clear-text\', \'progress\'],\\n  testRunner: \'mocha\',\\n  coverageAnalysis: \'perTest\',\\n};\\nexport default config;\\n```\\n\\nWe\'ve updated the `stryker init` command to emit this new config file format when choosing for \\"JavaScript\\" config format.\\n\\n_Note_: for completeness sake, `stryker.conf.cjs` is also supported.\\n\\n## \ud83d\udca5 Breaking changes\\n\\nThis is the list of breaking changes.\\n\\n- [10d874](https://github.com/stryker-mutator/stryker-js/commit/10d874e4c46335d9ea457634d3061af35fa8f854) **node**: Drop support for Node 12. Minimal version is now Node 14.18.0.\\n- [#3450](https://github.com/stryker-mutator/stryker-js/pull/3450) **checker-api:** The `check` method of checker plugins now receives a _group of mutants_ and should provide a `CheckResult` per mutant id.\\n- [#3438](https://github.com/stryker-mutator/stryker-js/pull/3438) **html reporter:** Configuration option `htmlReporter.baseDir` is deprecated and will be removed in a later version. Please use `htmlReporter.fileName` instead.\\n- [#3432](https://github.com/stryker-mutator/stryker-js/pull/3432) **esm config:** Exporting a function (using `module.exports = function(config) {}`) from your `stryker.conf.js` file is no longer supported. This was already deprecated but now will give an error.\\n- [#3409](https://github.com/stryker-mutator/stryker-js/pull/3409) **esm:** StrykerJS is now a pure ESM. Please [read this](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\\n- [#3409](https://github.com/stryker-mutator/stryker-js/pull/3409) **esm:** Karma v6.3 is now the min supported karma version for `@stryker-mutator/karma-runner`, since [that version added support for async config loading](https://github.com/karma-runner/karma/blob/master/CHANGELOG.md#630-2021-03-23)\\n- [#3396](https://github.com/stryker-mutator/stryker-js/pull/3396) **esm:** The `@stryker-mutator/jasmine-runner` now requires jasmine@3.10 or higher.\\n- [#3393](https://github.com/stryker-mutator/stryker-js/pull/3393) **esm:** The `@stryker-mutator/mocha-runner` now requires `mocha@7.2` or higher.\\n- [#3369](https://github.com/stryker-mutator/stryker-js/pull/3369) **reload test environment:** Test runner plugins must provide `TestRunnerCapabilities` by implementing the `capabilities` method.\\n- [#3489](https://github.com/stryker-mutator/stryker-js/pull/3489) **file**: The File class is no longer part of the public api and is thus no longer exported from @stryker-mutator/api. Plugin creators shouldn\'t rely on it anymore.\\n- [3469](https://github.com/stryker-mutator/stryker-js/pull/3469) **progress**: Reporter API method onAllMutantsMatchedWithTests has been replaced by onMutationTestingPlanReady. Please use that for your reporter plugin instead.\\n- [3469](https://github.com/stryker-mutator/stryker-js/pull/3469) **progress**: Reporter API method onAllSourceFilesRead has been removed, please use onMutationTestReportReady to retrieve the source files.\\n- [3469](https://github.com/stryker-mutator/stryker-js/pull/3469) **progress**: Reporter API method onSourceFileRead has been removed, please use onMutationTestReportReady to retrieve the source files.\\n\\n## \ud83d\udd2e What\'s next\\n\\nWith v6 out, we will be implementing a performance boost for our [`typescript-checker`](https://github.com/stryker-mutator/stryker-js/pull/3450). In the medium term we\'ll be looking to implement [incremental mode](https://github.com/stryker-mutator/stryker-js/issues/2753).\\n\\nIn the mean-time, we would love to hear from you! Please voice your feedback in the comment section below \ud83d\udc47, on [our slack channel](https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM) or by sending a [tweet](https://twitter.com/stryker_mutator/)."},{"id":"announcing-stryker-js-v6.0-beta","metadata":{"permalink":"/blog/announcing-stryker-js-v6.0-beta","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2022-03-03-announcing-stryker-6-beta.md","source":"@site/blog/2022-03-03-announcing-stryker-6-beta.md","title":"Announcing StrykerJS v6.0 Beta","description":"We\'re excited to announce the beta of the next major release of the StrykerJS: StrykerJS 6.0.","date":"2022-03-03T00:00:00.000Z","formattedDate":"March 3, 2022","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":7.06,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"announcing-stryker-js-v6.0-beta","title":"Announcing StrykerJS v6.0 Beta","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"StrykerJS v6.0: Expeditious Superior Mutations","permalink":"/blog/stryker-js-v6-expeditious-superior-mutations"},"nextItem":{"title":"Announcing Stryker.NET 1.0","permalink":"/blog/2021-30-10-announcing-stryker-net-1.md"}},"content":"We\'re excited to announce the beta of the next major release of the StrykerJS: StrykerJS 6.0.\\n\\nFrom the 6th version onward, StrykerJS supports _native ECMAScript modules_, or ESM for short. To make this work, we changed some parts of StrykerJS, which includes small (yet technically breaking) changes. As a bonus, we\'ve improved performance considerably in some use cases! We\'re curious to know what you think. Why not try the beta today?\\n\\n\x3c!-- truncate --\x3e\\n\\nUpdate your Stryker dependencies to get started using the beta.\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/core@next\\n# OR\\nyarn add --dev @stryker-mutator/core@next\\n```\\n\\nDon\'t forget to update Stryker plugins. For example, when using the mocha runner:\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/mocha-runner@next\\n# OR\\nyarn add --dev @stryker-mutator/mocha-runner@next\\n```\\n\\nIf you\'re new to mutation testing, it\'s a way to measure your tests\' effectiveness. Please take a look at our RoboBar \ud83e\udd16\ud83c\udf77 example and see how even 100% code coverage doesn\'t tell the whole story. Mutation testing is the only way to know if your tests are any good.\\n\\nNow, let\'s dive into the changes! \ud83c\udfca\u200d\u2642\ufe0f\\n\\n## \ud83d\udce6 ESM support for NodeJS-based test runners\\n\\nAs stated in the introduction, StrykerJS v6 brings official support for ESM projects.\\n\\nWith ESM, you can use `import` and `export` statements. NodeJS has supported ESM since version 12. Browsers have gradually been adding support since 2017, and all major browsers support it by now. I recommend watching [Gil Tayar\'s introduction to ESM](https://www.youtube.com/watch?v=Zyoztl_7l7g) when you want to brush up on the ESM basics.\\n\\nThe `@stryker-mutator/karma-runner` and `@stryker-mutator/jest-runner` already worked with ESM (for Jest, you will need to configure the [`--experimental-vm-modules`](/docs/stryker-js/jest-runner/#ecmascript-modules) flag), but our node-based runners did not. This changes with version 6.\\n\\nYou configure it like this:\\n\\n```json\\n\\n```\\n\\nAs you can see _no configuration change_ is needed. Updating StrykerJS is enough \ud83d\ude01.\\n\\n## \u23e9 Hot reload\\n\\nAs you might know, StrykerJS uses mutation switching (sometimes called mutant schemata), meaning Stryker inserts all mutants into your source code yet only activates them one at a time.\\n\\nIt looks something like this:\\n\\n```ts\\nfunction add(a, b) {\\n  if (global.activeMutant === 0) {\\n    // \ud83d\udc7e BlockStatement mutator\\n  } else {\\n    return global.activeMutant === 1\\n      ? a - b // \ud83d\udc7d ArithmeticExpression mutator\\n      : a + b;\\n  }\\n}\\n```\\n\\nNext, Stryker creates _worker_ processes. A worker process is responsible for activating a mutant, running tests, and reporting the result to the main process. To do that, it uses the test runner of your choice, for example, [mocha](https://mochajs.org/). For NodeJS-based test runners, it would look something like this:\\n\\n(old process)\\n\\n1. Activate the mutant\\n1. _Load all files_, using `require`\\n1. Run the tests with the test runner of choice.\\n1. _Unload all files_, using [`delete require.cache[\'path/to/cjs/module\']`](https://nodejs.org/api/modules.html#requirecache) to prepare for the next run.\\n1. Report the result\\n\\nAs you can see, _all files are loaded and unloaded_ for each mutant run. This way of reloading [won\'t ever work with native ESM](https://github.com/nodejs/tooling/issues/51), as there is simply no `cache` we can `delete` the loaded files from \ud83e\udd37\u200d\u2640\ufe0f.\\n\\nThe reloading is also expensive. Think about it: if your project contains 1k files, with a total of 10k mutants, it could mean a total of _ten million file IO actions_. That\'s why mutation testing with StrykerJS would slow down considerably when the size of your project grows.\\n\\nWhen you think about it, it is also **unnecessary**; why not simply keep all files loaded? Since they contain all the mutants anyway. This new process looks something like this:\\n\\n(new process)\\n\\n1. (once) Load the code using `import`\\n1. Activate the mutant\\n1. Run the tests with the test runner of choice.\\n1. Report the result\\n\\nThe result is a significant performance improvement \ud83d\udc07. You can clearly see the difference when running StrykerJS on Stryker\'s core itself:\\n\\n| Old                                         |\\n| ------------------------------------------- |\\n| ![stryker-v5](/images/blogs/stryker-v5.gif) |\\n\\n| New \\\\*                                      |\\n| ------------------------------------------- |\\n| ![stryker-v6](/images/blogs/stryker-v6.gif) |\\n\\n\\\\* using `--ignoreStatic`\\n\\nThat\'s a whopping 70% performance improvement \ud83e\udd2f.\\n\\nWe call this feature \\"hot reload,\\" and StrykerJS supports it in `@stryker-mutator/mocha-runner` and `@stryker-mutator/jasmine-runner`. Please note that this feature is always on from version 6 onward, even for plain old CommonJS style projects! It does require a higher version of mocha or jasmine, respectively, see [breaking changes](#-breaking-changes). Support for `@stryker-mutator/cucumber-runner` for the release of version 8 of `@cucumber/cucumber`.\\n\\nUnfortunately, we\'re not supporting hot reload for the `@stryker-mutator/jest-runner` or `@stryker-mutator/karma-runner` yet; please up-vote [#3455](https://github.com/stryker-mutator/stryker-js/issues/3455) or [#3454](https://github.com/stryker-mutator/stryker-js/issues/3454) respectively if you want to see it happen \ud83d\udc99.\\n\\n## \ud83d\uddff Ignore static\\n\\nYes, indeed, hot reload sounds incredible! But what about _static mutants_?\\n\\nA static mutant is a mutant that is executed once on _file load_ rather than during _test runtime_.\\n\\nTake this small example:\\n\\n```js\\n// greet.js\\nconst hi = \'\ud83d\udc4b\';\\n\\nexport function greet(name) {\\n  return `${hi} ${name}`;\\n}\\n\\n// greet.spec.js\\nimport { greet } from \'./greet.js\';\\n\\nit(\'should greet me\', () => {\\n  expect(greet(\'me\')).toBe(\'\ud83d\udc4b me\');\\n});\\n```\\n\\nWhen you run StrykerJS on this code, it will create a mutant for the `hi` constant:\\n\\n```diff\\n-const hi = \'\ud83d\udc4b\';\\n+const hi = \'\';\\n```\\n\\nWhen you consider mutant schemata, the actual code produced by StrykerJS looks more like this:\\n\\n```js\\nconst hi = global.activeMutant === \'1\' ? \'\' : \'\ud83d\udc4b\';\\n```\\n\\nWhen you now factor in [hot reload](#-hot-reload), you see that the mutant is only active during the runtime of the tests instead of at load time. This would mean that the mutant _survives no matter how good your tests are_. We can\'t have that \ud83d\ude2a!\\n\\nThat\'s why StrykerJS will detect static mutants and _still follow the old process_ to test them. However, instead of reloading the files (remember, this won\'t work for ESM files), it will create a shiny, new worker process for every static mutant run (for NodeJS-based test runners).\\n\\nCreating new worker processes to test static mutants makes them much more expensive in StrykerJS v6. Also, they are generally less interesting for you to spend your time on since they include constant strings, numbers, etc. You might even want to ignore them entirely! This is where `--ignoreStatic` comes in.\\n\\nWith `--ignoreStatic` static mutants are ... well ignored. You can still see them in your HTML report, but they won\'t count towards your mutation score.\\n\\n<figure><img src=\\"/images/blogs/ignored-static-mutant.png\\" alt=\\"Ignored static mutant\\" />\\n<figcaption>An ignored static mutant</figcaption>\\n</figure>\\n\\nYour mileage may vary, but for running StrykerJS on Stryker\'s core itself, we [saw a whopping 50% performance improvement by ignoring 6% of our mutants (the static mutants) \ud83e\udd2f](https://github.com/stryker-mutator/stryker-js/issues/3282#issuecomment-980110861). For more details on static mutants, see [the new documentation on on them](/docs/mutation-testing-elements/static-mutants).\\n\\nPlease try this feature out and provide feedback. We\'re also thinking of ways to point this feature out to users of Stryker, or even enable it by default. Feel free to voice your opinion in [the GitHub issue about it](https://github.com/stryker-mutator/stryker-js/issues/3435).\\n\\n## \ud83d\udcc3 ESM-based config\\n\\nFrom v6 onward, StrykerJS also supports _your config_ as ESM. Either by adding `{ \\"type\\": \\"module\\" }` to your package.json file, or by renaming `stryker.conf.js` to `stryker.conf.mjs`.\\n\\n```js\\n// stryker.conf.mjs\\n/** @type {import(\'@stryker-mutator/api/core\').PartialStrykerOptions} */\\nconst config = {\\n  reporters: [\'html\', \'clear-text\', \'progress\'],\\n  testRunner: \'mocha\',\\n  coverageAnalysis: \'perTest\',\\n};\\nexport default config;\\n```\\n\\nWe\'ve updated the `stryker init` command to emit this new config file format when choosing for \\"JavaScript\\" config format.\\n\\n_Note_: for completeness sake, `stryker.conf.cjs` is also supported.\\n\\n## \ud83d\udca5 Breaking changes\\n\\nThis is the list of breaking changes.\\n\\n- [#3450](https://github.com/stryker-mutator/stryker-js/pull/3450) **checker-api:** The `check` method of checker plugins now receives a _group of mutants_ and should provide a `CheckResult` per mutant id.\\n- [#3438](https://github.com/stryker-mutator/stryker-js/pull/3438) **html reporter:** Configuration option `htmlReporter.baseDir` is deprecated and will be removed in a later version. Please use `htmlReporter.fileName` instead.\\n- [#3432](https://github.com/stryker-mutator/stryker-js/pull/3432) **esm config:** Exporting a function (using `module.exports = function(config) {}`) from your `stryker.conf.js` file is no longer supported. This was already deprecated but now will give an error.\\n- [#3409](https://github.com/stryker-mutator/stryker-js/pull/3409) **esm:** StrykerJS is now a pure ESM. Please [read this](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\\n- [#3409](https://github.com/stryker-mutator/stryker-js/pull/3409) **esm:** Node 12.20 is now the min version.\\n- [#3409](https://github.com/stryker-mutator/stryker-js/pull/3409) **esm:** Karma v6.3 is now the min supported karma version for `@stryker-mutator/karma-runner`, since [that version added support for async config loading](https://github.com/karma-runner/karma/blob/master/CHANGELOG.md#630-2021-03-23)\\n- [#3396](https://github.com/stryker-mutator/stryker-js/pull/3396) **esm:** The `@stryker-mutator/jasmine-runner` now requires jasmine@3.10 or higher.\\n- [#3393](https://github.com/stryker-mutator/stryker-js/pull/3393) **esm:** The `@stryker-mutator/mocha-runner` now requires `mocha@7.2` or higher.\\n- [#3369](https://github.com/stryker-mutator/stryker-js/pull/3369) **reload test environment:** Test runner plugins must provide `TestRunnerCapabilities` by implementing the `capabilities` method.\\n\\n## \ud83d\udd2e What\'s next\\n\\nWe\'ll be focussing on getting StrykerJS 6.0 released in about a month or so. We would appreciate your feedback. Feel free to report any [issues](https://github.com/stryker-mutator/stryker-js/issues) you find or voice your opinion in the comment section below \ud83d\udc47 or on [our slack channel](https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM)."},{"id":"2021-30-10-announcing-stryker-net-1.md","metadata":{"permalink":"/blog/2021-30-10-announcing-stryker-net-1.md","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2021-10-30-announcing-stryker-net-1.md","source":"@site/blog/2021-10-30-announcing-stryker-net-1.md","title":"Announcing Stryker.NET 1.0","description":"We\'re proud to announce the first major release of Stryker.NET: 1.0. It comes with exciting new features and an overhaul of how you interact with the Stryker CLI. With the release of Stryker 1.0, we wanted to create a cohesive and intuitive user experience.","date":"2021-10-30T00:00:00.000Z","formattedDate":"October 30, 2021","tags":[{"label":"stryker.net","permalink":"/blog/tags/stryker-net"},{"label":"release","permalink":"/blog/tags/release"},{"label":"mutation testing","permalink":"/blog/tags/mutation-testing"},{"label":"stryker mutator","permalink":"/blog/tags/stryker-mutator"},{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":8.285,"hasTruncateMarker":true,"authors":[{"name":"Richard Werkman","title":"Stryker Team","url":"https://github.com/richardwerkman","imageURL":"https://avatars.githubusercontent.com/u/14224500?v=4"}],"frontMatter":{"slug":"2021-30-10-announcing-stryker-net-1.md","title":"Announcing Stryker.NET 1.0","author":"Richard Werkman","author_title":"Stryker Team","author_url":"https://github.com/richardwerkman","author_image_url":"https://avatars.githubusercontent.com/u/14224500?v=4","tags":["stryker.net","release","mutation testing","stryker mutator","stryker-js"]},"prevItem":{"title":"Announcing StrykerJS v6.0 Beta","permalink":"/blog/announcing-stryker-js-v6.0-beta"},"nextItem":{"title":"Stryker4s: from 40 minutes to 40 seconds","permalink":"/blog/stryker4s-40-minutes-to-40-seconds"}},"content":"We\'re proud to announce the first major release of Stryker.NET: 1.0. It comes with exciting new features and an overhaul of how you interact with the Stryker CLI. With the release of Stryker 1.0, we wanted to create a cohesive and intuitive user experience.\\n\\n\x3c!--truncate--\x3e\\n\\nIf you\'re new to mutation testing, it\'s a way to measure your tests\' effectiveness. A mutation testing framework will make small changes, called _mutants_, one by one in your source code. Then it will run your tests to see if one of them fails. If so, you just \\"killed\\" that mutant; if not, it \\"survived\\". If too many mutants survive, you probably want to improve your tests. The mutation testing report will give you insides into the test cases you may have missed. If this all sounds complicated, please take a look at [our RoboBar \ud83e\udd16\ud83c\udf77 example](https://stryker-mutator.io/example).\\n\\nIf you\'re new to Stryker.NET, please follow our [Getting started guide](https://stryker-mutator.io/docs/stryker-net/getting-started/). Are you already using Stryker.NET? Update to the latest version with the following command:\\n\\nGlobal install:\\n\\n```shell\\ndotnet tool update dotnet-stryker --global\\n```\\n\\nProject install:\\n\\n```shell\\ndotnet tool update dotnet-stryker --local\\n```\\n\\nWith that out of the way, let\'s dive into the new stuff!\\n\\n## \ud83d\udca5 Breaking changes\\n\\n### \u23ed Updated runtime\\n\\nThe .NET runtime for Stryker.NET has been updated from 3.1 to 5.0.\\n\\nThis update should have some performance benefits, and it will help with developing Stryker.NET in the future.\\n\\nPlease [download and install .NET 5.0](https://dotnet.microsoft.com/download/dotnet/5.0) or update your pipeline to support .NET 5.\\n\\n_Note that you do not have to update your application to use dotnet 5. Dotnet 5 is only a runtime requirement for Stryker to be able to run on your system._\\n\\n### \u23ed Options rework\\n\\nMost options have been renamed or work differently.\\n\\nA fundamental difference is how you pass multi-value options from the command line.\\n\\n#### Multi value options\\n\\nThe old annotation for passing multi-value options was confusing and not based on any standards. For example, this is how you provided multiple reporters pre 1.0 \ud83d\udc4e\\n\\n```shell\\ndotnet stryker --reporters \\"[\'html\', \'progress\']\\"\\n```\\n\\nFrom 1.0 onward, this now looks like \ud83d\udc4d\\n\\n```shell\\ndotnet stryker --reporter \\"html\\" --reporter \\"progress\\"\\n```\\n\\n#### Options migration guide\\n\\nMost options have a new name. We have also decided that some options either don\'t belong on the commandline or don\'t belong in the configuration file. For example, an API key should not be stored in the configuration file so that possibility has been removed.\\n\\nOptions migration overview:\\n\\n| Old cli                       | New cli                                     | Old json                      | New json                     |\\n| ----------------------------- | ------------------------------------------- | ----------------------------- | ---------------------------- |\\n| config-file-path              | f \\\\| config-file                            | \u274c                            | \u274c                           |\\n| max-concurrent-testrunners    | c \\\\| concurrency                            | max-concurrent-testrunners    | concurrency                  |\\n| dev-mode                      | dev-mode                                    | dev-mode                      | \u274c                           |\\n| solution-path                 | s \\\\| solution                               | solution-path                 | solution                     |\\n| log-file                      | L \\\\| log-to-file                            | log-file                      | \u274c                           |\\n| log-level                     | V \\\\| verbosity                              | log-level                     | verbosity                    |\\n| mutation-level                | l \\\\| mutation-level                         | mutation-level                | mutation-level               |\\n| threshold-high                | \u274c                                          | thresholds.high               | thresholds.high              |\\n| threshold-low                 | \u274c                                          | thresholds.low                | thresholds.low               |\\n| threshold-break               | b \\\\| break-at                               | thresholds.break              | thresholds.break             |\\n| reporters                     | r \\\\| reporter (flag allowed multiple times) | reporters                     | reporters                    |\\n| project-file                  | p \\\\| project                                | project-file                  | project                      |\\n| diff                          | since                                       | diff                          | since                        |\\n| timeout-ms                    | \u274c                                          | timeout-ms                    | additional-timeout           |\\n| excluded-mutations            | \u274c                                          | excluded-mutations            | ignore-mutations             |\\n| ignore-methods                | \u274c                                          | ignore-methods                | ignore-methods               |\\n| mutate                        | m \\\\| mutate                                 | mutate                        | mutate                       |\\n| language-version              | \u274c                                          | language-version              | language-version             |\\n| coverage-analysis             | \u274c                                          | coverage-analysis             | coverage-analysis            |\\n| abort-test-on-fail            | \u274c                                          | abort-test-on-fail            | disable-bail                 |\\n| disable-testing-mix-mutations | \u274c                                          | disable-testing-mix-mutations | disable-mix-mutants          |\\n| test-projects                 | \u274c                                          | test-projects                 | test-projects                |\\n| dashboard-url                 | \u274c                                          | dashboard-url                 | dashboard-url                |\\n| dashboard-api-key             | dashboard-api-key                           | dashboard-api-key             | \u274c                           |\\n| project-name                  | \u274c                                          | dashboard-project             | project-info.name            |\\n| module-name                   | \u274c                                          | dashboard-module              | project-info.module          |\\n| dashboard-version             | v \\\\| version                                | dashboard-version             | project-info.version         |\\n| diff-ignore-files             | \u274c                                          | diff-ignore-files             | since.ignore-changes-in      |\\n| azure-storage-url             | \u274c                                          | azure-storage-url             | baseline.azure-fileshare-url |\\n| dashboard-fallback-version    | \u274c                                          | dashboard-fallback-version    | baseline.fallback-version    |\\n| baseline-storage-location     | \u274c                                          | baseline-storage-location     | baseline.provider            |\\n| dashboard-compare             | with-baseline                               | dashboard-compare             | baseline                     |\\n| git-diff-target               | \\\\--since ...                                | git-diff-target               | since.target                 |\\n| azure-storage-sas             | azure-fileshare-sas                         | azure-storage-sas             | \u274c                           |\\n| files-to-exclude              | \u274c                                          | \u274c                            | \u274c                           |\\n| test-runner                   | \u274c                                          | \u274c                            | \u274c                           |\\n\\n\u274c means the option has been removed.\\n\\n## \ud83d\ude80 What\'s new?\\n\\nThis release comes packed with new features! Let\'s walk through them all:\\n\\n### Statement removal mutator\\n\\nWe introduced a new mutator that removes statements that otherwise would have been untouched by other mutators.\\n\\n![](./../static/images/blogs/statement-mutation.png)\\n\\nThe mutator will remove the following statements:\\n\\n- `return`\\n- `break`\\n- `continue`\\n- `goto`\\n- `throw`\\n- `yield return`\\n- `yield break`\\n- `expression`\\n\\n### Allow failing tests\\n\\nIt\'s now allowed to start a mutation test run even with failing tests. Stryker will try to make the best of the situation by marking mutants covered by `initially failing tests` as `survived`.\\n\\n### Mutant filtering\\n\\nIt\'s now possible to filter mutants at the source code level using special comments. This filtering gives the most fine-grained level of control.\\n\\nThe syntax for the comments is: `Stryker [disable|restore][once][all| mutator list][: reason for disabling]`\\n\\n`// Stryker disable all` Disables all mutants from that line on.\\n\\n`// Stryker restore all` re-enables all mutants from that line on.\\n\\n`// Stryker disable once all` will only disable mutants on the next line.\\n\\n`// Stryker disable once Arithmetic,Update` will only disable Arithmetic and Update mutants on the next line\\n\\nExample:\\n\\n```csharp\\nvar i = 0;\\nvar y = 10;\\n// Stryker disable all : for explanatory reasons\\ni++; // won\'t be mutated\\ny++; // won\'t be mutated\\n// Stryker restore all\\ni--; // will be mutated\\n// Stryker disable once all\\ny--; // won\'t be mutated\\ni++; // will be mutated\\n// Stryker disable once Arithmetic\\ny++; // will be mutated\\n// Stryker disable once Arithmetic,Update\\ni--; // won\'t be mutated\\n```\\n\\n_Note that this feature is scope aware. If you disable mutators inside a method, the scope will not leak outside the method, even if there is more code below._\\n\\n### Ignore mutations\\n\\nThe `ignore-mutations` option now offers more fine-grained control. Before v1.0 it was possible to ignore complete mutators. Now it\'s possible to ignore specific mutants inside these mutators as well.\\n\\nExample:\\n\\n```json\\n\\"stryker-config\\": {\\n    \\"ignore-mutations\\": [\\n        \\"linq.First\\",\\n        \\"linq.Sum\\"\\n    ]\\n}\\n```\\n\\n> Note: this only works for Linq mutations for now, but we plan to bring this functionality to all mutations.\\n\\n### MsBuild path option\\n\\nBy default Stryker tries to auto-discover MSBuild on your system. However, if Stryker fails to discover the correct MSBuild, you may manually supply the path with this option.\\n\\nExample:\\n\\n```shell\\n--msbuild-path \\"c://MsBuild/MsBuild.exe\\"\\n```\\n\\n### Target framework\\n\\nIf the project targets multiple frameworks, it is now possible to specify the particular framework to build against. If you set a non-existent target, Stryker will build the project against a random one (or the only one if so).\\n\\nExample:\\n\\n```json\\n{\\n  \\"stryker-config\\": {\\n    \\"target-framework\\": \\"netcoreapp3.1\\"\\n  }\\n}\\n```\\n\\n### Filter test cases\\n\\nA long-awaited feature has finally found its way into Stryker! It is now possible to exclude some test cases. So, for example, if you have long-running integration tests in your unit test project, they can be disabled for Stryker, improving the performance.\\n\\nExample:\\n\\n```json\\n{\\n  \\"stryker-config\\": {\\n    \\"test-case-filter\\": \\"(FullyQualifiedName~UnitTest1&TestCategory=CategoryA)|Priority=1\\"\\n  }\\n}\\n```\\n\\nUses `dotnet test --filter` option syntax, [detailed here](https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests).\\n\\n### Use Source Link for dashboard reporter\\n\\nFilling all settings to use the dashboard reporter could be a bit of a hassle. However, thanks to [Source Link](https://github.com/dotnet/sourcelink#readme), the repository URL and the full version (including the git SHA1) of a project can be included in the produced assembly.\\n\\nStryker now uses the information computed by SourceLink to automatically retrieve the project name (github.com/organization/project) and project version, both of which are requirements for the dashboard reporter.\\n\\nEnable this by adding the following to your `.csproj`:\\n\\n```xml\\n  <ItemGroup>\\n    <PackageReference Include=\\"DotNet.ReproducibleBuilds\\" Version=\\"0.1.66\\" PrivateAssets=\\"All\\"/>\\n  </ItemGroup>\\n```\\n\\nFor more information on SourceLink and ReproducibleBuilds see [SourceLink](https://github.com/dotnet/sourcelink) and [Dotnet.ReproducibleBuilds](https://github.com/dotnet/reproducible-builds)\\n\\n### Block removal mutations\\n\\nFinally the last missing \\"common\\" mutation is added to Stryker.NET! Block removal mutations empty every block statement in your code. This means method bodies or statement bodies (if, while, for). With this mutation Stryker will have improved coverage on your complete codebase. Every method will have at least one mutation and thus should have at least one test.\\n\\n## \ud83d\udc1b Bug fixes\\n\\n### No more mutated assembly on disk after Stryker run\\n\\nDuring mutation testing, Stryker replaces your system under test assembly on disk. Up till now, the mutated assembly stayed in place after mutation testing was done. This had some unintended side effects. For example, code coverage results could be incorrect until you rebuild your project, and there was the risk of accidentally releasing/publishing the mutated assembly instead of the original if you did not rebuild your project after mutation testing in your pipelines. We now copy your original assembly before we modify it and place it back after mutation testing. No more rebuild required!\\n\\n## \ud83d\udc6a Team expansion\\n\\nWe welcome [Cyrille DUPUYDAUBY](https://github.com/dupdob) to the team! They have supported us with feedback, testing, and development since 2018. It was long past due that we officially recognized their contributions to the project!\\n\\n## \ud83c\udf89 Thank you\\n\\nSpecial thanks to [Cyrille DUPUYDAUBY](https://github.com/dupdob), [Peter Semkin](https://github.com/psfinaki), [Philip Rowan](https://github.com/philrowan-mtb), [Corentin Altepe](https://github.com/corentinaltepe), [C\xe9dric Luthi](https://github.com/0xced), [Gregory Bell](https://github.com/grbell-ms), [John McGlynn](https://github.com/JohnMcGlynnMSFT), [Beatrice Forslund](https://github.com/Bforslund), [dukedagmor](https://github.com/dukedagmor) and anyone else we may have missed for their efforts to make this release happen \ud83d\udc4f We truly appreciate all the help and feedback we receive!"},{"id":"stryker4s-40-minutes-to-40-seconds","metadata":{"permalink":"/blog/stryker4s-40-minutes-to-40-seconds","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2021-06-16-stryker4s-sbt-performance.mdx","source":"@site/blog/2021-06-16-stryker4s-sbt-performance.mdx","title":"Stryker4s: from 40 minutes to 40 seconds","description":"Stryker4s is your friendly mutation testing framework for Scala. Compared to earlier versions, Stryker4s 0.12 achieves a 60x speed increase in some scenarios \ud83e\udd2f. Are you curious to know how? Keep on reading.","date":"2021-06-16T00:00:00.000Z","formattedDate":"June 16, 2021","tags":[{"label":"stryker4s","permalink":"/blog/tags/stryker-4-s"}],"readingTime":7.01,"hasTruncateMarker":true,"authors":[{"name":"Hugo van Rijswijk","title":"Stryker4s Team","url":"https://github.com/hugo-vrijswijk","imageURL":"https://avatars.githubusercontent.com/u/10114577"}],"frontMatter":{"slug":"stryker4s-40-minutes-to-40-seconds","title":"Stryker4s: from 40 minutes to 40 seconds","author":"Hugo van Rijswijk","author_title":"Stryker4s Team","author_url":"https://github.com/hugo-vrijswijk","author_image_url":"https://avatars.githubusercontent.com/u/10114577","tags":["stryker4s"]},"prevItem":{"title":"Announcing Stryker.NET 1.0","permalink":"/blog/2021-30-10-announcing-stryker-net-1.md"},"nextItem":{"title":"Announcing StrykerJS 5.0 - Brave new Dimension","permalink":"/blog/announcing-stryker-js-5-brave-new-dimension.md"}},"content":"Stryker4s is your friendly mutation testing framework for Scala. Compared to earlier versions, Stryker4s `0.12` achieves a 60x speed increase in some scenarios \ud83e\udd2f. Are you curious to know how? Keep on reading.\\n\\n\x3c!--truncate--\x3e\\n\\nIf you\'re new to mutation testing, it\'s a way to measure your tests\' effectiveness. A mutation testing framework will make small changes, called _mutants_, one by one in your source code. Then it will run your tests to see if one of them fails. If so, you just \\"killed\\" that mutant; if not, it \\"survived\\". If too many mutants survive, you probably want to improve your tests. The mutation testing report will give you insides into the test cases you may have missed. If this all sounds complicated, please take a look at the recent talk [\\"Who is testing your tests?\\"](https://www.youtube.com/watch?v=Vq9eqZzblfg) from _Scala Love in the City_ or check out the rest of the [website](/).\\n\\nIn this blog we\'ll talk about the performance improvements made in the last couple Stryker4s versions and dive into how they are made possible.\\n\\n## \ud83d\udcc3 In short\\n\\nImagine you\'re on your way to a sunny holiday destination. You\'ve checked in your luggage, gone through customs, and boarded the plane. Then, the plane moves forward a couple of meters, and you\'re thrown out and sent back to customs before going through the whole thing again. It\'ll take years before you get to sip on your umbrella cocktail \ud83c\udf79! This is exactly how Stryker4s has been running your code\u2026 until now.\\n\\nA lot has changed in recent versions of Stryker4s. Stryker4s now runs your tests in an entirely different way, bringing big performance improvements. As an example, running Stryker4s on the Stryker4s codebase used to take about 40 minutes on `0.9.1`. On`0.12.1`, this has been reduced to a fast 40 seconds. A short list of some new features:\\n\\n- \u2728 New testrunner boasting improved performance\\n- \ud83d\udd00 Concurrency to improve speed by using all available cores\\n- \ud83d\udd75\ufe0f\u200d\u2640\ufe0f Coverage analysis to skip mutants without coverage\\n- \u23f1\ufe0f Timeout detection in tests\\n- \ud83d\udc7d New mutator: regular expressions. Thanks to [Weapon regeX](https://github.com/stryker-mutator/weapon-regex/)!\\n\\nIn the rest of this blog post, we\'ll do a deep-dive into the increased performance. Let\'s start by taking a look at the older version of Stryker4s.\\n\\n## \ud83d\udc22 The old\\n\\nIn the older sbt plugin, there was a lot of overhead in running your tests. As a quick reminder, Stryker4s uses [mutation switching](https://stryker-mutator.io/blog/mutation-switching/), so it only has to compile your code once, instead of for each mutant. After mutating your source code, Stryker4s would essentially just call `sbt test` with the mutated code for every mutant. This means sbt would:\\n\\n1. Look for code changes (which there never are).\\n1. Make sure all compiled code is up-to-date (which it always is).\\n1. Start a new Java process with your class files, dependencies, and a small sbt entry point library.\\n1. Run your tests and report the results back to the main sbt process.\\n1. Repeat for the next mutant.\\n\\n```mermaid\\nsequenceDiagram\\n  participant Stryker4s\\n  participant sbt\\n  participant sbt test process\\n  Stryker4s->>sbt: Compile mutated code\\n  loop For each mutant\\n    Stryker4s->>sbt: executeTests\\n    sbt->>sbt: Check for changes?\\n    sbt->>+sbt test process: Start new process and run tests\\n    sbt test process->>-sbt: Report test results\\n    sbt->>Stryker4s: Tests successful Y/N\\n  end\\n```\\n\\nDoing those checks and starting a new process makes a lot of sense for a development workflow, but not for mutation testing. This implementation of the test runner hasn\'t changed much in the two years that the plugin has existed. Time for some improvements!\\n\\n## \ud83d\udc07 The new\\n\\nIt\'s clear the process can be optimized. Once Stryker4s is set up and all mutations have been compiled, the only thing we really want to do is run some tests and get a result. Sbt doesn\'t give plugins full control over the entire test process, but it does have all the information about _what_ your project looks like. This is something we can work with!\\n\\n### \ud83c\udfd7\ufe0f Meet: build info\\n\\nThe first thing Stryker4s needs to do is figure out what tests our project contains. One of the great things about sbt is its standardization and extensibility as a build tool. Because sbt knows exactly what your project looks like, plugins can retrieve all this information. To find out what tests you have, Stryker4s uses three pieces of information from sbt:\\n\\n1. `fullClasspath` location of all dependency JARs (including test-dependencies) and `.class` files of your compiled code.\\n2. `loadedTestFrameworks` the configured test framework. Sbt detects a couple of frameworks by default, but if you use MUnit you might remember having to add `testFrameworks += new TestFramework(\\"munit.Framework\\")` to your build.sbt before MUnit can run.\\n3. `testGrouping` contains every test suite sbt discovers in your project.\\n\\nYou can try running these yourself in a sbt console to see how Stryker4s looks at your project:\\n\\n```\\nsbt:stryker4s-core> show fullClasspath\\n[info] * Attributed(~/stryker4s/core/target/jvm-2.13/classes)\\n[info] * Attributed(~/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-\\nlibrary/2.13.4/scala-library-2.13.4.jar)\\n[info] * Attributed(~/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/pathikrit/\\nbetter-files_2.13/3.9.1/better-files_2.13-3.9.1.jar)\\n...\\nsbt:stryker4s-core> show loadedTestFrameworks\\n[info] Map(TestFramework(org.scalatest.tools.Framework, org.scalatest.tools.ScalaTestFramework) -> org\\n.scalatest.tools.Framework@2b9d52d5)\\n...\\nsbt:stryker4s-core> show testGrouping\\n[info] * (<default>,Vector(Test stryker4s.config.TestFilterTest : subclass(false, org.scalatest.Suite)\\n, Test stryker4s.extension.FileExtensionsTest : subclass(false, org.scalatest.Suite), Test stryker4s.m\\nutants.MutatorTest : subclass(false, org.scalatest.Suite), Test stryker4s.mutants.AddAllMutationsTest\\n: subclass(false, org.scalatest.Suite), ...\\n```\\n\\nWe now know what tests are in your project. Let\'s have a look at running those tests:\\n\\n### \ud83e\uddea Meet: test interfaces\\n\\nThis is something our friends in the NodeJS world are (rightfully) a little [jealous of](https://stryker-mutator.io/docs/stryker-js/plugins#test-runners) \ud83d\ude0f. When you call `sbt test`, sbt will look for any registered test frameworks that implement the [test-interface](https://github.com/sbt/test-interface) (from `loadedTestFrameworks`). This is a small collection of interfaces that let a test framework tell sbt how to run tests in that framework. Because all test frameworks in sbt implement this interface, we have a single programmatic way to call any test framework. It doesn\'t matter if you\'re using ScalaTest, MUnit, Weaver-test or anything else. Using a bit of reflection, we can create an instance of the test framework runner and run tests:\\n\\n```scala\\nval framework = classLoader.loadClass(testFrameworkClass).getConstructor().newInstance().asInstanceOf[Framework]\\nval runner = framework.runner(args, remoteArgs, classLoader)\\n\\nval testTasks: Array[Task] = runner.tasks(testGrouping.taskDefs)\\n\\ntestTasks.foreach(testTask => {\\n  testTask.execute()\\n})\\n```\\n\\nStryker4s can then use this to activate a mutant and instantly run the tests without any overhead from sbt.\\n\\n### \ud83d\udd00 Meet: concurrency\\n\\nStryker4s activates and runs each mutant one by one in isolation. This is to make sure one mutant won\'t have an impact on the result of another. This is done by creating a separate process for it. However, there\'s no rule that says we can\'t start multiple Java processes at the same time and run those in parallel.\\n\\nWith multiple separate worker-processes, each worker has its own separate memory, threads, and active mutant. This way, if one mutant results in an `OutOfMemoryError` it won\'t impact the others. In long-lived processes like mutation testing, the performance increases of parallelism far outweigh the overhead of starting and managing multiple workers.\\n\\n### \ud83e\uddf0 Putting it all together\\n\\nStryker4s can start a new process with all the information collected above. Because Stryker4s now fully controls how it runs your tests, it can eliminate any overhead of starting new processes or looking for source code changes. It looks a little something like this:\\n\\n1. Start new worker processes in parallel with the full test classpath and send them all the needed test setup.\\n1. Create a new instance of the test framework in the created process.\\n1. For each mutant, programmatically run the tests on the worker process.\\n\\n```mermaid\\nsequenceDiagram\\n  participant Stryker4s\\n  participant sbt\\n  participant testrunner worker\\n  Stryker4s->>+sbt: compile\\n  sbt--\x3e>-Stryker4s: .class files\\n  Stryker4s->>+sbt: retrieve info\\n  sbt--\x3e>-Stryker4s: project info\\n  Stryker4s->>+testrunner worker: start <n> new workers\\n  loop For each mutant\\n    Stryker4s->>testrunner worker: run tests\\n    testrunner worker--\x3e>Stryker4s: report test result\\n  end\\n  Stryker4s->>testrunner worker: close test worker\\n  testrunner worker--\x3e>-Stryker4s:\\n```\\n\\nAs you can see, there\'s not much overhead left in running your tests. The limiting factor is now how fast your tests are! When running Stryker4s on itself, this method improves performance 60x: from 40 minutes to 40 seconds.\\n\\n## \ud83d\udd2e What\'s next?\\n\\nIn this post, we\'ve shown you how Stryker4s uses sbt\'s test information to reduce overhead and provide massive performance increases. We\'re very excited for you to try out the increased performance! If you have any feedback or questions, find us on [GitHub](https://github.com/stryker-mutator/stryker4s) or [Slack](https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM).\\n\\nNext, we want to also bring these performance improvements to the Maven plugin, add per-test coverage support, improve the HTML report to show your tests and perhaps even support some [new languages](https://github.com/stryker-mutator/stryker4k)?"},{"id":"announcing-stryker-js-5-brave-new-dimension.md","metadata":{"permalink":"/blog/announcing-stryker-js-5-brave-new-dimension.md","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2021-05-15-announcing-stryker-5-brave-new-dimension.md","source":"@site/blog/2021-05-15-announcing-stryker-5-brave-new-dimension.md","title":"Announcing StrykerJS 5.0 - Brave new Dimension","description":"We\'re proud to announce the next major release of StrykerJS: 5.0. With a name change, a new dimension in your report, a new way to discover files, updated mutators, quality of life improvements, and minor bug fixes.","date":"2021-05-15T00:00:00.000Z","formattedDate":"May 15, 2021","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":7.54,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"announcing-stryker-js-5-brave-new-dimension.md","title":"Announcing StrykerJS 5.0 - Brave new Dimension","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Stryker4s: from 40 minutes to 40 seconds","permalink":"/blog/stryker4s-40-minutes-to-40-seconds"},"nextItem":{"title":"Announcing Stryker 4.0 - Mutation Switching","permalink":"/blog/announcing-stryker-4-mutation-switching"}},"content":"We\'re proud to announce the next major release of StrykerJS: 5.0. With a name change, a new dimension in your report, a new way to discover files, updated mutators, quality of life improvements, and minor bug fixes.\\n\\n\x3c!--truncate--\x3e\\n\\nIf you\'re new to mutation testing, it\'s a way to measure your tests\' effectiveness. A mutation testing framework will make small changes, called _mutants_, one by one in your source code. Then it will run your tests to see if one of them fails. If so, you just \\"killed\\" that mutant; if not, it \\"survived\\". If too many mutants survive, you probably want to improve your tests. The mutation testing report will give you insides into the test cases you may have missed. If this all sounds complicated, please take a look at [our RoboBar \ud83e\udd16\ud83c\udf77 example](https://stryker-mutator.io/example).\\n\\nIf you\'re new to StrykerJS, please follow our [Getting started guide](https://stryker-mutator.io/docs/stryker-js/getting-started/). Are you already using StrykerJS? Update to the latest version with your package manager of choice.\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/core@latest\\n# OR\\nyarn add --dev @stryker-mutator/core@latest\\n```\\n\\nDon\'t forget to do the same for any plugins you might be using. For example,\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/mocha-runner@latest\\n# OR\\nyarn add --dev @stryker-mutator/mocha-runner@latest\\n```\\n\\nWith that out of the way, let\'s dive into the new stuff!\\n\\n## \ud83d\udc6a Name change\\n\\nThat\'s right. We\'ve rebranded \'Stryker for JavaScript and friends\' as simply **StrykerJS**. This change makes it easier to distinguish StrykerJS from other frameworks in the Stryker family (Stryker.NET and Stryker4s). It also allows for better use of Twitter real estate \ud83d\ude0a.\\n\\nDon\'t worry; the names of the NPM packages haven\'t changed. So it is purely a branding thing.\\n\\n## \u2728 New dimension\\n\\nThe mutation test report has always been the bread and butter of Stryker. Either in your browser or console, it is where you find out where the killed and survived mutants are. But the next question you might ask is: which tests were responsible? Stryker knows but wasn\'t telling you. Until now!\\n\\nBehold, the new dimension you\'ll find in your reports\u2014the test view \ud83e\uddea.\\n\\n![html test view](/images/blogs/test-view-html-1.png)\\n![html test view2](/images/blogs/test-view-html-2.png)\\n\\nOr using the `clear-text` reporter:\\n\\n![text test view](/images/blogs/test-view-console.png)\\n\\nThe test view tells you at a glance which tests are _killing_ mutants, which are merely _covering_ mutants (without killing) and which are _not covering_ any mutants. Furthermore, you can determine which mutants were covered or killed by that particular test case. Finding out so much information about your tests has never been this easy!\\n\\nA couple of caveats to point out:\\n\\n- The `Covering` state will only be available when selecting the [`perTest` coverage analysis setting](https://stryker-mutator.io/docs/stryker-js/configuration#coverageanalysis-string).\\n- StrykerJS always runs your tests with `bail` mode active (or `failFast` in jasmine), making your test runner stop after the first failing test. As a result, a mutant can only be killed by one test. If you have overlap in asserts across tests, other tests might be marked as \\"Covering\\", while they would kill a mutant when run in isolation.\\n- Some mutants are executed as soon as your file _is loaded_ instead of during _test execution_. We call these mutants _static mutants_, and all your tests are executed as a result. For example:\\n  ```diff\\n  // hello.js\\n  -export const hello =\'\ud83d\udc4b\'\\n  +export const hello = \'\'\\n  ```\\n  A test that for `hello` might look like:\\n  ```js\\n  import { hello } from \'./hello.js\';\\n  describe(\'hello\', () => {\\n    it(\'should be a string\', () => expect(typeof hello).toBe(\'string\'));\\n  });\\n  ```\\n  As you can see, this is a relatively weak test that doesn\'t kill this mutant. You might assume that this test covers the mutant, but upon further inspection, you\'ll notice that `hello` is declared as soon as the file loads. There is no way for Stryker to know that this test is supposed to cover the mutant. As a result, the test is marked as \\"Not Covering\\".\\n- Currently, only the `@stryker-mutator/jest-runner` can group your tests in their original test files. Running with another test runner will result in your tests being displayed in a list instead.\\n\\n## \ud83e\udd37\u200d\u2642\ufe0f Discovering files\\n\\nStrykerJS typically doesn\'t mutate your files directly. Instead, it creates a copy inside a _sandbox_ directory, usually located at `.stryker-tmp/sandbox-123456`. However, it won\'t copy over all files there to save time. Stryker used to rely on git to decide which files to copy. Any `.gitignored` files would not be copied.\\n\\nThere were some issues with this approach. First of all, it required your project to be located in a git repository, and you needed to have git installed. And then, there are also examples of test suites that need some `.gitignore`d files to run, like `.env`.\\n\\nTo combat these issues, StrykerJS 5 will no longer use git for file discovery. Instead, it will include all files while ignoring some standard patterns, like \\"node_modules\\". You can remove more files by specifying patterns in the new [`ignorePatterns`](https://stryker-mutator.io/docs/stryker-js/configuration#ignorepatterns-string) configuration option. For example:\\n\\n```json\\n{\\n  \\"ignorePatterns\\": [\\"bower_components\\"]\\n}\\n```\\n\\nStrykerJS also allows you to specify `files`, which does the opposite of `ignorePatterns`, namely, you select the files you need to run your tests. Painstakenly whitelisting each file is more time-consuming and prone to error; that\'s why we\'ve decided to _deprecate_ `files` in favor of `ignorePatterns`.\\n\\nAre you currently using `files`? You can probably remove `files`, and Stryker will still work. Or, if you still prefer the whitelisting method, you can achieve this like so:\\n\\n```json\\n{\\n  \\"ignorePatterns\\": [\\"**\\", \\"!src/**/*.js\\"]\\n}\\n```\\n\\nSee the [original pull request](https://github.com/stryker-mutator/stryker-js/pull/2848) for more information.\\n\\n## \ud83d\udc7d Updated mutators\\n\\nWe\'ve decided to add a new variant to the [logical operator mutator](https://stryker-mutator.io/docs/mutation-testing-elements/supported-mutators#logical-operator). It now also mutates _the nullish coalescing operator_ (`??`).\\n\\n```diff\\n-foo ?? bar\\n+foo && bar\\n```\\n\\nTo kill this mutant, you will need to write a test for both branches of the operator. Like you already needed to do for the logical OR (`||`) and logical AND (`&&`) operators.\\n\\nWe\'re also in the process of adding a new [optional chaining mutator](https://github.com/stryker-mutator/stryker-js/pull/2886), but that didn\'t make it in time for this release.\\n\\nA quick plug: as of version 4.4, StrykerJS will also mutate your `/regex/`s. For example:\\n\\n```diff\\n- /\\\\d{4}\\\\s?[a-Z]{2}/\\n+ /\\\\d\\\\s?[a-Z]{2}/\\n+ /\\\\D{4}\\\\s?[a-Z]{2}/\\n+ /\\\\d{4}\\\\S?[a-Z]{2}/\\n+ /\\\\d{4}\\\\s?[a-Z]/\\n+ /\\\\d{4}\\\\s?[^a-Z]{2}/\\n```\\n\\nThanks again to the students who created [weapon-regex](https://github.com/stryker-mutator/weapon-regex/) to make this happen \ud83c\udf89\\n\\n## \ud83d\udd75\ufe0f\u200d\u2642\ufe0f Default coverage analysis\\n\\nCoverage analysis is a feature that makes StrykerJS run faster because it will run fewer tests per mutant. In its strongest setting, `\\"coverageAnalysis\\": \\"perTest\\"`, it will only run the exact tests that are covering a mutant. Whether or not you are able to use this feature depends on your test suite and test runner, see [coverage analysis in configuration](https://stryker-mutator.io/docs/stryker-js/configuration#coverageanalysis-string) for more details.\\n\\nSince v4.3, `@stryker-mutator/jest-runner` also supports this setting. Now that all officially supported test runners support coverage analysis, it was time to make `perTest` the default setting. So we did. You can still disable it with `\\"coverageAnalysis\\": \\"off\\"`\\n\\n## \ud83e\uddf9 Other changes\\n\\nWe once again chose to improve the maintainability of the Stryker code base.\\n\\n**Unified reporter api**\\n\\nThe Reporter plugin API has gotten an overhaul. It is now more in line with [mutation-testing-elements](https://github.com/stryker-mutator/mutation-testing-elements/)\\n\\nSee the [original PR](https://github.com/stryker-mutator/stryker-js/pull/2798) for more information.\\n\\n**Serialization**\\n\\nStryker uses worker processes to run tests and check mutants for type errors. These workers receive any options via a message. Stryker used the [surrial](https://www.npmjs.com/package/surrial) package to serialize complex objects like [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), functions, and even classes. This hidden feature was rarely used and not a good practice in hindsight. StrykerJS 5 replaces this with plain old [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) and [`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse). Don\'t worry, you get a warning if you configure something that isn\'t serializable.\\n\\nSee the [original PR](https://github.com/stryker-mutator/stryker-js/pull/2877) for more information.\\n\\n## \ud83d\udca5 Breaking changes\\n\\n- **range:** The `range` property is no longer present on a `mutant`. Note, this is a breaking change for plugin creators only.\\n- **options:** `\\"perTest\\"` is now the default value for \\"coverageAnalysis\\" when the configured test runner is not \\"command\\". Explicitly set `\\"coverageAnalysis\\": \\"off\\"` manually to opt-out of this behavior.\\n- **node:** Node 10 is no longer supported. Please use Node 12 or higher.\\n- **serialize:** Having a non-JSON-serializable value in your configuration won\'t be sent to the child process anymore. If you really need them in your test runner configuration, you should isolate those values and put them in test runner-specific config files, loaded by the test runner plugin itself, for example, jest.config.js, karma.conf.js, webpack.config.js.\\n- **ignore patterns:** Stryker will no longer use a git command to determine which files belong to your project. Instead, it will rely on sane defaults. You can change this behavior by defining [`ignorePatterns`](https://stryker-mutator.io/docs/stryker-js/configuration/#ignorepatterns-string).\\n- **ignore patterns:** The `files` configuration option is deprecated and will be removed in a future release. Please use [`ignorePatterns`](https://stryker-mutator.io/docs/stryker-js/configuration/#ignorepatterns-string) instead.\\n\\n  This:\\n\\n  ```json\\n  {\\n    \\"files\\": [\\"foo.js\\"]\\n  }\\n  ```\\n\\n  Is equivalent to:\\n\\n  ```json\\n  {\\n    \\"ignorePatterns\\": [\\"**\\", \\"!foo.js\\"]\\n  }\\n  ```\\n\\n- **reporter api:** Changes to `Reporter` and `TestRunner` plugin API of Stryker\\n- **jest-runner:** Support for project type `create-react-app-ts` is dropped from the jest-runner.\\n\\n## \ud83c\udf89 Thank you\\n\\nThanks to everyone for your continued support! Have questions or issues? Don\'t hesitate to contact us in [Slack](https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM), on [Twitter](https://twitter.com/stryker_mutator/) or open [an issue](https://github.com/stryker-mutator/stryker-js/issues/new/choose)."},{"id":"announcing-stryker-4-mutation-switching","metadata":{"permalink":"/blog/announcing-stryker-4-mutation-switching","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2020-10-07-announcing-stryker-4-mutation-switching.md","source":"@site/blog/2020-10-07-announcing-stryker-4-mutation-switching.md","title":"Announcing Stryker 4.0 - Mutation Switching","description":"We\'re proud to announce the next major release of the Stryker mutation testing framework for JavaScript and friends: Stryker 4.0.","date":"2020-10-07T00:00:00.000Z","formattedDate":"October 7, 2020","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":10.575,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"announcing-stryker-4-mutation-switching","title":"Announcing Stryker 4.0 - Mutation Switching","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Announcing StrykerJS 5.0 - Brave new Dimension","permalink":"/blog/announcing-stryker-js-5-brave-new-dimension.md"},"nextItem":{"title":"Announcing Stryker 4.0 Beta","permalink":"/blog/announcing-stryker-4-beta-mutation-switching"}},"content":"We\'re proud to announce the next major release of the Stryker mutation testing framework for JavaScript and friends: Stryker 4.0.\\n\\nThis release marks a fundamental shift in the way Stryker works internally. It now uses \\"mutation switching\\", which improves performance and usability, similar to how Stryker.NET and Stryker4s already work. This change, unfortunately, couldn\'t be done without breaking changes. See the breaking changes paragraph if you\'re interested.\\n\\n\x3c!--truncate--\x3e\\n\\n**\ud83c\udfa7 Listen to the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://thedeepdive.simplecast.com/episodes/mutation-testing-with-stryker\\">\\"Mutation testing with Stryker\\" podcast episode on InDepth.dev</a>**\\n\\nIf you\'re new to mutation testing, it\'s a way to measure your tests\' effectiveness. Please look at [our RoboBar \ud83e\udd16\ud83c\udf77 example](https://stryker-mutator.io/example) and see how even 100% code coverage doesn\'t tell the whole story. Mutation testing is the only way to make sure you\'re not missing any tests.\\n\\n**_Note: updated on 9 October 2020: add remark about TypeScript 3.7 requirement in [Breaking changes](#breaking-changes)._**\\n\\n## \ud83d\ude80 Getting started\\n\\nIf you\'re new to Stryker, please follow the [quickstart guide](/stryker/quickstart).\\n\\nIf you\'re already using Stryker, you can install this latest version with your package manager of choice.\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/core\\n```\\n\\nDon\'t forget to do the same for your Stryker plugins. Please note that the following plugins have been removed and are no longer needed:\\n\\n- ~~@stryker-mutator/typescript~~\\n- ~~@stryker-mutator/jasmine-framework~~\\n- ~~@stryker-mutator/mocha-framework~~\\n- ~~@stryker-mutator/babel-transpiler~~\\n- ~~@stryker-mutator/webpack-transpiler~~\\n- ~~@stryker-mutator/javascript-mutator~~\\n\\nYou can remove these from your package.json.\\n\\n## \ud83d\udc7d Mutation switching\\n\\nMutation switching is a way to put all mutants into your code simultaneously.\\n\\nLet\'s take a look at an example.\\n\\n```js\\nfunction add(a, b) {\\n  return a + b;\\n}\\n```\\n\\nWhen you feed this code to Stryker, it will generate two mutants:\\n\\n`\ud83d\udc7d function add(a, b) { return a - b }`  \\n`\ud83d\udc7e function add(a, b) {}`\\n\\nPrevious versions of Stryker would make two copies of your source code. One for each mutant. Stryker 4.0 will now place _all mutants into the code simultaneously_, but with only _one mutant active at any one time_.\\n\\n```js\\nfunction add(a, b) {\\n  if (global.activeMutant === 0) {\\n    // \ud83d\udc7e\\n  } else {\\n    return global.activeMutant === 1\\n      ? a - b // \ud83d\udc7d\\n      : a + b;\\n  }\\n}\\n```\\n\\n(simplified example)\\n\\nStryker now runs your tests while changing (or _switching_) the active mutant between runs. Mutation switching can improve performance dramatically, depending on the type of project.\\n\\nYou\'re probably wondering: how much performance improvement? Like all great questions, the answer is: \'it depends\'. For example, when you bundle your code with webpack before running the tests, then webpack only needs to run once, a significant performance gain. On the other hand, if you\'re running Stryker on an ES5 project with mocha, the improvement might not be that substantial. In our experience, you can expect somewhere between 20% to 70% speed increase.\\n\\n## \ud83d\udc20 Code instrumentation\\n\\nMutation Switching yields a significant performance improvement, but it means that Stryker is required to perform some complex transformations to the [Abstract Syntax Tree (AST)](https://en.wikipedia.org/wiki/Abstract_syntax_tree).\\n\\nDoing this _instrumentation_ means visiting each node of the AST to collect and place mutants. This instrumentation is implemented with the [Babel](https://babeljs.io/) parser and now ships with `@stryker-mutator/core`. We\'re taking advantage of Babel\'s support for all types of JavaScript, including TypeScript code.\\n\\n_Note that to implement mutation switching in both TypeScript and JavaScript before the release of Babel v7 would have meant implementing it twice. We think it is incredible that the Babel maintainers chose to add TypeScript support. We\'re standing on the shoulders of giants here \ud83c\udf89. Without this, we probably wouldn\'t have done it._\\n\\nThis instrumentation means you _no longer need to configure the mutator_ in your Stryker configuration. Stryker will always use the new mutation instrumenter. It supports TypeScript, JavaScript, Flow, and JSX. It even mutates script tags in `.html` or `.vue` files. It also picks up your babel configuration out-of-the-box, so no custom configuration is needed\u2014cupcakes for everyone \ud83e\uddc1.\\n\\n## \ud83d\udc77\u200d\u200d Build command support\\n\\n_Note: not all projects need building. Simple projects might deploy JS code as is, or the test runner might take care of this step for you. For example, running your tests with ts-node or babel/register or running it with Jest or Karma with the webpack plugin._\\n\\nPrevious versions of Stryker allowed you to configure a transpiler. For example, configuring `\\"transpilers\\": [\\"babel\\"]` would allow all files to be transpiled with the `@stryker-mutator/babel-transpiler` plugin. This way of working had its disadvantages:\\n\\n- \u26d4 Since every mutant needed to transpiled one by one, it was slow.\\n- \u26d4 Every transpiler/bundler required a plugin. We only officially supported Webpack, Babel, and TypeScript. If you were using a different tool, you were out of luck.\\n- \u26d4 It was hard to maintain the transpiler plugins since it hooked into the transpiler/bundler\'s API.\\n\\nStryker 4.0 gets rid of the transpiler plugins. Instead, it allows you to configure a `buildCommand`. Stryker will run this command once in the sandbox directory after instrumenting your code and just before starting the dry run. For example, running Stryker with `--buildCommand \\"npm run build\\"` will run `npm run build` inside the sandbox directory.\\n\\nThis new way of working gets rid of all the disadvantages listed above. It will only run once, you can use whichever tool you want, and we don\'t have to maintain plugins\u2014a win-win-win scenario. The old transpiler plugins are no longer needed, and you can remove them from your project.\\n\\n## \u2705 Checker plugin\\n\\nYou might know that the old `@stryker-mutator/typescript` transpiler not only transpiled your code but also filtered out mutants that resulted in type errors, marking them with \\"compile error\\" in your report. Mutants with this status are considered invalid and do not influence your mutation score.\\n\\nStryker 4.0 removes the transpiler plugin in favor of `--buildCommand`.\\n\\n_Wondering how your TypeScript code compiles even while some mutants might create type errors? Stryker places `// @ts-nocheck` atop your code files. Your TypeScript compiler will ignore any type errors produced by instrumenting your code._\\n\\nHowever, you might still want to invalidate mutants that result in a type error, so you won\'t spend any time looking at them. The new \\"Checker\\" plugin helps you here. Checker plugins can choose to invalidate mutants based on rules specific to the checker.\\n\\nWe maintain one such checker, the `@stryker-mutator/typescript-checker`. It will mark mutants that would result in a type error with \\"Compile error\\".\\n\\nInstall it with `npm install -D @stryker-mutator/typescript-checker`.\\n\\nConfigure it with:\\n\\n```json\\n{\\n  \\"checkers\\": [\\"typescript\\"],\\n  \\"tsconfigFile\\": \\"tsconfig.json\\"\\n}\\n```\\n\\nPlease see [the TypeScript checker\'s readme](https://github.com/stryker-mutator/stryker-js/tree/master/packages/typescript-checker#readme) for more details.\\n\\n## \u2614 Coverage analysis\\n\\nCoverage analysis is a great way to speed up mutation testing. It is a means to reduce the number of tests Stryker needs to run to test a mutant. Stryker has three flavors:\\n\\n- **\\"off\\"**: No coverage analysis\\n- **\\"all\\"**: Mutant coverage for the entire test suite is measured. Mutants without coverage are marked with \\"no coverage\\". But all tests run for mutants that are covered.\\n- **\\"perTest\\"**: Mutant coverage is measured per test. Stryker runs only the tests that cover a specific mutant when it tests that mutant.\\n\\nRunning with \\"perTest\\" coverage analysis allows for significant performance improvement, usually between 40% and 60%. However, most projects were unable to take advantage of it because Stryker relied on [istanbul code coverage](https://istanbul.js.org/) combined with test runner hooks. It only worked in scenarios without transpiling or bundling.\\n\\nThis changes with version 4. When Stryker instruments your code with mutants, it also injects the coverage instrumentation. No need for instanbul anymore, allowing Stryker to measure mutant coverage, _regardless of which bundler/transpiler you are using_. Hooking into the test runner is the only remaining requirement. All test runner plugins support these hooks, except for the `@stryker-mutator/jest-runner` (although we\'re [planning to support it](https://github.com/stryker-mutator/stryker-js/issues/2316)).\\n\\n## \ud83e\uddf9 Other changes\\n\\nWe also decided to take this opportunity to improve the maintainability of the Stryker code further. That\'s why we\'ve decided to drop support for two more plugin types.\\n\\n**The `TestFramework` plugins are removed.**\\n\\nA test framework plugin used to be responsible for allowing Stryker to hook into the test framework to support \\"perTest\\" coverage analysis. In practice, this was often tightly coupled to the test runner itself. For example, the mocha test runner uses -you guessed it- the mocha test framework. It made configuring Stryker needlessly complicated. That\'s why we\'ve decided to drop this plugin type and make the Test Runner plugin responsible for hooking into the test framework directly. As a result, the following dependencies are no longer needed: `@stryker-mutator/mocha-framework` and `@stryker-mutator/jasmine-framework`.\\n\\n**The `OptionsEditor` plugins are removed.**\\n\\nOptions editors provided a way for plugins to edit the Stryker options directly. In practice, this was used to load plugin-specific options and attach them to the StrykerOptions object for later use. Plugins should now load their needed options in their life cycle, for example, in the `init` method of the plugin.\\n\\n## \ud83d\udca5 Breaking changes\\n\\nHere is a list of the most important breaking changes. For a full list, please see our [changelog](https://github.com/stryker-mutator/stryker-js/blob/master/CHANGELOG.md).\\n\\n- Configuring \\"transpilers\\" is no longer supported; please use `--buildCommand` instead.\\n- Configuring `mutator` as a string, or configuring `mutator.name` is no longer supported, Stryker will always use its code instrumenter.\\n- TypeScript 3.7 or higher is required if you\'re using TypeScript to transpile your code, either via a `--buildCommand` or via a test runner plugin, like [ts-jest](https://www.npmjs.com/package/ts-jest), [karma-webpack](https://www.npmjs.com/package/karma-webpack) or using the [angular-cli](https://www.npmjs.com/package/@angular/cli). If you\'re dependent on TS <3.7, please consider upgrading, or keep using Stryker V3. This is because the mutation instrumenter heavily leans on the support of `// @ts-nocheck` feature, added in TS3.7. If you\'re using another transpiler, like [babel](https://babeljs.io) or [ts-node with `transpileOnly`](https://github.com/TypeStrong/ts-node), then Stryker will work fine.\\n- Because of the requirement for TS 3.7, Angular >=9.0 is required for Angular projects.\\n- The `\\"command\\"` test runner is now \\"best-effort\\". Stryker will use an environment variable to communicate which mutant should be active. Your test command should pass the environment variables to the test environment. We expect this to work for most test runners and test commands out there. One exception is Karma, but since we have the `@stryker-mutator/karma-runner` for this use case, it shouldn\'t be a problem.\\n- Support for the Web Component Tester is dropped. Please see [#2386](https://github.com/stryker-mutator/stryker-js/issues/2386) for reasoning.\\n- Exporting a `function` from your \\"stryker.conf.js\\" file is deprecated. Please export your config as an object instead, or use a stryker.conf.json file. Please see [#2429](https://github.com/stryker-mutator/stryker-js/issues/2429) for more details.\\n- The `--maxConcurrentTestRunner` option is now deprecated, please use `--concurrency` instead. Stryker will use this setting to determine how to scale checkers or test runner processes. Note that Stryker will no longer prevent you from configuring more than the number of logical cores in your machine, i.e., `--concurrency 9999` might be a bad idea.\\n\\n## \ud83d\udd2e What\'s next?\\n\\nMutation switching was a considerable undertaking, but we had to do it since it allows for further performance and usability improvements. Let\'s discuss some here.\\n\\nAll these issues align with our project goals, which we\'ve published in [our roadmap](https://github.com/stryker-mutator/stryker-js/wiki/Roadmap).\\n\\n**Better Jest support**\\n\\nWith mutation switching in our backpack, implementing \\"perTest\\" coverage analysis for Jest is now on the table, allowing Stryker to run fewer tests in total. See [#2316](https://github.com/stryker-mutator/stryker-js/issues/2316) for more info.\\n\\n**Hot reload**\\n\\nCurrently, Stryker will reload all code files between test runs (clearing them from the [require.cache](https://nodejs.org/api/modules.html#modules_require_cache) or doing a full page reload with Karma). However, thanks to mutation switching, the mutated code does not have to be reloaded. Instead, we can switch the active mutant and do another test run. Mocha will be the first test runner to receive this improvement. See [#2413](https://github.com/stryker-mutator/stryker-js/issues/2413) for more info.\\n\\n**In place mutation**\\n\\nStryker currently never mutates _your code_ directly. Instead, it makes a copy of it in a \\"sandbox\\" directory, and it mutates your code there. The reason for this should be apparent; you don\'t want mutants to make there way into production.\\n\\nHowever, in some corner cases, the simple act of copying your code to a sandbox directory makes running the tests impossible. See [#2163](https://github.com/stryker-mutator/stryker-js/issues/2163) for some examples. To truly make Stryker work for all JavaScript projects, we will need to allow for \\"in place\\" mutation. Don\'t worry, this will be optional, and we will make sure to let you know what Stryker is doing \ud83e\uddd0.\\n\\n## \ud83c\udf89 Thank you\\n\\nBack in July, we released the first beta of Stryker 4. Since then, we got loads of responses resulting in the closing of [more than 40 issues](https://github.com/stryker-mutator/stryker-js/issues?q=is%3Aissue+milestone%3A4.0+is%3Aclosed), some of which were pretty major \ud83d\ude05. We want to thank everyone who helped to make this release possible! In particular (in no specific order)\\n\\n\ud83c\udf39 [gramster](https://github.com/gramster)  \\n\ud83d\udc90[kmdrGroch](https://github.com/kmdrGroch)  \\n\ud83c\udf3c[Lakitna](https://github.com/Lakitna)  \\n\ud83c\udf3b[brodybits](https://github.com/brodybits)  \\n\ud83c\udf3a[Garethp](https://github.com/Garethp)\\n\\nYou guys are incredible!\\n\\nIf you read through this article: thank you! You\'re awesome! Now stop reading and give Stryker 4 a try. And let us know what you think \ud83d\ude00."},{"id":"announcing-stryker-4-beta-mutation-switching","metadata":{"permalink":"/blog/announcing-stryker-4-beta-mutation-switching","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2020-07-13-announcing-stryker-4-beta-mutation-switching.md","source":"@site/blog/2020-07-13-announcing-stryker-4-beta-mutation-switching.md","title":"Announcing Stryker 4.0 Beta","description":"We\'re excited to announce the beta of the next major release of the Stryker mutation testing framework for JavaScript and friends: Stryker 4.0.","date":"2020-07-13T00:00:00.000Z","formattedDate":"July 13, 2020","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":6.36,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"announcing-stryker-4-beta-mutation-switching","title":"Announcing Stryker 4.0 Beta","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Announcing Stryker 4.0 - Mutation Switching","permalink":"/blog/announcing-stryker-4-mutation-switching"},"nextItem":{"title":"Integrating Stryker.NET in your azure pipelines","permalink":"/blog/azure-pipelines-integration"}},"content":"We\'re excited to announce the beta of the next major release of the Stryker mutation testing framework for JavaScript and friends: Stryker 4.0.\\n\\nThis beta is a huge milestone because it means a fundamental shift in the way Stryker works internally. It now uses \\"Mutation switching\\", a technique that can improve performance.\\n\\n\x3c!--truncate--\x3e\\n\\nThis, unfortunately, couldn\'t be done without breaking changes. These changes are mostly limited to the internal plugin API\'s except for the changes highlighted in this blog article.\\n\\nTo get started using the beta, update your Stryker dependencies using npm or yarn.\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/core@next\\n```\\n\\nDon\'t forget to update Stryker plugins. For example, when using mocha:\\n\\n```shell\\nnpm install --save-dev @stryker-mutator/mocha-runner@next\\n```\\n\\nThis beta is released early, in order to get community feedback. We\'ve not yet updated the docs with the changes specified in this blog article. At this moment, the jest-runner and the command test runner _still need to be migrated and will not work as expected_.\\n\\n_Note: Since beta version `4.0.0-beta.2`, both the command test runner and the jest test runner are supported. However, the command test runner does have some [limitations](https://github.com/stryker-mutator/stryker-js/pull/2345)_\\n\\nIf you\'re new to mutation testing, it\'s a way to measure your tests\' effectiveness. Please take a look at [our RoboBar \ud83e\udd16\ud83c\udf77 example](/example) and see how even 100% code coverage doesn\'t tell the whole story. Mutation testing is the only way to make sure your code is thoroughly tested.\\n\\n## \ud83d\udc7d Mutation switching\\n\\nMutation switching is a way to simultaneously put all mutants into your code while making sure only one mutant is active at the same time. Let\'s take a look at an example.\\n\\nLet\'s take this.\\n\\n```js\\nfunction add(a, b) {\\n  return a + b;\\n}\\n```\\n\\nWhen you feed this code to Stryker, it will generate two mutants:\\n\\n\ud83d\udc7d `function add(a, b) { return a - b }`  \\n\ud83d\udc7e `function add(a, b) {}`\\n\\nPrevious versions of Stryker would make two copies of the source code. One for each mutant. This changes with Stryker 4.0. Both mutants will be placed into the code _at the same time_.\\n\\n```js\\nfunction add(a, b) {\\n  if (global.activeMutant === 0) {\\n  } else {\\n    return global.activeMutant === 1 ? a - b : a + b;\\n  }\\n}\\n```\\n\\n(simplified example)\\n\\nStryker can now run your tests twice while changing which mutant is active in the process. Mutation switching can improve performance dramatically, depending on the type of project. For example, when you bundle your code with webpack before running the tests, then webpack only needs to run once. The same goes for TypeScript projects where you compile your code before testing.\\n\\n## \ud83d\udc20 Instrumentation with Babel\\n\\nMutation Switching is a significant performance improvement, but it means that Stryker is required to perform some complex transformations of the [Abstract Syntax Tree (AST)](https://en.wikipedia.org/wiki/Abstract_syntax_tree).\\n\\nDoing this _instrumentation_ means visiting each node of the AST to collect and place mutants. This instrumentation is implemented with the [Babel](https://babeljs.io/) parser and now ships with `@stryker-mutator/core`. We\'re taking advantage of Babel 7\'s support to parse and print any type of JavaScript, including TypeScript code.\\n\\nThis means that it is _no longer needed to configure the `mutator`_ in your Stryker configuration. Stryker will always use the new mutation instrumenter. It supports TypeScript, JavaScript, Flow, and JSX. It even supports mutating script tags in `.html` or `.vue` files. It also picks up your babel configuration out-of-the-box, so no custom configuration is needed.\\n\\n## \ud83d\udc77\u200d\u200d Build command support\\n\\nWith mutation switching, all mutants are placed in the code at the same time. This also means that it only has to be built (transpiled or bundled) once.\\n\\n_Note: not all projects need building. Simple projects might deploy JS code as is, or the test runner might take care of this step for you. For example, running your tests with `ts-node` or `babel/register` or running it with `Jest` or `Karma` with the [webpack plugin](https://github.com/webpack-contrib/karma-webpack)._\\n\\nBefore mutation switching, this would be the job of the `transpiler` plugin type. For example, `transpiler: [\'babel\']` would mean that all files would be transpiled with the `@stryker-mutator/babel-transpiler` plugin. It was a bit complex to create a transpiler plugin, and since every mutant needed to transpiled, it was slow. Every transpiler/bundler needed its a transpiler plugin.\\n\\nStryker 4.0 will no longer support the `transpiler` plugins. Instead, it allows you to configure a `buildCommand` yourself. A build command can be any command. Some examples include `npm run build`, `tsc -b` or `webpack --config webpack.config`. This means that the available plugins do not limit you.\\n\\nThe following dependencies are therefore no longer needed, and you can simply remove them:\\n\\n- `@stryker-mutator/babel-transpiler`\\n- `@stryker-mutator/webpack-transpiler`\\n- `@stryker-mutator/typescript`\\n\\n## \u2705 Checker plugin\\n\\nYou might know that the old `@stryker-mutator/typescript` transpiler not only transpiled your code but also filtered out mutants that resulted in type errors, marking them with `compile error` (or `transpile error`) in your report. Mutants with this status are marked as \\"invalid\\" and do not influence your mutation score.\\n\\nSince Stryker 4.0 [removes the transpiler plugin type](#build-command-support) we needed a new plugin that can perform this type checking. Introducing the `Checker` plugin type. In the Stryker 4 release, we will include one such checkers, the `@stryker-mutator/typescript-checker`.\\n\\nInstall it with `npm install @stryker-mutator/typescript-checker@next`\\n\\nConfigure it with:\\n\\n```ts\\n{\\n  \\"checkers\\": [\\"typescript\\"],\\n  \\"tsconfigFile\\": \\"tsconfig.json\\"\\n}\\n```\\n\\n(tsconfig.json is the default setting for \\"tsconfigFile\\").\\n\\nPlease see [the TypeScript checker\'s readme for more details](https://github.com/stryker-mutator/stryker-js/tree/epic/mutation-switching/packages/typescript-checker#readme)\\n\\n## \u2614 More coverage analysis\\n\\nCoverage analysis is a way to speed up mutation testing. Stryker always came with three flavors:\\n\\n- \\"off\\": No coverage analysis\\n- \\"all\\": Coverage is measured for the entire test suite. Mutants that are not covered by even one test are marked with \\"NoCoverage\\"\\n- \\"perTest\\": Coverage is measured per test. Only tests that cover a specific mutant are run for that mutant.\\n\\nRunning with \\"perTest\\" coverage yields a significant performance improvement (usually between 40% and 60%). However, most projects were unable to take advantage of it because Stryker relied on a complex mechanism of [istanbul](https://istanbul.js.org/) code coverage combined with hooks in the test runner. It only worked in scenarios without complicated transpiling or bundling.\\n\\nWith the introduction of mutation switching, the instrumenter is responsible for inserting coverage instrumentation into the code. This means that Stryker can measure mutant coverage, _regardless of which bundler/transpiler you are using_. The only requirement is that Stryker needs to be able to hook into the test runner. This is currently supported for `@stryker-mutator/mocha-runner`, `@stryker-mutator/karma-runner` and `@stryker-mutator/jasmine-runner`. Support for [`@stryker-mutator/jest-runner` is planned](https://github.com/stryker-mutator/stryker-js/issues/2316).\\n\\n## \ud83e\uddf9 Other changes\\n\\nWe also decided to take this opportunity to improve the maintainability of the Stryker code further. That\'s why we\'ve decided to drop support for two more plugin types.\\n\\n- The `TestFramework` plugin type is removed  \\n  A test framework plugin used to be responsible for allowing Stryker to hook into the test framework to implement test filtering and perTest coverage analysis. In practice, this was often tightly coupled to the test runner itself. That\'s why we\'ve decided to drop this plugin type and make the Test Runner plugin responsible for hooking into the test framework directly. Therefore the following dependencies can simply be removed: `@stryker-mutator/mocha-framework` and `@stryker-mutator/jasmine-framework`.\\n- The `OptionsEditor` plugin type is removed  \\n  Options editors provided a way for plugins to edit the Stryker options directly. In practice, this was used to load plugin-specific options and attach them to the StrykerOptions object for later use. Plugins are now expected to load their options in their life cycle.\\n\\n## \ud83d\udd2e What\'s next\\n\\nWe\'ll be focussing on getting Stryker 4.0 released. For that to happen, we would appreciate your feedback. Feel free to report any [issues](https://github.com/stryker-mutator/stryker-js/issues/new) you have with this beta release."},{"id":"azure-pipelines-integration","metadata":{"permalink":"/blog/azure-pipelines-integration","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2020-05-15-azure-pipelines-integration.md","source":"@site/blog/2020-05-15-azure-pipelines-integration.md","title":"Integrating Stryker.NET in your azure pipelines","description":"Over the past few months we have been working hard to integrate Stryker.NET with azure pipelines. Learn how you can leverage our new features to include mutation testing in your continuous integration.","date":"2020-05-15T00:00:00.000Z","formattedDate":"May 15, 2020","tags":[{"label":"stryker.net","permalink":"/blog/tags/stryker-net"}],"readingTime":4.62,"hasTruncateMarker":true,"authors":[{"name":"Richard Werkman","title":"Stryker.NET Team","url":"https://github.com/richardwerkman","imageURL":"https://avatars1.githubusercontent.com/u/14224500?s=460&u=189f6ef9ab6957063d0674f94c014bef39bf4653&v=4"}],"frontMatter":{"slug":"azure-pipelines-integration","title":"Integrating Stryker.NET in your azure pipelines","author":"Richard Werkman","author_title":"Stryker.NET Team","author_url":"https://github.com/richardwerkman","author_image_url":"https://avatars1.githubusercontent.com/u/14224500?s=460&u=189f6ef9ab6957063d0674f94c014bef39bf4653&v=4","tags":["stryker.net"]},"prevItem":{"title":"Announcing Stryker 4.0 Beta","permalink":"/blog/announcing-stryker-4-beta-mutation-switching"},"nextItem":{"title":"Announcing Stryker 100% mode","permalink":"/blog/announcing-100-mode"}},"content":"Over the past few months we have been working hard to integrate Stryker.NET with azure pipelines. Learn how you can leverage our new features to include mutation testing in your continuous integration.\\n\\n\x3c!--truncate--\x3e\\n\\nWhen using continuous integration it can be hard to keep track of quality. By integrating Stryker in your build pipelines you can ensure a continued focus on test quality, no matter how many changes your code gets to see.\\n\\n## \ud83d\ude80 Speed\\n\\nStryker.NET is now faster than ever! This means you can run mutation testing for every pull request without waiting too long for your build to succeed.\\n\\nSome performance improvements we have implemented:\\n\\n- Mutation switching\\n  - We compile all mutants at once using conditional statements around the mutations. When testing the mutants we only have to flip the switch to turn it on \ud83d\udd1b\\n- Integration with VSTest\\n  - This is the fastest way to run your tests. And VSTest supports all well known test frameworks.\\n- Coverage analysis\\n  - We do not test mutants that are not covered by any test. And we only run the tests that cover the mutant when testing that mutant.\\n- Testing mutants in parallel\\n  - We run multiple test sessions at once to test the mutants even faster.\\n- Using the same test session for non overlapping mutants\\n  - Mutants that are in a different file and have no overlapping covered tests are run in the same test session to remove the overhead of starting a new test session.\\n\\nBy implementing all these performance tweaks we can now proudly say we are fast enough to use in your pipeline! So if performance was holding you back, now is the moment to give Stryker.NET a try! \ud83d\ude80\\n\\n## \ud83d\udd0e Git integration\\n\\nOn large projects we can also use git to filter changed files in a pull request. That way only the changed code will be mutated. This helps to use mutation testing in pull request even on the largest projects.\\n\\nHow does this work? Simply run Stryker.NET with the following command in your PR build:\\n\\n```\\ndotnet stryker --since\\n```\\n\\nThis will use the master branch as base by default. If you use a different branch as base for your pull requests you can change the base branch like this:\\n\\n```\\ndotnet stryker --since:\\"coalesce(variables[\'System.PullRequest.TargetBranch\'], variables[\'Build.SourceBranchName\'])\\"\\n```\\n\\nThis will get the pull request target branch, or the build source branch if no pull request target branch is available.\\n\\n\ud83d\udca1 Tip:\\nYou can use this feature locally too, if you want to quickly mutate your new feature.\\n\\n## \u2728 Reporting\\n\\nAnother feature we are proud of is our integration with azure devops.\\n\\nYou can now display the html report in your azure devops environment using an [azure devops extension](https://marketplace.visualstudio.com/items?itemName=stryker-mutator.mutation-report-publisher).\\n\\n![](/images/blogs/azure-devops-extension1.png)\\n\\n![](/images/blogs/azure-devops-extension3.png)\\n\\nThe extension will add a new tab to your build result page. This new tab will contain the full html report that is also available locally and on the stryker dashboard.\\n\\nHow to use the extension:\\n\\n- Install the [extension](https://marketplace.visualstudio.com/items?itemName=stryker-mutator.mutation-report-publisher) on your azure devops environment\\n- Run `dotnet stryker` in your pipeline.\\n- Make sure the `html reporter` is enabled (default).\\n- Add the `publish mutation report` task to your pipeline (after `dotnet stryker`)\\n- Pass the path to the html report\\n\\nExample:\\n![](/images/blogs/azure-devops-extension2.png)\\n\\n\ud83d\udca1 Note: The extension does work for other mutation test frameworks as well. As long as the framework outputs a html report and you provide the location to the task, it will be displayed in your build result tab.\\n\\n## \u26d4 Forcing test quality\\n\\nIt\'s great that it is now possible to monitor the test quality automatically. But if you want to take a step even further towards maintaining your test quality you can set a breaking threshold.\\n\\nThis will break your pipeline if a minimum mutation score wasn\'t reached.\\n\\nHow to use custom thresholds:\\n\\n```\\ndotnet stryker --threshold-high 90 --threshold-low 75 --break-at 60\\n```\\n\\nor in `stryker-config.json`\\n\\n```\\n{\\n    \\"stryker-config\\":\\n    {\\n        \\"thresholds\\":\\n        {\\n          \\"high\\": 90,\\n          \\"low\\": 75,\\n          \\"break\\": 60\\n        }\\n    }\\n}\\n```\\n\\nThis will make Stryker return a non-zero exit code when the mutation score is below 60.\\n\\n![](/images/blogs/threshold-break.png)\\n\\n\ud83d\udca1 Tip:\\nIf you think your mutation score is too low, try to increase the threshold every few months to gradually improve your tests.\\n\\n\ud83d\udca1 Tip:\\nIf you can\'t seem to kill a mutant, maybe the mutated code is not needed and can be safely removed.\\n\\n## \ud83c\udf86 Conclusion\\n\\nWith all these features nothing stands in your way to go and add Stryker.NET to your build pipeline.\\n\\nIf we put all these features together your pipeline could look like this:\\n\\n```yaml\\nsteps:\\n  - task: UseDotNet@2\\n    displayName: \'Use dotnet 6\'\\n    inputs:\\n      version: 6.x\\n  - task: DotNetCoreCLI@2\\n    displayName: \'Install dotnet tools for Stryker.CLI\'\\n    inputs:\\n      command: custom\\n      custom: \'tool restore\'\\n    workingDirectory: \'src\\\\Stryker.CLI\\\\Stryker.CLI.UnitTest\'\\n  - task: DotNetCoreCLI@2\\n    displayName: \'Run stryker on Stryker.CLI\'\\n    inputs:\\n      command: custom\\n      custom: \'stryker --reporter dashboard --reporter html --threshold-high 90 --threshold-low 75 --break-at 60 --since\'\\n    workingDirectory: \'src\\\\Stryker.CLI\\\\Stryker.CLI.UnitTest\'\\n  - task: stryker-mutator.mutation-report-publisher.publish-mutation-report.publish-mutation-report@0\\n    displayName: \'Publish Mutation Test Report\'\\n    inputs:\\n      reportPattern: \'src\\\\Stryker.CLI\\\\Stryker.CLI.UnitTest\\\\**\\\\mutation-report.html\'\\n```\\n\\nIf you run into trouble during installation or running, please let us know so we can improve.\\n\\n## \ud83d\udd2e What\'s next?\\n\\nThe upcoming months you can expect even more awesome features and improvements in Stryker.NET.\\n\\n- The `since` feature will be greatly improved and result in a full report. This is called the baseline feature.\\n- Regex mutator (never seen before in mutation testing)\\n- Mutating a whole solution at once\\n\\nWant to help make Stryker even better? Check out our [open issues](https://github.com/stryker-mutator/stryker-net/issues). Or help with implementing [mutation switching for Stryker (js)](https://github.com/stryker-mutator/stryker-js/issues/1514)"},{"id":"announcing-100-mode","metadata":{"permalink":"/blog/announcing-100-mode","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2020-04-01-announcing-100-mode.md","source":"@site/blog/2020-04-01-announcing-100-mode.md","title":"Announcing Stryker 100% mode","description":"Over the years, we\'ve been privileged to explain the concept of Mutation Testing to great developers, testers and others.","date":"2020-04-01T00:00:00.000Z","formattedDate":"April 1, 2020","tags":[{"label":"april fools","permalink":"/blog/tags/april-fools"}],"readingTime":1.42,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"announcing-100-mode","title":"Announcing Stryker 100% mode","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["april fools"]},"prevItem":{"title":"Integrating Stryker.NET in your azure pipelines","permalink":"/blog/azure-pipelines-integration"},"nextItem":{"title":"Announcing Stryker 3.0","permalink":"/blog/stryker-version-3"}},"content":"Over the years, we\'ve been privileged to explain the concept of Mutation Testing to great developers, testers and others.\\nThe concept of _inserting bugs into your production code_ in order to _test your tests_ sparks the imagination.\\n\\n\x3c!--truncate--\x3e\\n\\nBut when people start using mutation testing in practice, they\\nquickly realize that things are not as easy as they seem.\\nOne of the most common questions is: \\"what \'mutation score\' is good enough\\"?\\nOur general advice is not to strive for 100%. But should you use 80%? Or some other percentage?\\nSome users just want to see that everything is great with their tests.\\n\\nThat\'s why we\'re introducing a new \'100%\' mode!\\nWith this mode, Stryker itself will strive to improve your mutation score to be 100%.\\nYou can activate it with the `--100` command line flag,\\nbut we\'re thinking of making this the default mode.\\n\\n## \ud83d\ude49 An example\\n\\nA picture says more than a thousand words. First without the new `--100` mode:\\n\\n![](/images/blogs/stryker-without-100-mode.png)\\n\\nAnd now with the new `--100` mode:\\n\\n![](/images/blogs/stryker-with-100-mode.png)\\n\\nAs you can see, this new mode makes for a far better-looking report!\\n\\nAnd things just keep getting better. Since all mutants will be _killed - no matter what_, you\'ll not have to wait long,\\nbecause Stryker can internally optimize the process to _not do actual testing whatsoever_. A huge performance gain!\\n\\n## \ud83d\udd2e What\'s next?\\n\\nSeeing as this is such an obvious improvement, it will not take long for other mutation testing frameworks\\nto follow suit. That\'s why it\'s only a matter of time before\\nthe legendary [Mull](https://github.com/mull-project/mull#mull),\\n[InfectionPHP](https://infection.github.io/guide/) and [Pitest](https://pitest.org/) will have this new and very important feature.\\n\\nDon\'t hesitate to open an issue if this important mode is missing."},{"id":"stryker-version-3","metadata":{"permalink":"/blog/stryker-version-3","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2020-03-11-stryker-version-3.md","source":"@site/blog/2020-03-11-stryker-version-3.md","title":"Announcing Stryker 3.0","description":"With version 3 of Stryker, we\'ve been focussing on usability. We also did some smaller changes worth pointing out.","date":"2020-03-11T00:00:00.000Z","formattedDate":"March 11, 2020","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":2.755,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"stryker-version-3","title":"Announcing Stryker 3.0","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Announcing Stryker 100% mode","permalink":"/blog/announcing-100-mode"},"nextItem":{"title":"Host your mutation testing report","permalink":"/blog/stryker-dashboard-host-your-mutation-testing-report"}},"content":"With version 3 of Stryker, we\'ve been focussing on usability. We also did some smaller changes worth pointing out.\\nFor a full list of changes, please read [our changelog](https://github.com/stryker-mutator/stryker-js/blob/master/CHANGELOG.md#300-2020-03-11).\\n\\n\x3c!--truncate--\x3e\\n\\nIf you\'re new to mutation testing, it\'s a way to measure how effective your tests are at finding bugs.\\nPlease take a look at [our RoboBar \ud83e\udd16\ud83c\udf77 example](/example) and see how even 100% code coverage doesn\'t tell the whole story.\\nMutation testing is the only way to make sure your code is tested.\\n\\n## \ud83d\ude80 Migration\\n\\nMigrating to the latest major version is easy! Just update all `@stryker-mutator` dependencies to at least 3.0.0.\\nPlease note that Node 8 is _no longer supported_. For other breaking changes, please read the [\ud83d\udd25 Breaking changes](#breaking-changes)\\n\\nIf you\'re new to Stryker, please see [our quickstart](/stryker/quickstart). Have fun with mutation testing!\\n\\n## \ud83d\udcc3 New config format\\n\\nWe\'ve always supported a stryker.conf.js file for your Stryker options.\\nIn that file, you had to export a function that would be executed by Stryker\\nin which you could set your config options.\\n\\nAlthough this is still allowed, it is unnecessarily complex. That\'s why Stryker now supports direct\\nobject exports.\\n\\n```js\\nmodule.exports = {\\n  // Stryker config here\\n};\\n```\\n\\nStryker also doesn\'t force the `.js` extension anymore. This allows you to write your\\nconfig in a `stryker.conf.json` file (or, if you\'re feeling adventures, you could also\\nuse something like [ts-node](https://github.com/TypeStrong/ts-node) or [CoffeeScript/register](https://coffeescript.org/#nodejs-usage) to use other file formats).\\n\\n## \ud83d\udc53 IntelliSense in configuration\\n\\nWith the rising popularity of [JSON schema](https://json-schema.org/)\\n(and the code editors supporting it) it\'s more common to use JSON files for configuration. That\'s why we now also support\\nthe `stryker.conf.json` format. By pointing the `$schema` key to [our `stryker-core.json` schema file](https://raw.githubusercontent.com/stryker-mutator/stryker/master/packages/api/schema/stryker-core.json), you\'ll be able to get IntelliSense\\nin your code editor of choice.\\n\\n![IntelliSense](/images/blogs/intellisense.png)\\n\\nThis now also the default generated by `npx stryker init`.\\n\\nIf you still want to use the JS file format, it is also possible to get IntelliSense,\\nas long as your editor supports TypeScript notation in JSDoc.\\n\\n```js\\n/**\\n * @type {import(\'@stryker-mutator/api/core\').StrykerOptions}\\n */\\nmodule.exports = {\\n  // IntelliSense here!\\n};\\n```\\n\\n## \ud83c\udfa8 HTML reporter by default\\n\\nWe\'ve noticed that most developers like the HTML reporter a lot.\\nHowever, it was always a separate package. This was originally done\\nbecause it depended on a somewhat expensive template library (namely [handlebars](https://handlebarsjs.com/)).\\nSince the release of the [mutation testing HTML report](/blog/2019-04-03/one-mutation-testing-html-report),\\nthis is no longer the case.\\n\\nThat\'s why Stryker now comes with the HTML reporter included. It is also enabled by default. You can still disable it\\nby overriding the `\\"reporters\\"` property manually.\\n\\n## \ud83d\udd25 Breaking changes\\n\\nThis major release comes with some breaking changes:\\n\\n1. **Platform**\\n   - [#2028](https://github.com/stryker-mutator/stryker-js/pull/2028) NodeJS version 10 or higher is now required to run Stryker.\\n1. **Core**\\n   - [#1996](https://github.com/stryker-mutator/stryker-js/issues/1996) Always exit with exit code 1 if an error of any kind occurs (previously there were scenarios where it didn\'t fail).\\n   - [#2039](https://github.com/stryker-mutator/stryker-js/pull/2039) The Dashboard reporter (if enabled) will now default to uploading the full report.\\n1. **HTML Reporter**\\n   - [#2036](https://github.com/stryker-mutator/stryker-js/pull/2036) The HTML reporter is now included in the Stryker core. You should remove the dependency on `\\"@stryker-mutator/html-reporter\\"`.\\n     Please override the `\\"reporters\\"` option to disable the reporter.\\n1. **Karma runner**\\n   - [#2048](https://github.com/stryker-mutator/stryker-js/pull/2048) Always run with `client.clearContext` to prevent a race condition.\\n   - [#2035](https://github.com/stryker-mutator/stryker-js/pull/2035) Use `ChromeHeadless` by default instead of `PhantomJS`."},{"id":"stryker-dashboard-host-your-mutation-testing-report","metadata":{"permalink":"/blog/stryker-dashboard-host-your-mutation-testing-report","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2019-12-27-stryker-dashboard-host-your-mutation-testing-report.md","source":"@site/blog/2019-12-27-stryker-dashboard-host-your-mutation-testing-report.md","title":"Host your mutation testing report","description":"\ud83d\udcca The Stryker Dashboard can now host your mutation testing report in the cloud.","date":"2019-12-27T00:00:00.000Z","formattedDate":"December 27, 2019","tags":[{"label":"dashboard","permalink":"/blog/tags/dashboard"}],"readingTime":3,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"stryker-dashboard-host-your-mutation-testing-report","title":"Host your mutation testing report","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["dashboard"]},"prevItem":{"title":"Announcing Stryker 3.0","permalink":"/blog/stryker-version-3"},"nextItem":{"title":"Announcing Stryker 2.0","permalink":"/blog/announcing-stryker-2-0"}},"content":"\ud83d\udcca The Stryker Dashboard can now host your mutation testing report in the cloud.\\n\\n\x3c!--truncate--\x3e\\n\\nIf you\'re new to mutation testing, it\'s a way to measure how effective your tests are at finding bugs.\\nPlease take a look at [our RoboBar \ud83e\udd16\ud83c\udf77 example](/example) and see how even 100% code coverage doesn\'t tell the whole story.\\nMutation testing is the only way to make sure your code is tested.\\n\\nMutation testing is done by a mutation testing framework. After a mutation test run, you\'ll get a report that gives you all the details.\\nSince mutation testing is still growing in popularity, there wasn\'t a convenient way yet to view the report in the cloud.\\nThe Stryker Dashboard solves that problem.\\n\\nThe dashboard now has several new features:\\n\\n\ud83d\udc84 Store and show gorgeous reports.  \\n\ud83e\udd47 Brag about your mutation score with the mutation score badge.  \\n\ud83d\udd00 Support for Git workflows with mutation reports per branch and tag.  \\n\ud83d\udc09 Support for Monorepos. Multiple reports are aggregated to show a report of all your modules.  \\n\ud83d\udcb8 Free for open source projects.  \\n\ud83e\udd1d Supports all Stryker mutation testing frameworks. Other frameworks will add support over time or you can send your report through a cURL request. See [the Stryker handbook](https://github.com/stryker-mutator/stryker-handbook/blob/master/dashboard.md) for more details.\\n\\n## Some examples\\n\\nClick on the links below to see some examples of mutation testing reports hosted in the Stryker Dashboard.\\n\\n- [Stryker ![badge](https://img.shields.io/endpoint?style=flat&url=https%3A%2F%2Fbadge-api.stryker-mutator.io%2Fgithub.com%2Fstryker-mutator%2Fstryker%2Fmaster)](https://dashboard.stryker-mutator.io/reports/github.com/stryker-mutator/stryker-js/master)\\n- [Stryker4s ![badge](https://img.shields.io/endpoint?style=flat&url=https%3A%2F%2Fbadge-api.stryker-mutator.io%2Fgithub.com%2Fstryker-mutator%2Fstryker4s%2Fmaster)](https://dashboard.stryker-mutator.io/reports/github.com/stryker-mutator/stryker4s/master)\\n- [Stryker.NET ![badge](https://img.shields.io/endpoint?style=flat&url=https%3A%2F%2Fbadge-api.stryker-mutator.io%2Fgithub.com%2Fstryker-mutator%2Fstryker-net%2Fmaster)](https://dashboard.stryker-mutator.io/reports/github.com/stryker-mutator/stryker-net/master)\\n\\n## Why do we need it?\\n\\nMutation testing can be time-consuming.\\nUsing your PC to do it is fine for small projects, but for bigger projects, you really want to run it in your CI/CD pipeline.\\n\\nThis is also something we\'ve experienced developing Stryker, the mutation testing framework for JavaScript and TypeScript.\\nAt first, we would run Stryker on Stryker every week.\\nBut as our codebase grew, this became impractical.\\n\\nLuckily, running mutation testing in your CI/CD pipeline is a trivial task.\\nMost mutation testing frameworks can be run from the command line.\\nThis is also true for the Stryker family of frameworks.\\n\\nThe problem becomes: what is a convenient way to read the mutation testing report \ud83d\udc40?\\nManually downloading files and opening them in your browser isn\'t a way anyone should be forced to spend an afternoon.\\n\\n## Where can I get my own?\\n\\nGetting up and running with the dashboard is simple.\\n\\n\ud83c\udfaf Navigate to [dashboard.stryker-mutator.io](https://dashboard.stryker-mutator.io) and log in with your GitHub account.  \\n\u2705 Enable the Stryker Dashboard for your repository.  \\n\ud83d\udd11 Configure your API key. See [the dashboard article on the Stryker handbook for the details](https://github.com/stryker-mutator/stryker-handbook/blob/master/dashboard.md)  \\n\ud83c\udfc3\u200d\u2640\ufe0f Run Stryker.NET, Stryker4s or Stryker (with the dashboard reporter enabled) and upload your first report.\\n\\n## Eating our own dog food \ud83c\udf74\ud83d\udc36\ud83e\udd6b\\n\\nWe are eating our own dog food since we\'re using the new dashboard features to make our own mutation testing reports visible.\\nWe\'re naturally welcoming pull requests to help improve our tests.\\nImproving tests is a good way to get to know a new codebase.\\n\\n## What\'s next?\\n\\nWe can\'t wait for people to start using the dashboard and give feedback.\\nPlease enable it on your open-source project and tell us what you think!\\nTogether, we\'ll be able to spread the word about mutation testing\\nand test quality by making it more visible\\n\\nWe\'d like to get more mutation testing frameworks on board. To this date, [InfectionPHP](https://twitter.com/maks_rafalko/status/1207256423404638208) for PHP,\\n[Mull](https://twitter.com/1101_debian/status/1206613696564346881) for C++ and [Pitest](https://twitter.com/_pitest/status/1207251028653068288) for Java\\nhave shown interest.\\n\\nWe\'re looking to improve the dashboard further. You can expect more features and open-source git providers to be added.\\nWe\'re always looking for feedback, please don\'t hesitate to create [an issue](https://github.com/stryker-mutator/stryker-dashboard/issues/new)."},{"id":"announcing-stryker-2-0","metadata":{"permalink":"/blog/announcing-stryker-2-0","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2019-05-17-announcing-stryker-2-0.md","source":"@site/blog/2019-05-17-announcing-stryker-2-0.md","title":"Announcing Stryker 2.0","description":"A new major version of Stryker for JavaScript and TypeScript has been released: version 2.0.0.","date":"2019-05-17T00:00:00.000Z","formattedDate":"May 17, 2019","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":2.08,"hasTruncateMarker":true,"authors":[{"name":"Simon de Lang","title":"Stryker Team","url":"https://github.com/simondel","imageURL":"https://avatars1.githubusercontent.com/u/4221997?s=460&u=d09f7c27690d66764ff2f2ebb6d9f8d5431ad9e3&v=4"}],"frontMatter":{"slug":"announcing-stryker-2-0","title":"Announcing Stryker 2.0","author":"Simon de Lang","author_title":"Stryker Team","author_url":"https://github.com/simondel","author_image_url":"https://avatars1.githubusercontent.com/u/4221997?s=460&u=d09f7c27690d66764ff2f2ebb6d9f8d5431ad9e3&v=4","tags":["stryker-js"]},"prevItem":{"title":"Host your mutation testing report","permalink":"/blog/stryker-dashboard-host-your-mutation-testing-report"},"nextItem":{"title":"Announcing Stryker.NET 0.10 with .NET Framework support","permalink":"/blog/announcing-dotnet-framework-support"}},"content":"A new major version of Stryker for JavaScript and TypeScript has been released: version 2.0.0.\\nThis blog post will cover some of the changes. For a full list of changes, please read [our changelog](https://github.com/stryker-mutator/stryker-js/blob/master/CHANGELOG.md#200-2019-05-17).\\n\\n\x3c!--truncate--\x3e\\n\\nIf you run into any issues using the latest version of Stryker, please let us know!\\n\\n## \ud83d\ude80 Migration\\n\\nMigrating to the latest major version is easy! Just update all `@stryker-mutator` dependencies to at least version 2.0.0. If you are still using version 0.x.x, then please look at [our blog post regarding stryker v1](https://stryker-mutator.io/blog/2019-02-13/announcing-stryker-1-0).\\n\\nIf you\'re new to Stryker, please see [our quickstart](/stryker/quickstart). Have fun with mutation testing!\\n\\n## \ud83d\udd25 Breaking changes\\n\\nThis major release comes with some breaking changes:\\n\\n1. NodeJS version 8 or higher is now required to run Stryker\\n2. The code of Stryker is now es2017 code instead of es5\\n\\n## \u2728 What\'s new\\n\\nNot a big list of new features this time around. Mainly housekeeping and other optimizations. Here you\'ll find a list of small improvements.\\n\\n- Prettier has been removed as a direct dependency. We use prettier when initially writing your stryker.conf.js to disk (with `stryker init`).\\n  We now run prettier using the npx command instead of packaging it with Stryker, keeping Stryker lean and mean.\\n- We\'ve updated our source-map dependency to enable lazy loading. This ensures that coverage data is only mapped when (and if) it\'s required.\\n- VueJS files are only mutated when they contain `<script>` blocks.\\n\\n## \ud83d\udc74 Deprecations\\n\\nSince Stryker v1, we\'ve introduced a deprecation policy. This means that we\'ll support features for one major release after we\'ve deprecated them.\\nThis is a (small) list of stuff we\'ve deprecated. You\'ll also get a warning if you still use them in your setup.\\n\\n- The use of mocha version 5 and below is deprecated. This is mainly because of big changes the way you configure mocha.\\n  Please upgrade to mocha 6 or above. See [their changelog](https://github.com/mochajs/mocha/blob/master/CHANGELOG.md#600--2019-02-18) for more information about upgrading.\\n  Support for mocha version 5 and below will be removed in the future (with Stryker v3 probably).\\n- The `onScoreCalculated` internal reporter event is deprecated. Please use `onMutationTestReportReady` and calculate the score using [mutation-testing-metrics](https://github.com/stryker-mutator/mutation-testing-elements/tree/master/packages/mutation-testing-metrics#readme).\\n  All reporters maintained by the Stryker team are already migrated.\\n\\n## \ud83d\udcc5 Release schedule\\n\\nWe\'ll keep improving Stryker by fixing nasty bugs, improving code (and test) quality and by adding new features.\\nThe next major release of Stryker will probably be at the start of 2020 due to the LTS support of NodeJS version 8 ending."},{"id":"announcing-dotnet-framework-support","metadata":{"permalink":"/blog/announcing-dotnet-framework-support","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2019-04-05-announcing-dotnet-framework-support.md","source":"@site/blog/2019-04-05-announcing-dotnet-framework-support.md","title":"Announcing Stryker.NET 0.10 with .NET Framework support","description":"Stryker.NET 0.10 is here! This brings new features to mutation testing for .NET. Read all about these features in this blog.","date":"2019-04-05T00:00:00.000Z","formattedDate":"April 5, 2019","tags":[{"label":"stryker.net","permalink":"/blog/tags/stryker-net"}],"readingTime":3.84,"hasTruncateMarker":true,"authors":[{"name":"Richard Werkman","title":"Stryker.NET Team","url":"https://github.com/richardwerkman","imageURL":"https://avatars1.githubusercontent.com/u/14224500?s=460&u=189f6ef9ab6957063d0674f94c014bef39bf4653&v=4"}],"frontMatter":{"slug":"announcing-dotnet-framework-support","title":"Announcing Stryker.NET 0.10 with .NET Framework support","author":"Richard Werkman","author_title":"Stryker.NET Team","author_url":"https://github.com/richardwerkman","author_image_url":"https://avatars1.githubusercontent.com/u/14224500?s=460&u=189f6ef9ab6957063d0674f94c014bef39bf4653&v=4","tags":["stryker.net"]},"prevItem":{"title":"Announcing Stryker 2.0","permalink":"/blog/announcing-stryker-2-0"},"nextItem":{"title":"One mutation testing HTML report","permalink":"/blog/one-mutation-testing-html-report"}},"content":"Stryker.NET 0.10 is here! This brings new features to mutation testing for .NET. Read all about these features in this blog.\\n\\n\x3c!--truncate--\x3e\\n\\nStryker.NET has been under very active development. Up to now, we focussed on performance and .NET core.\\nThat all changes with v0.10, as we now also support **.NET Framework**. Both frameworks are supported now,\\nwith 100% feature parity. We also introduce some cool new features.\\n\\nIn this article we want to briefly recap what mutation testing is.\\nAfter that we\'ll explain how you install and use Stryker.NET.\\nWe also want to highlight some cool new features, before we end with a quick look at what\'s next.\\nJump right into it:\\n\\n## \ud83d\udc7e Mutation testing\\n\\nFor those of you who might not be familiar with Stryker.NET and Mutation Testing, here is a brief reminder.\\nPlease see [our RoboBar example](/example) for the full introduction.\\n\\nStryker.NET places _mutants_ (bugs) inside your source code. After that, it runs your tests for each mutant.\\nIf at least one tests fails, that\'s great! Your tests just killed that mutant. If not, too bad, the mutant survived.\\nApparently, you\'re missing a test.\\n\\nCalculating the percentage of mutants that were killed results in the mutation score. The higher the number, the better.\\nIt is the only way to measure _your tests effectiveness_. It\'s really as simple as that.\\n\\nTo cover as much logic as possible Stryker.NET provides a wide range of mutations.\\nAn overview of these mutations can be found [here](/docs/stryker-net/mutations).\\nYou can run Stryker.NET with .NET Core on Windows, Mac and Linux as well as .NET Framework on Windows.\\n\\n## \ud83d\udcaa Start using Stryker.NET\\n\\nStryker.NET is now installed as a (global) [dotnet tool](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools)\\ninstead of a [Per-project tool](https://docs.microsoft.com/en-us/dotnet/core/tools/extensibility).\\nThis has the advantage of not competing with your local project dependencies, but this also means that\\nStryker.NET has to be installed globally on your system. From .NET core 3.0, you will be able to install dotnet tools locally inside your project.\\n\\n1. Installation\\n\\n   Install **globally** (.NET Core runtime 2.2+):\\n\\n   ```\\n   dotnet tool install -g dotnet-stryker\\n   ```\\n\\n   Or install **locally** (.NET Core runtime 3.0+):\\n\\n   ```shell\\n   cd my-test-project\\n   dotnet new tool-manifest\\n   dotnet tool install dotnet-stryker\\n   ```\\n\\n   This will create a file called dotnet-tools.json in your project folder. You should check this file into source control to make sure all team members have access to Stryker and other tools specified here.\\n\\n   ```\\n   dotnet tool install dotnet-stryker\\n   ```\\n\\n2. Install NuGet\\n\\n   For .NET Core projects this step can be skipped.  \\n   For .NET Framework projects, make sure `nuget.exe` is installed on your system.\\n   Please follow their [installation instructions](https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#windows).\\n\\n3. Remove old references\\n\\n   Remove the old `DotNetCliToolReference` from your test project since they won\'t be updated anymore.\\n\\n4. Have fun using stryker!\\n\\n   You can now kick off stryker using\\n\\n   ```\\n   dotnet stryker --solution-path \\"../MySolution.sln\\"\\n   ```\\n\\n   If stryker is installed as a dotnet core 3.0 local tool, use the following instead:\\n\\n   ```\\n   dotnet tool run dotnet-stryker --solution-path \\"../MySolution.sln\\"\\n   ```\\n\\n## \u23e9 VSTest integration\\n\\nStryker.NET now hooks right into VSTest to execute your unit tests instead of running your tests from the command line.\\nThis means a big performance boost, because it keeps the VSTest connection alive between test runs.\\nBecause Stryker.NET supports VSTest, this performance boost wil work for most test frameworks, including [XUnit](https://xunit.github.io/),\\n[NUnit](https://nunit.org/) and [MSTest](https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest).\\n\\n## \ud83d\udcca New HTML report\\n\\nThis might catch your eye. As of v0.10, Stryker.NET comes with an HTML reporter.\\nIt shows a report in your browser with insights in your test quality, directly after your run Stryker.  \\nIt even goes into detail and shows you exactly what mutants were made and if your tests killed them!\\n\\n![](/images/stryker-net/html-report-net.png)\\n\\nIt uses the generic [mutation-testing-elements](https://github.com/stryker-mutator/mutation-testing-elements),\\nwhich is an open standard for reporting mutation test results. See our [previous blog](./2019-04-03-one-mutation-testing-html-report.md) for more information about the mutation-testing-elements\\n\\n## \ud83c\udfc3\u200d Progress bar\\n\\nYou can now track the progress of the mutation testing process, as well as preview the mutant stats.\\nIt also includes an indication of the remaining time to finish.\\n![](/images/stryker-net/progress-bar-net.png)\\n\\n## \ud83d\udd2e What\'s next?\\n\\nThe following months we will be focusing on performance and stability.\\nThe main next feature will be coverage analysis. How does that work?\\n\\nStryker.NET will use code coverage analysis to find mutants that are not covered by your tests.\\nIf it\'s not covered, it cannot be killed by any test, right? The mutant will be marked as `no coverage`,\\nmeaning the mutant survived while we saved valuable time.\\n\\n## Contribute\\n\\nWant to help make Stryker.NET even better?\\nCheck out our [contribution guide](https://github.com/stryker-mutator/stryker-net/blob/master/CONTRIBUTING.md)\\nand [backlog](https://waffle.io/stryker-mutator/stryker-net) to see what help we need.\\n\\nSpecial thanks to [@dubdop](https://github.com/stryker-mutator/stryker-net/commits?author=dupdob) for all his contributions. Keep up the good work! \ud83d\udcaa"},{"id":"one-mutation-testing-html-report","metadata":{"permalink":"/blog/one-mutation-testing-html-report","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2019-04-03-one-mutation-testing-html-report.md","source":"@site/blog/2019-04-03-one-mutation-testing-html-report.md","title":"One mutation testing HTML report","description":"If you\'ve used Stryker before, you\'ll know that it produces a gorgeous report you can view in the browser.","date":"2019-04-03T00:00:00.000Z","formattedDate":"April 3, 2019","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"},{"label":"stryker4s","permalink":"/blog/tags/stryker-4-s"},{"label":"stryker.net","permalink":"/blog/tags/stryker-net"},{"label":"mutation testing elements","permalink":"/blog/tags/mutation-testing-elements"}],"readingTime":2.85,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"one-mutation-testing-html-report","title":"One mutation testing HTML report","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js","stryker4s","stryker.net","mutation testing elements"]},"prevItem":{"title":"Announcing Stryker.NET 0.10 with .NET Framework support","permalink":"/blog/announcing-dotnet-framework-support"},"nextItem":{"title":"Announcing Stryker 1.0","permalink":"/blog/announcing-stryker-1-0"}},"content":"If you\'ve used Stryker before, you\'ll know that it produces a gorgeous report you can view in the browser.\\nIt works by generating HTML files based on the events raised by Stryker.\\nDuring development of Stryker4s and Stryker.NET, we realized that producing the same report would be a lot of\\nwork.\\n\\nInstead of a new HTML reporter implementation for each Stryker framework, we\'ve decided to move the logic of presenting the report to your browser.\\nThat way, any framework can support an HTML report simply by producing a JSON file.\\n\\nWe call it [mutation testing elements](https://github.com/stryker-mutator/mutation-testing-elements#readme) and\\nit is implemented using the mature\\n[web components suite of features](https://www.w3.org/TR/components-intro/).\\nYou can now use it in Stryker, Stryker.NET and Stryker4s\\n\\n\x3c!--truncate--\x3e\\n\\n## \ud83d\udc77\u200d Usage\\n\\nTo enable the new HTML reporter, simply update to the latest Stryker release and\\nenable the HTML reporter in the implementation of your choice.\\n\\n- **Stryker** (since v1.2)  \\n  Enable by adding `\'html\'` to your `reporters` in your `stryker.conf.js` file.\\n- **Stryker4s** (since v0.3.1)  \\n  Enable by adding `\\"html\\"` to your `reporters` in your `stryker4s.conf` file.\\n- **Stryker.NET** (since v0.9)  \\n  Enable `\\"html\\"` as reporter in your `stryker-config.json` file.\\n\\nUpgrading should be painless.\\n\\n## \ud83d\udcb8 Show me the money\\n\\nSee two screenshots taken from a mutation testing report of Stryker itself \ud83c\udf89\\n\\n![Directory](/images/blogs/mutation-testing-elements-directory.png)\\n\\n![File](/images/blogs/mutation-testing-elements-file.png)\\n\\nMutation testing elements comes with batteries included:\\n\\n\ud83d\udcca Calculates and displays the mutation score and other metrics  \\n\ud83d\udcc1 Group results into directories  \\n\ud83d\udc53 Show mutants directly in your source code  \\n\ud83d\ude0e Highlight code with embedded [highlightjs](https://highlightjs.org/)  \\n\ud83e\uddd9\u200d Filter mutants based on the outcome  \\n\ud83d\udd17 Deep linking using anchors (uses fragment, so path will not be contaminated)  \\n\u2728 A nice (yet basic) UI with embedded [bootstrap](https://getbootstrap.com) css  \\n\ud83c\udf93 Adheres to [custom element best practices](https://developers.google.com/web/fundamentals/web-components/best-practices)\\n\\n## \ud83d\udcad How it works\\n\\nUsing mutation testing elements is as simple as loading the JavaScript bundle and adding\\nthe `mutation-test-report-app` to your page, pointing the `src` to a json file that contains the\\nmutation testing results to be displayed.\\n\\n```html\\n<body>\\n  <script src=\\"https://www.unpkg.com/mutation-testing-elements@1.0.2/dist/mutation-test-elements.js\\"><\/script>\\n  <mutation-test-report-app src=\\"mutation-report.json\\">\\n    Your browser does not support custom elements. Please use a modern browser.\\n  </mutation-test-report-app>\\n</body>\\n```\\n\\nLoading from an external source (using `src=\\"...\\"`) only works if you serve the HTML file from a server.\\nUse property binding to also support opening your HTML report from disk directly.\\n\\n```js\\ndocument.querySelector(\'mutation-test-report-app\').report = {\\n  /*... report data ...*/\\n};\\n```\\n\\nThe report json should adhere to the [mutation testing report json schema](https://github.com/stryker-mutator/mutation-testing-elements/tree/master/packages/mutation-testing-report-schema#readme),\\nwe\'ve designed it with this specific goal in mind.\\n\\nFor more information on how to use it, as well as where to find the JavaScript implementation, please see the [readme of mutation testing elements](https://github.com/stryker-mutator/mutation-testing-elements/tree/master/packages/mutation-testing-elements#readme)\\non github. Want to contribute or suggest changes? Feel free to do so in the [mutation testing elements mono repo](https://github.com/stryker-mutator/mutation-testing-elements).\\n\\n## \ud83d\udcaa Call to action\\n\\nMutation testing elements is here to help out all mutation testing frameworks.\\nWe\'ve contacted the guys over at [Infection](https://infection.github.io/) (PHP)\\nand they will [support it in the future](https://github.com/infection/infection/issues/340#issuecomment-477148001).\\n\\nIf your mutation testing framework isn\'t supported, why not open up an issue at their side.\\nOr better yet, implement it in a pull request. Most of them are open source after all.\\nSpread the word \ud83d\udc96 to help us grow \ud83c\udf33.\\n\\n## \ud83d\udd2e What\'s next?\\n\\nWe\'re planning to upgrade the [Stryker dashboard](https://dashboard.stryker-mutator.io).\\nRight now it already supports [showing a mutation score badge](/blog/2018-02-08/get-your-mutation-score-badge-now).\\nIn the future, you will be able to host your entire mutation testing report there. Stay tuned.\\n\\nHappy mutation testing!"},{"id":"announcing-stryker-1-0","metadata":{"permalink":"/blog/announcing-stryker-1-0","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2019-02-13-announcing-stryker-1-0.md","source":"@site/blog/2019-02-13-announcing-stryker-1-0.md","title":"Announcing Stryker 1.0","description":"Stryker 1.0 is here! This is an important milestone for mutation testing in JavaScript and TypeScript.","date":"2019-02-13T00:00:00.000Z","formattedDate":"February 13, 2019","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":3.19,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"announcing-stryker-1-0","title":"Announcing Stryker 1.0","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"One mutation testing HTML report","permalink":"/blog/one-mutation-testing-html-report"},"nextItem":{"title":"Stryker4s 0.1.0 released","permalink":"/blog/stryker4s-0-1-0-released"}},"content":"Stryker 1.0 is here! This is an important milestone for mutation testing in JavaScript and TypeScript.\\n\\n\x3c!--truncate--\x3e\\n\\nIf you\u2019re unfamiliar with Stryker and mutation testing, now is the perfect time to try it out!\\nWe\'ve updated [our quickstart](/stryker/quickstart), so go ahead and start using Stryker today.\\nStryker can help you to improve your test quality by inserting bugs in your code and validating\\nthat your tests can find them. The output is a comprehensive report telling you exactly what your unit tests missed.\\n\\n## What\'s new\\n\\nHere you find a list of all the new features in Stryker 1.0 (alphabetical order):\\n\\n![](/images/blogs/tumble-weed.jpg)\\n_Nothing to see here_\\n\\nThat\'s right! We chose to not introduce new features. Instead, we\'ve _removed all deprecated functionality_.\\nAlso, we\'ve renamed all packages to be part of the @stryker-mutator [organization on NPM](https://docs.npmjs.com/orgs/).\\n\\n## Migrating from Stryker 0.x\\n\\nPlease use this migration guide to update your older Stryker version. If you\'re feeling adventurous \ud83e\udd20\ud83d\udc0a, you can skip to step 3.\\n\\n1. **Make sure you\'re on the latest version of 0.x**\\n\\n   Please make sure you\'re on the latest 0.x version first. Here is a list of all the latest versions:\\n\\n   - `grunt-stryker@0.13.17`\\n   - `stryker-api@0.24.1`\\n   - `stryker-babel-transpiler@0.10.1`\\n   - `stryker-html-reporter@0.18.1`\\n   - `stryker-jasmine-runner@0.4.1`\\n   - `stryker-jasmine@0.12.1`\\n   - `stryker-javascript-mutator@0.14.1`\\n   - `stryker-jest-runner@1.4.1`\\n   - `stryker-karma-runner@0.24.1`\\n   - `stryker-mocha-framework@0.15.1`\\n   - `stryker-mocha-runner@0.17.1`\\n   - `@stryker-mutator/test-helpers@0.1.1`\\n   - `stryker-typescript@0.18.1`\\n   - `stryker-vue-mutator@0.4.1`\\n   - `stryker-wct-runner@0.3.1`\\n   - `stryker-webpack-transpiler@0.9.1`\\n   - `stryker@0.35.1`\\n\\n   First update them in your package.json file, next use `npm install` (or `yarn install`) to install the versions.\\n\\n2. **Fix all deprecation warnings**\\n\\n   If you\'re on the latest 0.x release, run `npx stryker run` and fix any deprecation warnings that are logged.\\n   If Stryker runs without deprecation warnings, you\'re ready to upgrade\\n\\n3. **Update your global stryker-cli**\\n\\n   If you\'ve installed the `stryker-cli`, please update that one as well: `npm i -g stryker-cli`\\n\\n4. **Upgrade your dependencies**\\n\\n   Update your package.json file.\\n\\n   - `stryker` \u27a1 `@stryker-mutator/core`\\n   - `stryker-api` \u27a1 _none, this can be removed_\\n   - `stryker-babel-transpiler` \u27a1 `@stryker-mutator/babel-transpiler`\\n   - `grunt-stryker` \u27a1 `@stryker-mutator/grunt-stryker`\\n   - `stryker-html-reporter` \u27a1 `@stryker-mutator/html-reporter`\\n   - `stryker-jasmine` \u27a1 `@stryker-mutator/jasmine-framework`\\n   - `stryker-jasmine-runner` \u27a1 `@stryker-mutator/jasmine-runner`\\n   - `stryker-javascript-mutator` \u27a1 `@stryker-mutator/javascript-mutator`\\n   - `stryker-jest-runner` \u27a1 `@stryker-mutator/jest-runner`\\n   - `stryker-karma-runner` \u27a1 `@stryker-mutator/karma-runner`\\n   - `stryker-mocha-framework` \u27a1 `@stryker-mutator/mocha-framework`\\n   - `stryker-mocha-runner` \u27a1 `@stryker-mutator/mocha-runner`\\n   - `stryker-mutator-specification` \u27a1 `@stryker-mutator/mutator-specification`\\n   - `stryker-test-helpers` \u27a1 `@stryker-mutator/test-helpers`\\n   - `stryker-typescript` \u27a1 `@stryker-mutator/typescript`\\n   - `stryker-util` \u27a1 `@stryker-mutator/util`\\n   - `stryker-vue-mutator` \u27a1 `@stryker-mutator/vue-mutator`\\n   - `stryker-wct-runner` \u27a1 `@stryker-mutator/wct-runner`\\n   - `stryker-webpack-transpiler` \u27a1 `@stryker-mutator/webpack-transpiler`\\n\\n   The versioning of these dependencies start at 1.0.0, so feel free to use `^1.0.0` to specify the version.\\n\\n   After updating your package.json, you\'ll need to run `npm install` (or `yarn install`) once more.\\n\\n5. **Take it for a spin**\\n\\n   Stryker should now work as expected. Try it out with: `npx stryker run`.\\n\\n## Release cycle\\n\\nFrom now on we\'ll adhere to strict [semantic versioning](https://semver.org/spec/v2.0.0.html), or semver for short.\\nThis means that it\'s easy to distinguish between bug fixes, new features or breaking changes just\\nby looking at the version number.\\n\\nFuthermore, we\'ve decided to use _fixed versioning_ for our packages, meaning that all `@stryker-mutator/*` packages\\nwill _have the same version number_. For example, if your local `@stryker-mutator/core` version is `1.0.0`, your\\n`@stryker-mutator/html-reporter` should also be at that exact version. This makes maintaining your Stryker dependencies a breeze.\\n\\nThis is comparable to how Angular or React do their versioning.\\n\\n## Release schedule\\n\\nWe\'ll be releasing about as often as we were doing. The key difference is that we\'ll be extra focused on\\nsemver. Since we will be dropping support for old NodeJS versions as soon as\\n[it reaches end-of-life](https://github.com/nodejs/Release#release-schedule),\\nexpect _at least_ one major release a year, (however, we might do more major releases).\\nSo you can expect a v2 release around April 30th, since we\'ll be dropping Node.JS 6 support at that time\\n(the best birthday gift for me each year \ud83c\udf81)\\n\\nWe\'ll also keep a healthy deprecation policy, making sure that deprecated features remain in tact for at least one major release."},{"id":"stryker4s-0-1-0-released","metadata":{"permalink":"/blog/stryker4s-0-1-0-released","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2018-12-25-stryker4s-0-1-0-released.md","source":"@site/blog/2018-12-25-stryker4s-0-1-0-released.md","title":"Stryker4s 0.1.0 released","description":"This is the first official release of Stryker4s! Bringing easy mutation testing to Scala sbt projects. And it comes with some great features.","date":"2018-12-25T00:00:00.000Z","formattedDate":"December 25, 2018","tags":[{"label":"stryker4s","permalink":"/blog/tags/stryker-4-s"}],"readingTime":2.55,"hasTruncateMarker":true,"authors":[{"name":"Hugo van Rijswijk","title":"Stryker4s Team","url":"https://github.com/hugo-vrijswijk","imageURL":"https://avatars2.githubusercontent.com/u/10114577?s=460&u=51abfbf6e7bd33b38b998de62b0335b89d075a60&v=4"}],"frontMatter":{"slug":"stryker4s-0-1-0-released","title":"Stryker4s 0.1.0 released","author":"Hugo van Rijswijk","author_title":"Stryker4s Team","author_url":"https://github.com/hugo-vrijswijk","author_image_url":"https://avatars2.githubusercontent.com/u/10114577?s=460&u=51abfbf6e7bd33b38b998de62b0335b89d075a60&v=4","tags":["stryker4s"]},"prevItem":{"title":"Announcing Stryker 1.0","permalink":"/blog/announcing-stryker-1-0"},"nextItem":{"title":"Announcing Stryker 0.34","permalink":"/blog/announcing-stryker-0-34"}},"content":"This is the first official release of Stryker4s! Bringing easy mutation testing to Scala sbt projects. And it comes with some great features.\\n\\nIt\'s taken a little longer than we maybe would\'ve liked, but we are very proud of this first release. In this blog post we\'ll tell you about why running with the sbt plugin is a big improvement, and some of the features you can use today for Stryker4s. Although it\'s still possible to use the command-runner for non-sbt projects, we decided a sbt plugin was an important for the first release.\\n\\n\x3c!--truncate--\x3e\\n\\n## Sbt plugin\\n\\nThe biggest thing in our first release is the addition of a plugin for sbt. With this plugin, adding Stryker4s is as easy as adding the following line to your `plugins.sbt` file:\\n\\n```scala\\naddSbtPlugin(\\"io.stryker-mutator\\" % \\"sbt-stryker4s\\" % \\"0.1.0\\")\\n```\\n\\nThen just run `sbt stryker` and you are good to go!\\n\\nNot only does this plugin make it a lot easier to add Stryker4s to your project, it also dramatically improves the speed compared to the old command-runner. The reason for this is that the command-runner would simply run the command `sbt test` for each mutant. This meant that sbt would have to start a new process every single time. If you have ever used sbt before, you probably know this can take a while.\\n\\nWith the new plugin we can hook into the sbt process and keep it alive. This means sbt only has to start once, and all we have to do is tell sbt to run tests for all the mutants we found. If you\'ve used Stryker for JavaScript before, this may sound familiar. Adding to it, we don\'t even have to compile between mutant runs, which also gives a speed boost. You can read more about that in our [last blog post about mutation switching](/blog/2018-10-6/mutation-switching).\\n\\nBig thanks to [Scelestino](https://github.com/scelestino) and [Wmaarts](https://github.com/Wmaarts) for the help on the plugin.\\n\\n## Other features\\n\\nHere are some other things we recently did to improve your mutation testing experience:\\n\\n- We already support the new categories of mutators that are now [standardized across Stryker versions](https://github.com/stryker-mutator/stryker4s/pull/115).\\n- [Scala-specific function mutators](https://github.com/stryker-mutator/stryker-handbook/blob/master/mutator-types.md#stryker4s)\\n- [Excluding mutations](https://github.com/stryker-mutator/stryker4s/blob/master/docs/CONFIGURATION.md#excluded-mutations) you might not want to test\\n- [Setting a minimum mutation score](https://github.com/stryker-mutator/stryker4s/blob/master/docs/CONFIGURATION.md#excluded-mutations) threshold for your build.\\n\\n## What\'s next\\n\\nWe have a lot planned for the future of Stryker4s. We\'ll keep looking at ways to optimize the performance, and add new features. As well as sorting out some smaller bugs with the current plugin, such as providing proper support for multi-module projects ([although we have a workaround](https://github.com/stryker-mutator/stryker4s#multi-module-projects)). We also want to provide a Maven plugin to give Maven users the same benefits and ease of use. Some other things on the roadmap are the new cross-Stryker HTML dashboard, new mutators and focusing on providing a stable working plugin for many different types of projects.\\n\\nSo, whether you might have a quiet week at work, or want to get away from the family during Christmas dinner, why not try adding mutation testing to your Scala projects? Let us know how it goes \ud83c\udf84!"},{"id":"announcing-stryker-0-34","metadata":{"permalink":"/blog/announcing-stryker-0-34","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2018-12-24-announcing-stryker-0-34.md","source":"@site/blog/2018-12-24-announcing-stryker-0-34.md","title":"Announcing Stryker 0.34","description":"Stryker 0.34 is here. This new version comes with features to help you get started. It\'s never been this easy to mutation test your JS project!","date":"2018-12-24T00:00:00.000Z","formattedDate":"December 24, 2018","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":3.985,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"announcing-stryker-0-34","title":"Announcing Stryker 0.34","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Stryker4s 0.1.0 released","permalink":"/blog/stryker4s-0-1-0-released"},"nextItem":{"title":"Mutation switching in Stryker4s","permalink":"/blog/mutation-switching"}},"content":"Stryker 0.34 is here. This new version comes with features to help you get started. It\'s never been this easy to mutation test your JS project!\\n\\n\x3c!--truncate--\x3e\\n\\nInstall Stryker via the command line:\\n\\n```\\nnpm i stryker stryker-api --save-dev\\n```\\n\\nOr run `stryker init` in the root of your project:\\n\\n```\\nnpx stryker init\\n```\\n\\nSome features we want to talk about:\\n\\n- [Command test runner](#command-test-runner)\\n- [Zero configuration](#zero-configuration)\\n- [Init presets](#init-presets)\\n- [Web component tester test runner plugin](#web-component-tester-test-runner-plugin)\\n\\n## Command test runner\\n\\nStryker always was and always will be test runner agnostic. It doesn\'t care which test runner you use.\\nHowever, it always required you to install a test runner plugin.\\nAre you using Jest? Install the \'stryker-jest-runner\'. Want to use mocha? Then the \'stryker-mocha-runner\' is just what you need.\\nThis works great if the test runner of choice is supported, but what do you do when your test runner isn\'t supported?\\nLike [Ava.js](https://github.com/stryker-mutator/stryker-js/issues/243) or [node-tap](https://github.com/stryker-mutator/stryker-js/issues/325)\\nor [Intern](https://github.com/stryker-mutator/stryker-js/issues/430) or\\nmaybe you have a custom `npm test` command. This is why we\'ve added the `\'command\'` test runner.\\n\\nConfigure it in your stryker configuration:\\n\\n```js\\n// stryker.conf.js\\n{\\n    testRunner: \'command\',\\n    // Or leave out testRunner, \'command\' is the default test runner\\n    commandRunner: {\\n        command: \'npm run mocha\' // optionally choose a different command to run\\n    }\\n}\\n```\\n\\nStryker ships with the command test runner, so it doesn\'t need additional plugins. The command test runner will simply run your `npm test` script.\\nIf the exit code is `0`, the tests succeeded. If not, they failed.\\n\\nStryker is limited in the ways it can optimize for performance. For example, it starts a fresh node process for each test run.\\nSo if your test runner is supported via a test runner plugin, that would still be the way to go.\\n\\nThe command test runner runs `npm test` by default. You can configure a different command with the `commandRunner` configuration key.\\n\\nSpecial thanks to [Diego R.B.](https://twitter.com/DiegoRBaquero) for inspiring us to implement this.\\n\\n## Zero configuration\\n\\nStryker now chooses sensible defaults for all settings. Meaning that you can now run Stryker without any configuration.\\nIt will look for \\\\*.js files to mutate in your `src` and `lib` directories (excluding obvious test files, like app.spec.js).\\nCoverage analysis will be turned off and the [command test runner](#command-test-runner) is used.\\n\\n```\\nnpm install --save-dev stryker stryker-api\\nnpx stryker run\\n```\\n\\n**Note:** The default mutator Stryker uses will still be the deprecated `es5` mutator (comes with Stryker). In time, we\'ll be migrating this to\\nuse the `\'javascript\'` mutator (supporting ESNext).\\n\\nWith these defaults in place, it is now also easy to run Stryker without a configuration file if you want just one or two config options\\nto change. For example:\\n\\n```\\nnpx stryker run --testRunner mocha --mutator javascript\\n```\\n\\nAgain, special thanks to [Diego R.B.](https://twitter.com/DiegoRBaquero) for inspiring us to implement this.\\n\\nWith this feature in place, Stryker is now effectively a drop in replacement for [mutode](https://github.com/TheSoftwareDesignLab/mutode).\\n\\n## Init presets\\n\\nWith `stryker init` (either using the [stryker-cli](https://github.com/stryker-mutator/stryker-cli), or using `npx stryker init`)\\nyou can initialize Stryker in your repository. It asks questions via a questionnaire, like \\"Which test runner do you want to use?\\" and\\n\\"Which test framework do you want to use?\\". Sometimes you might not know the answer to those questions. It also might take a lot more\\nconfiguration to get you started. This is why we added a [guides section to the stryker handbook](https://github.com/stryker-mutator/stryker-handbook/tree/master/stryker/guides).\\nWe\'ve now integrated those into the `stryker init` command.\\n\\n```\\n$ stryker init\\n? Are you using one of these frameworks? Then select a preset configuration. (Use arrow keys)\\n> angular-cli\\nreact\\nvueJs\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\nNone/other\\n```\\n\\nChoosing for a preset immediately gets you started! It creates the configuration file and installs the correct plugins.\\nChoosing `None/other` here will still take you to the normal questionnaire.\\n\\nSpecial thanks to [wmaarts](https://github.com/Wmaarts) for adding this feature.\\n\\n## Web component tester plugin\\n\\nWith this release of Stryker, we\'ve also released version 0.1.0 of the stryker-wct-runner. Install it with:\\n\\n```\\n$ npm install --save-dev stryker-wct-runner\\n```\\n\\nConfigure it with:\\n\\n```js\\n{\\n  testRunner: \'wct\';\\n}\\n```\\n\\nWith this plugin, we now support [Polymer](https://www.polymer-project.org/) cli projects.\\nThe [web-component-tester](https://www.npmjs.com/package/web-component-tester) runs your tests in an actual browser.\\nHowever, it doesn\'t support any of the coverage analysis performance features for now. If you want those to be supported,\\nplease open an issue. You\'re also welcome to take a look at the [issues we\'ve opened at Polymer side](https://github.com/Polymer/tools/issues/created_by/nicojs).\\nAny help there is really appreciated.\\n\\n## What\'s next?\\n\\nWe\'re still focussing on getting v1 out of the door. We\'re reasonably certain it will happen in Q1 of next year.\\nV1 will mostly be removing deprecated features. We\'ll also introduce a more predictable release schedule with\\nstrict [Semantic Versioning](https://semver.org/spec/v2.0.0.html) policies. Stay tuned.\\n\\nInput on these new features or the v1 preparations are welcome!"},{"id":"mutation-switching","metadata":{"permalink":"/blog/mutation-switching","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2018-10-06-mutation-switching.md","source":"@site/blog/2018-10-06-mutation-switching.md","title":"Mutation switching in Stryker4s","description":"Learn how Stryker4s uses mutation switching to improve performance.","date":"2018-10-06T00:00:00.000Z","formattedDate":"October 6, 2018","tags":[{"label":"stryker4s","permalink":"/blog/tags/stryker-4-s"}],"readingTime":5.5,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"mutation-switching","title":"Mutation switching in Stryker4s","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker4s"]},"prevItem":{"title":"Announcing Stryker 0.34","permalink":"/blog/announcing-stryker-0-34"},"nextItem":{"title":"Introducing Stryker.NET and Stryker4s","permalink":"/blog/csharp-and-scala-support"}},"content":"Learn how Stryker4s uses mutation switching to improve performance.\\n\\n\x3c!--truncate--\x3e\\n\\nWe are very happy with Stryker\'s new friends! One of those new friends is Stryker4s(cala).\\nScala developers can now use mutation testing to improve their tests!\\nCreating a mutation testing framework for Scala comes with many challenges.\\nOne of those challenges is the Scala compiler itself.\\nWe all know it\'s not the [fastest in its kind](https://scala-ci.typesafe.com/grafana/dashboard/db/scala-benchmark?from=1429139130109&to=1492531027936h&orgId=1&var-branch=2.11.x&var-branch=2.12.x&var-branch=2.13.x&var-source=scala&var-bench=HotScalacBenchmark.compile&var-host=scalabench@scalabench@).\\nOne of the main goals of Stryker is to be fast. This means we need to come up with an intelligent way to introduce the mutants into the source code.\\n\\n## Attempt one: Compiling each mutation\\n\\nOne way of introducing mutants to a codebase is by mutating one statement, compile the code, run tests, gather the results and repeat.\\nThis seems like a logical choice because it mimics the way a developer would go about it.\\n\\nLet\'s look at an example.\\n\\n```scala\\nclass Numbers {\\n    def greaterThan(a: Int, b: Int): Boolean = {\\n        a > b\\n        // Mutant 1: a >= b\\n        // Mutant 2: a < b\\n        // Mutant 3: a == b\\n    }\\n}\\n```\\n\\nAs you can see, there are three possible mutants:\\n\\n1. Change `>` to `>=`\\n1. Change `>` to `<`\\n1. Change `>` to `==`\\n\\nIf we apply the mutation one by one, we would need to compile the code base three times.\\nIf we assume the compile time of this program is 10 seconds, we already have 30 seconds of compile time for one full mutation run.\\nThis would quickly get out of hand when the codebase is bigger and generates more mutants.\\n\\n## Attempt two: Mutating bytecode\\n\\nAs you might know, Scala gets compiled to Java bytecode. This gives us an alternative way to introduce mutations in a codebase.\\nWe would be able to mutate the bytecode directly, eliminating the need for recompiling.\\n\\nThe main challenge with this approach is that [Scala doesn\'t guarantee the bytecode output for each version of the compiler](https://docs.scala-lang.org/overviews/core/binary-compatibility-of-scala-releases.html) (or even JDK version).\\nEven the jump from Scala 2.12 to 2.13 produces different bytecode. This would make manipulating bytecode complicated, unpredictable and hard to maintain.\\n\\nFurthermore, if you mutate the bytecode, it can be difficult to reproduce the exact Scala code that you changed.\\nDetails, like the exact location, are not represented in bytecode.\\nScala makes this extra challenging, as 1 `.scala` file can easily result in 100 `.class` files in bytecode.\\n\\nFor performance reasons, mutating bytecode might sound like a fast solution, but you would still need to load (or hot reload) the mutated class files\\nfor each mutant.\\n\\nThere should be a better solution out there, right?\\n\\n## Solution: Mutation switching\\n\\nMutation switching to the rescue! So how is mutation switching both _faster_ and _more reliable_ than compiling each mutation or mutating bytecode?\\nThe steps are quite similar to \\"Compiling each mutant\\", but with some big differences:\\n\\n1. All mutants are identified for the whole codebase.\\n2. All mutants are applied to the codebase **at the same time** using a [Scala Pattern match](https://docs.scala-lang.org/tour/pattern-matching.html).\\n3. All mutants are tested one by one, with only **one mutant active at a time**, using an environment variable.\\n\\nStep 2 is where the magic happens. Let\'s take a look at the same code example as used previously, right after the mutations are applied.\\n\\n```scala\\nclass Numbers {\\n    def greaterThan(a: Int, b: Int): Boolean = {\\n        sys.env.get(\\"ACTIVE_MUTATION\\") match {\\n            case Some(\\"0\\") =>\\n                a >= b\\n            case Some(\\"1\\") =>\\n                a < b\\n            case Some(\\"2\\") =>\\n                a == b\\n            case _ =>\\n                a > b\\n        }\\n    }\\n}\\n```\\n\\nAll possible mutations are implemented in the pattern match. An identifier is used to turn on/off, or _switch_, specific mutations.\\nThe default case will be used when none of the mutants are active. Now the code base only needs to be compiled once.\\nThe extra time compilation takes because of its increased size is negligible compared to the overhead of compiling each mutant.\\nFor example, if the compilation time for this code base\\nwould be 15 seconds we will still gain 15 seconds compared to compiling each mutation.\\n\\nWe gain performance without losing flexibility. It\'s a win-win scenario.\\n\\n## Top statements\\n\\nMutation switching sure is great, but let\'s take a look at a more complex example.\\n\\n```scala\\ndef isEven(number: Int): Boolean = number % 2 == 0\\ndef isOdd(number: Int): Boolean = !isEven(number)\\n\\nval numbers: List[Int] = 1 to 100 toList\\n\\ndef filterOddAnd(specialNumber: Int): List[Int] = {\\n  numbers\\n    .filter(isOdd)\\n    .filterNot(_.equals(specialNumber))\\n}\\n```\\n\\nWith this code base `filter` and `filterNot` could be mutated to their counterparts.\\nThis would give us the following code base if we implement the pattern match at the direct position.\\n\\n```scala\\ndef isEven(number: Int): Boolean = number % 2 == 0\\ndef isOdd(number: Int): Boolean = !isEven(number)\\n\\nval numbers: List[Int] = 1 to 100 toList\\n\\ndef filterOddAnd(specialNumber: Int): List[Int] = {\\n  numbers.(sys.env.get(\\"ACTIVE_MUTATION\\") match {\\n    case Some(\\"0\\") => .filter(isOdd)\\n    case _         => .filterNot(isOdd)\\n  }).\\n  (sys.env.get(\\"ACTIVE_MUTATION\\") match {\\n    case Some(\\"1\\") =>  .filterNot(_.equals(specialNumber))\\n    case _         =>  .filter(_.equals(specialNumber))\\n  })\\n}\\n```\\n\\nBecause we wrapped the functions right on the spot we produced code that doesn\'t even compile!\\nTo make the code compile we need to take a closer look at the abstract syntax tree.\\nWe are searching for the parent statement in this abstract syntax tree, which is `numbers` in our case.\\nIf we implement mutation switching using the parent statement, we can generate the following code.\\n\\n```Scala\\ndef isEven(number: Int): Boolean = number % 2 == 0\\ndef isOdd(number: Int): Boolean = !isEven(number)\\n\\nval numbers: List[Int] = 1 to 100 toList\\n\\ndef filterOddAnd(specialNumber: Int): List[Int] = {\\n  sys.env.get(\\"ACTIVE_MUTATION\\") match {\\n    case Some(\\"0\\") => numbers.filterNot(isOdd).filter(_.equals(specialNumber))\\n    case Some(\\"1\\") => numbers.filter(isOdd).filter(_.equals(specialNumber))\\n    case _         => numbers.filter(isOdd).filterNot(_.equals(specialNumber))\\n  }\\n}\\n```\\n\\nThis enables us to get clean, readable pattern matches and avoid compilation errors.\\n\\n## What\'s next?\\n\\nWith mutation switching in place, the road is clear for even bigger performance improvements. Right now, we\'re not\\nkeeping the testing process alive. We simply run `sbt test` with the correct mutant switched on.\\nKeeping the test process alive and rerunning the tests after switching mutants is where we can really put the pedal to the metal!\\n\\nInterested to help? We\'re very much looking for contributions! Take a look at our [issue tracker](https://github.com/stryker-mutator/stryker4s/issues)\\nor contact us on [Slack](https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM).\\n\\n## Conclusion\\n\\nWith the combination of mutation switching and traversing to the parent statements Stryker4s is able to apply mutations to the codebase\\nin a clean and understandable fashion and keep the chances of compilation errors to a minimum.\\nWe hope this blog gave some insight on mutation switching works and how Stryker4s uses this to its advantage. Happy mutating!"},{"id":"csharp-and-scala-support","metadata":{"permalink":"/blog/csharp-and-scala-support","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2018-09-27-csharp-and-scala-support.md","source":"@site/blog/2018-09-27-csharp-and-scala-support.md","title":"Introducing Stryker.NET and Stryker4s","description":"We\'re excited to announce that we\'re doubling the number of supported languages for Stryker. We already had support for JavaScript and Typescript, and now both C# and Scala are supported as preview versions. Try them out and let us know what you think.","date":"2018-09-27T00:00:00.000Z","formattedDate":"September 27, 2018","tags":[{"label":"stryker4s","permalink":"/blog/tags/stryker-4-s"},{"label":"stryker.net","permalink":"/blog/tags/stryker-net"}],"readingTime":2.915,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"csharp-and-scala-support","title":"Introducing Stryker.NET and Stryker4s","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker4s","stryker.net"]},"prevItem":{"title":"Mutation switching in Stryker4s","permalink":"/blog/mutation-switching"},"nextItem":{"title":"Use git to select files","permalink":"/blog/use-git-to-select-files"}},"content":"We\'re excited to announce that we\'re doubling the number of supported languages for Stryker. We already had support for JavaScript and Typescript, and now both C# and Scala are supported as preview versions. Try them out and let us know what you think.\\n\\n\x3c!--truncate--\x3e\\n\\n## New platforms\\n\\nAs you might know, both C# and Scala run on entirely different platforms compared to Stryker (which runs on NodeJS). This is the main reason we decided to implement them as\\nseparate frameworks. [Stryker.NET](/stryker-net) is written in C# and runs as a .NET Core application, while [Stryker4s](/stryker4s) is written in Scala and runs on the JVM (Java Virtual Machine).\\nAs of now, a version of Stryker.NET can be found on nuget.org, the package manager for the .NET platform. In due time, Stryker4s can be found on Maven Central.\\n\\nStryker.NET is the result of the internship of [Richard](https://github.com/richardwerkman).  \\nStryker4s is the result of the internship of [Hugo](https://github.com/hugo-vrijswijk).\\n\\nThanks to them both for their hard work and continued support.\\n\\n## Getting started\\n\\nAs you might have noticed, we\'ve redesigned [our website](/). It is focussed to help you get started on the platform of choice.\\n\\n- [Get started with Stryker.NET](/stryker-net/quickstart) (preview)\\n- [Get started with Stryker4s](/stryker4s/quickstart) (preview)\\n- [Get started with Stryker](/stryker/quickstart) (for JavaScript / TypeScript)\\n\\n## One design mentality\\n\\nAlthough all 3 versions of Stryker are implemented on different platforms, the design goals are the same. It should be _easy to use_ and\\n_fast to run_. Without compromises.\\n\\nFor Stryker JavaScript we\'re mutating _source code_ (as explained in our\\n[road to Stryker 1.0](/blog/2017-07-14/road-to-stryker-1-0) blog post), instead of transpiled/minified JavaScript code.\\nThe main advantage is that it makes sure we only mutate _your actual code_, instead of 3rd party library or minified code.\\n\\nWe wanted to offer the same quality to the .NET and Scala counterparts, but they have one additional problem: compiling code takes a long time.\\nIt would dramatically reduce the performance of the frameworks. This is why we chose to implement a new mutation testing technique we call _Mutation Switching_.\\nWith this technique, we compile only once. This results in a drastic performance gain, without compromising the quality of the mutations.\\nIt really deserves it\'s own blog post, so more on that later.\\n\\n## Collaboration\\n\\nThough the 3 frameworks have their own code base, there are actually a lot of points on which we\'re planning to collaborate.\\n\\n- **One vocabulary**\\\\\\n  Terms like _mutant_, _survived_ and _mutator_ will mean the same across platforms. We will even share the names\\n  for the mutators, see [the supported mutators in our handbook](https://github.com/stryker-mutator/stryker-handbook/blob/master/mutator-types.md#supported-mutators)\\n  for a comprehensive list of supported mutators.\\n- **One website**\\\\\\n  We\'ll keep things together with [one website](/). This will help visibility for all platforms and keep things simple for our users.\\n- **One html reporter**\\\\\\n  We\'re redesigning our html report as [HTML 5 web components](https://www.webcomponents.org/). It really is it\'s own thing and might even be used for other mutation testing frameworks out there.\\n  Interested to help? Please let us know! [Github repository here](https://github.com/stryker-mutator/mutation-testing-elements).\\n- **One dashboard**\\\\\\n  We\'re planning on supporting our [mutation testing dashboard](https://dashboard.stryker-mutator.io) for all 3 implementations.\\n\\n## What about good old Stryker?\\n\\nYou might wonder what this all means for Stryker (for JavaScript and friends). Well, not much. The core developers are still here, focussed as ever.\\nWe\'re still focused on getting the 1.0 release out there for you.\\nWe had to invest some time in the overhead of setting this all up, but it will result in better and more complete frameworks in the end."},{"id":"use-git-to-select-files","metadata":{"permalink":"/blog/use-git-to-select-files","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2018-04-04-use-git-to-select-files.md","source":"@site/blog/2018-04-04-use-git-to-select-files.md","title":"Use git to select files","description":"The 0.21 release of Stryker simplifies configuration by using your git database.","date":"2018-04-04T00:00:00.000Z","formattedDate":"April 4, 2018","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":2.385,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"use-git-to-select-files","title":"Use git to select files","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Introducing Stryker.NET and Stryker4s","permalink":"/blog/csharp-and-scala-support"},"nextItem":{"title":"Get your mutation score badge now!","permalink":"/blog/get-your-mutation-score-badge-now"}},"content":"The 0.21 release of Stryker simplifies configuration by using your git database.\\n\\n\x3c!--truncate--\x3e\\n\\nFor a change log per package:\\n\\n- [stryker changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker/CHANGELOG.md)\\n- [stryker-api changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-api/CHANGELOG.md)\\n- [stryker-mocha-runner changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-mocha-runner/CHANGELOG.md)\\n- [stryker-karma-runner changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-karma-runner/CHANGELOG.md)\\n- [stryker-typescript changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-typescript/CHANGELOG.md)\\n- [stryker-webpack-transpiler changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-webpack-transpiler/CHANGELOG.md)\\n\\n## Sandboxes\\n\\nStryker only works on copies of your source code. A copy is called a _sandbox_. It creates as much of them as you want parallel test runners.\\nYou don\'t want a big sandbox. Just imagine what would happen if all your node_modules end up in there! That\'s why Stryker allows you to configure\\nthe files to load into it.\\n\\nOne of the most common issues in [our issue tracker](https://github.com/stryker-mutator/stryker-js/issues) has to do with\\nthe way you needed to configure it using the `files` configuration. It was very confusing. The fact that stryker-karma-runner (pre 0.13) and stryker-typescript (pre 0.10)\\nmodified your files array (without you knowing it) only added to the complexity.\\nJust [a small look at the angular example file](https://github.com/nicojs/angular-stryker-example/blob/72d85e19657247a77faa8e12587d3d301147b2bd/stryker.conf.js#L6)\\nwill leave you scratching your head.\\n\\nFurther more, you had properties like `included`, `transpiled` and `mutated`. It was kind of a mess really.\\n\\n## Remove your `files` configuration\\n\\nNo longer! From release 0.21 of Stryker, the files array is _optional_. Please remove it. Everything should work as expected.\\nStryker will fallback to a sane default: your git database. It does this by executing the following command:\\n`git ls-files --others --exclude-standard --cached`. The result should be exactly what you want in your sandbox\\n(given you\'re using `.gitignore` files like a boss). If you want to deviate from this for whatever reason,\\nyou can still use the `files` property with an array of strings.\\n\\nStryker also stopped keeping track of `included`, `transpiled` and `mutated` properties. For `mutate` please use the\\ndesignated [`mutate` top level stryker property](https://github.com/stryker-mutator/stryker-js/tree/master/packages/stryker#source-code-files-to-mutate).\\n\\n## Breaking change!\\n\\nUnfortunately we couldn\'t create this feature without some breaking changes. The biggest one is that we\'ve had to remove the old\\n`InputFileDescriptor` object way of defining your input file.\\n\\nThis:\\n\\n```js\\n// DEPRECATED\\nfiles: [{ pattern: \'pattern\', included: true, mutated: true, transpiled: true }];\\n```\\n\\nIs deprecated. If you are using it we strongly suggest to try to remove `files` entirely.\\n\\nWe\'ve had to update the API to test runner plugins and transpiler plugins as well. Before, Stryker was keeping track of which file\\nneeded to be included in the test runner or transpiled by the transpiler. This is\\nno longer the case. To see what this means for you, please consult the readme of the plugins you are using:\\n\\n- [stryker-mocha-runner readme](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-mocha-runner/README.md)\\n- [stryker-karma-runner readme](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-karma-runner/README.md)\\n- [stryker-typescript readme](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-typescript/README.md)\\n- [stryker-webpack-transpiler readme](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-webpack-transpiler/README.md)\\n\\n## What\'s next?\\n\\nWith this major refactoring out of the way we will hone in to our next target: an actual v1 release.\\nWe\'ve opened up [issue 654](https://github.com/stryker-mutator/stryker-js/issues/654) to keep track of our\\nprogress on this front. Want to help? Or curious about our plans? Please get in touch."},{"id":"get-your-mutation-score-badge-now","metadata":{"permalink":"/blog/get-your-mutation-score-badge-now","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2018-02-08-get-your-mutation-score-badge-now.md","source":"@site/blog/2018-02-08-get-your-mutation-score-badge-now.md","title":"Get your mutation score badge now!","description":"We\'re launching our Stryker Dashboard today.","date":"2018-02-08T00:00:00.000Z","formattedDate":"February 8, 2018","tags":[{"label":"dashboard","permalink":"/blog/tags/dashboard"}],"readingTime":1.905,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"get-your-mutation-score-badge-now","title":"Get your mutation score badge now!","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["dashboard"]},"prevItem":{"title":"Use git to select files","permalink":"/blog/use-git-to-select-files"},"nextItem":{"title":"Webpack support is here","permalink":"/blog/webpack-support"}},"content":"We\'re launching our [Stryker Dashboard](https://dashboard.stryker-mutator.io) today.\\nThis will be the home of your test quality in the future.\\nThe first feature? A mutation score badge!\\n\\n![badge green](https://img.shields.io/badge/mutation%20score-82.3-green.svg)\\n![badge orange](https://img.shields.io/badge/mutation%20score-72.3-orange.svg)\\n![badge red](https://img.shields.io/badge/mutation%20score-59.6-red.svg)\\n\\n\x3c!--truncate--\x3e\\n\\n## Tell me how!\\n\\nTake these steps to enable the mutation score badge on your repository.\\n\\n- **Step 1**: Make sure you can run stryker during a [travis](https://travis-ci.org) build (we only support travis at the moment).\\n- **Step 2**: Go to [https://dashboard.stryker-mutator.io](https://dashboard.stryker-mutator.io) and sign with your github account.\\n- **Step 3**: Flip the switch next to your repository:\\n  <svg _ngcontent-c6=\\"\\" height=\\"50\\" width=\\"250\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n  <g _ngcontent-c6=\\"\\">\\n  <title _ngcontent-c6=\\"\\">background</title>\\n  <rect _ngcontent-c6=\\"\\" x=\\"0\\" y=\\"0\\" width=\\"250\\" height=\\"50\\" ry=\\"20\\" rx=\\"20\\" fill=\\"#fff\\" r=\\"50\\" stroke=\\"#E7E8E6\\" strokeWidth=\\"1.5\\"></rect>\\n  </g>\\n  <g _ngcontent-c6=\\"\\">\\n  <title _ngcontent-c6=\\"\\">Switch</title>\\n  <text _ngcontent-c6=\\"\\" textAnchor=\\"start\\" x=\\"10\\" y=\\"30\\">username/reponame</text>\\n  <rect _ngcontent-c6=\\"\\" fill=\\"#E77964\\" height=\\"20\\" rx=\\"10\\" ry=\\"50\\" width=\\"45\\" x=\\"180\\" y=\\"15\\"></rect>\\n  <circle _ngcontent-c6=\\"\\" cx=\\"215\\" cy=\\"25\\" fill=\\"#b74934\\" r=\\"13\\"></circle>\\n  </g>\\n  </svg>\\n- **Step 4**: Configure your api key in your project. Please make sure you encrypt this variable using the [encrypted environment variables](https://docs.travis-ci.com/user/environment-variables/#Encrypting-environment-variables).\\n  For example:  \\n  `$ travis encrypt STRYKER_DASHBOARD_API_KEY=89b99910-04d8-4ffb-9a91-23d709c828b4 --add`\\n- **Step 5**: Configure the dashboard reporter in your stryker.conf.js file (you will need stryker version 0.19.1 or higher):  \\n  `reporter: [ /*...*/ \'dashboard\' ]`\\n- **Step 6**: Force a travis build  \\n  `$ git push origin master`\\n\\nYour badge will be available at: `https://badge.stryker-mutator.io/github.com/{username}/{repository_name}/{branch}`.\\n(don\'t forget to add it to your readme file)\\n\\nReal life examples of the mutation score badge:\\n\\n- [stryker-mutator/stryker-jest-runner](https://github.com/stryker-mutator/stryker-jest-runner#readme) ![badge](https://badge.stryker-mutator.io/github.com/stryker-mutator/stryker-jest-runner/master)\\n- [nicojs/node-install-local](https://github.com/nicojs/node-install-local#readme) ![badge](https://badge.stryker-mutator.io/github.com/nicojs/node-install-local/master)\\n- [nicojs/node-sdedit](https://github.com/nicojs/node-sdedit#readme) ![badge](https://badge.stryker-mutator.io/github.com/nicojs/node-sdedit/master)\\n\\n## What\'s next?\\n\\nA mutation score badge sure is nice, but what does the future bring?\\n\\nFirst we want to support monorepo style projects (stryker itself is a mono-repo). Every package in your monorepo will have its own badge.\\nWe also want to support a cumulative badge for in your main readme file.\\n\\nWe would also like to support more build servers and use cases. Are you missing a feature?\\nPlease let us know by opening [an issue](https://github.com/stryker-mutator/stryker-dashboard/issues/new).\\n\\nBut the dashboard is more than just badges. We truly want to make this the home of your test quality.\\nYou can think of features like:\\n\\n- Showing your html mutation report.\\n- Keep your history and show trend lines.\\n- Informing you how a pull request changes your mutation score.\\n- Support mutation testing frameworks for other languages.\\n\\nWe are curious to know what you think."},{"id":"webpack-support","metadata":{"permalink":"/blog/webpack-support","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2018-01-26-webpack-support.md","source":"@site/blog/2018-01-26-webpack-support.md","title":"Webpack support is here","description":"Stryker now supports bundling your code using webpack before running your tests.","date":"2018-01-26T00:00:00.000Z","formattedDate":"January 26, 2018","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":2.33,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"webpack-support","title":"Webpack support is here","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Get your mutation score badge now!","permalink":"/blog/get-your-mutation-score-badge-now"},"nextItem":{"title":"TypeScript coverage analysis support","permalink":"/blog/typescript-coverage-analysis-support"}},"content":"Stryker now supports bundling your code using webpack before running your tests.\\nThe installation/upgrade scenario\'s in this blog post can be circumvented by using the [Quickstart](https://stryker-mutator.github.io/quickstart.html) if you don\'t already use Stryker in your project.\\n\\n![](/images/blogs/love-webpack.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## A bundle for each mutant?\\n\\nOk. Stryker can mutate your code. We support both JavaScript and TypeScript.\\nHowever, the tests of many web projects first need to be bundled before they can be loaded in the browser for testing.\\nStryker [mutates your source files](./2017-07-14-road-to-stryker-1-0.md#open-heart-surgery),\\nrather than the resulting JS bundle. This means that you still need to tell Stryker how your bundle is created.\\n\\n## Webpack transpiler\\n\\nLet\'s say we\'re using [Webpack](https://webpack.js.org) to create that bundle. Well sir, let me bring you up-to-speed. We have just\\n[released the stryker-webpack-transpiler](https://www.npmjs.com/package/stryker-webpack-transpiler) and with it, Stryker uses _your webpack configuration_\\nto create the testing bundle.\\n\\nTo use the new Webpack transpiler, start by installing the package:\\n\\n```\\nnpm install --save-dev stryker-webpack-transpiler\\n```\\n\\nAnd configure it in your stryker.conf.js:\\n\\n```js\\ntranspilers: [\'webpack\'],\\nwebpack: {\\n    configFile: \'webpack.config.js\', // Is your webpack config file somewhere else? Please specify it here.\\n    silent: true // This removes the \\"ProgressPlugin\\" from your config before feeding it through Stryker\\n},\\n```\\n\\nFor more info, please see the [stryker-webpack-transpiler changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-webpack-transpiler/CHANGELOG.md)\\nor take a look at the [readme](https://github.com/stryker-mutator/stryker-js/tree/master/packages/stryker-webpack-transpiler#readme)\\n\\nEnjoy!\\n\\n## Can I use...\\n\\n### Angular?\\n\\nWith this new support for webpack, we now start to support [Angular](https://angular.io) projects!\\nHowever, you still need to provide a webpack configuration to Stryker. If you\'re using the [angular cli](https://npmjs.com/package/@angular/cli)\\nyou probably don\'t have a `webpack.config.js` file lying around. In that case, head on over to [nicojs/angular-stryker-example](https://github.com/nicojs/angular-stryker-example)\\nand take a look. We have tested it on small sized projects (< 100 tests). We would love your feedback if you\'re using it on larger projects.\\n\\n### React?\\n\\nUnfortunately, this release does not mean that we now support mutation testing on react projects, as they don\'t use webpack\\nfor testing. Instead, you\'re probably using [Jest](https://facebook.github.io/jest) which is responsible for loading your tests\\nin a nodejs environment (using [JSDom](https://github.com/tmpvar/jsdom)).\\n\\nHowever, we are working on first class support for any project using Jest, so you won\'t have to wait long.\\n\\n## What\'s next?\\n\\nWebpack support is awesome, but performance does take a big hit if we need to bundle each mutant.\\nHaving the coverage analysis can help a lot with that. As of yet, we don\'t support coverage analysis\\nwhen using a transpiler. However, [PR 559](https://github.com/stryker-mutator/stryker-js/pull/559) looks promising\\nand we\'ll be merging that into master in about a week or so.\\n\\nWe will also be working on React support with support for the Jest test runner. You can expect that in the next\\ncouple of weeks as well.\\n\\n## Special thanks\\n\\nSpecial thanks go out to [@Archcry](https://github.com/Archcry). He created the webpack plugin during his internship.\\nGive him some love!"},{"id":"typescript-coverage-analysis-support","metadata":{"permalink":"/blog/typescript-coverage-analysis-support","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2018-01-10-typescript-coverage-analysis-support.md","source":"@site/blog/2018-01-10-typescript-coverage-analysis-support.md","title":"TypeScript coverage analysis support","description":"Let\'s start this new year strong. Stryker 0.18 adds coverage analysis support for transpilers, starting with the TypeScript transpiler.","date":"2018-01-10T00:00:00.000Z","formattedDate":"January 10, 2018","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":4.62,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"typescript-coverage-analysis-support","title":"TypeScript coverage analysis support","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Webpack support is here","permalink":"/blog/webpack-support"},"nextItem":{"title":"Stryker adds Babel support","permalink":"/blog/babel-support"}},"content":"Let\'s start this new year strong. Stryker 0.18 adds coverage analysis support for transpilers, starting with the TypeScript transpiler.\\n\\n\x3c!--truncate--\x3e\\n\\nThis article first explains the basics of [(code) coverage](https://en.wikipedia.org/wiki/Code_coverage) analysis for mutation testing in general, before focussing on the new feature.\\n\\nSee the original PR for even more details:\\n\\n- [feat(coverage analysis): Support transpiled code #559](https://github.com/stryker-mutator/stryker-js/pull/559)\\n\\n## Coverage analysis\\n\\nIt might not sound particularly sexy, but (code) coverage analysis is an important feature of any mutation testing framework.\\nMutation testing takes a long time. The most effective way to save time, is to do less work.\\n\\nTake this small piece of JavaScript code:\\n\\n```javascript\\n// Source code:\\nfunction sum(a, b) {\\n  return a + b;\\n}\\n\\nfunction product(a, b) {\\n  return a * b;\\n}\\n\\nfunction difference(a, b) {\\n  return a - b;\\n}\\n```\\n\\n```javascript\\n// The tests:\\ndescribe(\'Math\', () => {\\n  it(\'should give 3 for sum(1, 2)\', () => {\\n    expect(sum(1, 2)).to.eq(3);\\n  });\\n\\n  it(\'should give 12 for product(3, 4)\', () => {\\n    expect(product(3, 4)).to.eq(12);\\n  });\\n});\\n```\\n\\n### Coverage analysis: \'all\'\\n\\nAs you can see the `sum` and `product` functions are reasonably well tested, but the the `difference` function isn\'t tested at all.\\n\\nFor example: what would the result be for the mutant that changes `a - b` to `a + b`? It doesn\'t even make sense to test it,\\nanyone can see it will survive anyway.\\n\\nIf you set coverage analysis to `\'all\'` inside your stryker.conf.js file, this is exactly what happens. Stryker will automatically\\ncollect code coverage results during the initial test run phase\\\\*. If a mutant mutates code that is not tested,\\nit will be marked as _\'no coverage\'_ (which translates to _survived_ during the score calculation) without ever testing it.\\nThis can safe minutes on larger code bases.\\n\\n- Coverage analysis is not supported for Jest yet.\\n\\n### Coverage analysis: \'perTest\'\\n\\nNice! We\'re already saving time by analyzing a simple code coverage result. But if we take a closer look, we see that we can save even more time.\\n\\nTake the `product` function for example: we want to test the mutant that changes `a * b` to `a / b`. We see that it is covered by a test, so\\nwe cannot skip the actual testing of this mutant. However, we can save time by only running the one test that covers this mutant.\\n\\nIf you set coverage analysis to `\'perTest\'` inside your stryker.conf.js file, this is exactly what happens. Stryker will automatically\\ncollect code coverage results _per test_ during the initial test run phase. Next, it will select only those tests that actually cover\\na mutant to run for that mutant (again, not supported for Jest yet). This might seem like a small improvements,\\nbut in big projects with 100s of tests, it quickly adds up to minutes.\\n\\nIt is important to realize that this does not influence the quality of the resulting report at all. It simply less work to reach the same conclusion.\\n\\n## The challenge with transpiled code\\n\\nNow that we have a firm understanding of coverage analysis and why it is important, lets dive into the new stuff.\\nAfter all, coverage analysis is nothing new for Stryker, it has been there for a long time.\\nHowever, it gets more complicated when you add a transpiler to the (delicious) mutation testing mix.\\n\\nPlease read [our blog article on transpiling code](./2017-10-06-typescript-support.md) if your interested in the details on how transpilers are implemented in Stryker.\\nFor now it is is enough that you understand that Stryker mutates your _source_ code, while running the _transpiled_ code in the test runner.\\nAny coverage analysis we collect will only tell us about the _transpiled_ covered code, while the mutants only work on your _source_ code.\\n\\nTake this small piece of TypeScript code:\\n\\n```typescript\\n// TypeScript: before transpiling\\nclass Math {\\n  static sum(a: number, b: number) {\\n    return a + b;\\n  }\\n}\\n```\\n\\n```javascript\\n// JavaScript: after transpiling (target: es5)\\nvar Math = /** @class */ (function () {\\n  function Math() {}\\n  Math.sum = function (a, b) {\\n    return a + b;\\n  };\\n  return Math;\\n})();\\n```\\n\\nEven with this small example, you can already see that the location of `a + b` in source code vs transpiled code is totally different.\\nWe need to translate the location of a mutant to the actual transpiled location somehow.\\n\\n## Bridging the gap\\n\\nLuckily, any respectable transpiler can produce [source maps](https://www.thecssninja.com/javascript/source-mapping).\\nThey are used by code editors and browsers to debug source code while executing transpiled/minified/bundled code.\\nAnd, as of now, this is what is used by Stryker to calculate the transpiled location.\\n\\nSo if you select coverage analysis \'all\' or \'perTest\' while transpiling using typescript, the stryker-typescript transpiler\\nplugin will produce source maps during the initial test run. Stryker will use those source maps to translate the transpiled location\\nof all mutants.\\n\\n## Show me the numbers\\n\\nUnfortunately, we do not have a good performance testing mechanism for Stryker yet (PRs and ideas are welcome!),\\nbut the results for mutation testing on Stryker itself are very promising, shaving off about 6 minutes for single run,\\nabout a 50% performance increase.\\n\\n## What\'s next?\\n\\nNext up we\'ll work on getting this performance increase to all supported transpilers.\\nWe\'re also working behind the scenes on a transpiler plugin for webpack. Which you can also expect\\nwithin the next couple of weeks.\\n\\nIn the meantime: have fun with this feature. Are you using it? Please let is know what you think! We\'re always\\ninterested to know what we can improve further.\\n\\nHave fun."},{"id":"babel-support","metadata":{"permalink":"/blog/babel-support","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2017-12-01-babel-support.md","source":"@site/blog/2017-12-01-babel-support.md","title":"Stryker adds Babel support","description":"A new Stryker plugin that adds support for Babel projects has just been released!","date":"2017-12-01T00:00:00.000Z","formattedDate":"December 1, 2017","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":2.125,"hasTruncateMarker":true,"authors":[{"name":"Simon de Lang","title":"Stryker Team","url":"https://github.com/simondel","imageURL":"https://avatars1.githubusercontent.com/u/4221997?s=460&u=d09f7c27690d66764ff2f2ebb6d9f8d5431ad9e3&v=4"}],"frontMatter":{"slug":"babel-support","title":"Stryker adds Babel support","author":"Simon de Lang","author_title":"Stryker Team","author_url":"https://github.com/simondel","author_image_url":"https://avatars1.githubusercontent.com/u/4221997?s=460&u=d09f7c27690d66764ff2f2ebb6d9f8d5431ad9e3&v=4","tags":["stryker-js"]},"prevItem":{"title":"TypeScript coverage analysis support","permalink":"/blog/typescript-coverage-analysis-support"},"nextItem":{"title":"New HTML reporter","permalink":"/blog/new-html-report"}},"content":"A new Stryker plugin that adds support for Babel projects has just been released!\\n\\nThe installation/upgrade scenario\'s in this blog post can be circumvented by using the [Quickstart](https://stryker-mutator.github.io/quickstart.html) if you don\'t already use Stryker in your project.\\n\\n![](/images/blogs/love-babel.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## New JavaScript mutator\\n\\nIn order to support mutating more recent JavaScript features as well as experimental features, we had to change the way we mutate JavaScript code.\\nWe had already released a separate plugin for mutating TypeScript code, but now we have also released a separate plugin for mutating JavaScript code.\\nIt is called the [stryker-javascript-mutator](https://www.npmjs.com/package/stryker-javascript-mutator) and it replaces the current \'ES5\' mutator that has always come with Stryker. With this release, the \'ES5\' has been deprecated and it will be removed in the future.\\n\\nIf you use Stryker with JavaScript code on your project, we highly recommend upgrading to the new stryker-javascript-mutator.\\n\\nYou can do so by installing the package:\\n\\n```\\nnpm install --save-dev stryker-javascript-mutator\\n```\\n\\nAnd configuring it in your stryker.conf.js:\\n\\n```js\\nmutator: \'javascript\',\\n```\\n\\nIf you have a plugins section in your config, please consider removing it or add the new styker-javascript-mutator plugin.\\n\\n## Babel transpiler\\n\\nEven if Stryker can mutate JavaScript code in which new features are used, your environment may not be able to run that code.\\nMany people use Babel to convert their modern JavaScript to a format that will run environments that do not support these features.\\nWe developed a new plugin for Stryker, the [stryker-babel-transpiler](https://www.npmjs.com/package/stryker-babel-transpiler), during a hackathon sponsored by [Info Support](https://opensource.infosupport.com).\\nThis plugin is capable of transpiling code written using Babel to code that runs in your environment. Give Stryker your babel config and we\'ll make it work!\\n\\nTo use the new Babel transpiler, start by installing the package:\\n\\n```\\nnpm install --save-dev stryker-babel-transpiler\\n```\\n\\nAnd configure it in your stryker.conf.js:\\n\\n```js\\ntranspilers: [\'babel\'],\\nbabelrcFile: \'.babelrc\', // Is your .babelrc file somewhere else? Please specify it here.\\n// If you don\'t have a .babelrc file you can specify the config directly (Not recommended!):\\n// babelConfig: { \\"presets\\": [\\"env\\"],  \\"plugins\\": [\\"transform-object-rest-spread\\"] },\\n```\\n\\nIf you have a plugins section in your config, please consider removing it or add the new stryker-babel-transpiler plugin.\\n\\n## Webpack projects\\n\\nWith these new features, **we unfortunately do not yet have support for projects using Webpack (such as React)**.\\nIf you need Webpack to bundle your code in order to run your tests please let us know what your setup is! This will help us with the development of Webpack support.\\n\\nPlease try it out yourself and let us know what your think!"},{"id":"new-html-report","metadata":{"permalink":"/blog/new-html-report","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2017-10-28-new-html-report.md","source":"@site/blog/2017-10-28-new-html-report.md","title":"New HTML reporter","description":"The Stryker HTML Reporter version 0.10 has a lot of new features, but more importantly: a sexy new look.","date":"2017-10-28T00:00:00.000Z","formattedDate":"October 28, 2017","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":0.88,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"new-html-report","title":"New HTML reporter","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Stryker adds Babel support","permalink":"/blog/babel-support"},"nextItem":{"title":"TypeScript support","permalink":"/blog/typescript-support"}},"content":"The Stryker HTML Reporter version 0.10 has a lot of new features, but more importantly: a sexy new look.\\n\\n\x3c!--truncate--\x3e\\n\\nFor the entire changelog:\\n\\n- [stryker-html-reporter changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-html-reporter/CHANGELOG.md)\\n\\n## Sexy new look\\n\\nWithout further ado:\\n\\n![](/images/blogs/html-report-bootstrap4.png)\\n\\nAs you might already suspect, we\'ve upgraded to [bootstrap 4 (beta)](http://getbootstrap.com/).\\n\\n## New features\\n\\nThis new report has a ton of new features:\\n\\n- **Mutant states**. The file report will now show the exact [state of a mutant](http://stryker-mutator.github.io/faq.html#q-what-do-all-these-metrics-mean).\\n  It\'s also possible to filter out the exact states at the top. It even shows the amount of mutants with that state in parentheses.\\n  This should give you more details as to what happened when testing your application.\\n- **Detailed mutant report**. On the right side (or below on small screens) of a file report, you can now see a detailed table with even more information about the mutants.\\n- **Breadcrumb**. The days of getting lost in your Stryker report belong to the past. Behold: the new breadcrumb in your report!\\n\\nPlease try it out yourself and let us know what your think!"},{"id":"typescript-support","metadata":{"permalink":"/blog/typescript-support","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2017-10-06-typescript-support.md","source":"@site/blog/2017-10-06-typescript-support.md","title":"TypeScript support","description":"Stryker 0.10 marks the biggest change in Stryker history yet, as we now support running mutation testing on TypeScript code.","date":"2017-10-06T00:00:00.000Z","formattedDate":"October 6, 2017","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":3.605,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"typescript-support","title":"TypeScript support","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"New HTML reporter","permalink":"/blog/new-html-report"},"nextItem":{"title":"Stryker 0.8 release","permalink":"/blog/stryker-0-8-0"}},"content":"Stryker 0.10 marks the biggest change in Stryker history yet, as we now support running mutation testing on TypeScript code.\\n\\n\x3c!--truncate--\x3e\\n\\nFor the entire changelog per package:\\n\\n- [stryker changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker/CHANGELOG.md)\\n- [stryker-api changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-api/CHANGELOG.md)\\n- [stryker-html-reporter changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-html-reporter/CHANGELOG.md)\\n- [stryker-typescript changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-typescript/CHANGELOG.md)\\n- [stryker-mocha-runner changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-mocha-runner/CHANGELOG.md)\\n- [stryker-mocha-framework changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-mocha-framework/CHANGELOG.md)\\n\\n## Language agnostic\\n\\nStryker is now language agnostic. This means that you can use Stryker to mutation test _any_ language that\\ntranspiles down to JavaScript (as long as you have the correct plugin for it). TypeScript is the first language that is\\nfully supported in this way.\\n\\nTo make this possible we made a number of changes to the Stryker core:\\n\\n- Changed the Mutator plugin api\\n- Add a Transpiler plugin api\\n\\n### Mutator plugin api\\n\\nWith the previous Mutator plugin, it was possible to mutate a single Abstract Syntax Tree (AST) node. It was a neat little feature,\\nbut was never used outside of the core Stryker package. This plugin was also specific to JavaScript.\\nAs Stryker is now language agnostic, we decided to move the Mutator api to a higher level of abstraction.\\nA Mutator is now responsible for mutating code written in a specific language, instead of a single JS AST node.\\n\\nWe moved the existing es5 Mutator code into a new Mutator called `\'es5\'`.\\nIt is at this moment still part of the main Stryker npm module, but we have plans to remove it later on.\\nWe also added a [`\'typescript\'` mutator](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-typescript/src/TypescriptMutator.ts)\\nas part of the new stryker-typescript npm module.\\n\\nYou can find the new [api definition here](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-api/src/mutant/Mutator.ts).\\n\\n### Transpiler plugin api\\n\\nWith a transpiler plugin, it possible to transform any source code before Stryker runs your tests.\\nIt is also used to transpile each mutant in the same way. This allows maximum freedom when\\nmutating source code, without having to worry about the resulting JavaScript code.\\nA side effect is that it will not work with [coverage analysis](https://github.com/stryker-mutator/stryker-js/tree/master/packages/stryker#type-of-coverage-analysis) yet,\\nmeaning that Stryker will force coverage analysis to be `\'off\'` when a transpiler is used.\\n\\nWe created the [`\'typescript\'` transpiler](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-typescript/src/TypescriptTranspiler.ts)\\nas part of the new `stryker-typescript` npm module.\\n\\nYou can find the new [api definition here](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-api/src/transpile/Transpiler.ts)\\n\\n## The TypeScript mutation testing framework\\n\\n[Original PR](https://github.com/stryker-mutator/stryker-js/pull/376)\\n\\nStryker now supports TypeScript. This means that Stryker is now able to work\\ndirectly on your TypeScript code, no need to first transpile it yourself and run Stryker on the transpiled code.\\nThis has the following advantages:\\n\\n- Far less false-positives,\\n- Your stryker reports will now show your code, instead of transpiled code.\\n\\n### \\"There\'s a plugin for that\\"\\n\\nAll Stryker plugins to help you with TypeScript are part of a single npm module: [stryker-typescript](https://www.npmjs.com/package/stryker-typescript).\\nIt contains 3 plugins that work together:\\n\\n1. **Config Editor**: A plugin that reads your tsconfig.json file and makes the config available to both the mutator and transpiler.\\n1. **Mutator**: A plugin that can mutate TypeScript code. See [our unit tests](https://github.com/stryker-mutator/stryker-js/tree/master/packages/stryker-typescript/test/unit/mutator) to know what mutations are support.\\n1. **Transpiler**: A plugin that can transpile (mutated) TypeScript code. It uses your tsconfig settings, so the output will be exactly as you\'d expect.\\n\\nTo configure the plugins you need to add this to your stryker.conf.js file:\\n\\n```javascript\\nmodule.exports = function (config) {\\n  config.set({\\n    // ...\\n    mutator: \'typescript\',\\n    transpilers: [\'typescript\'],\\n    tsconfigFile: \'tsconfig.json\',\\n    // ...\\n  });\\n};\\n```\\n\\n### Great! But what about performance?\\n\\nYou might be thinking all this has a negative impact on performance.\\nAfter all, we have to transpile the TypeScript code for each mutant we want to test.\\nWhen running Stryker on itself we notice that it takes less time than before when we were mutating JavaScript.\\nThis is because transpiling each mutant ensures that no false positives are tested. Results for your project may differ.\\n\\nTake the [BinaryExpressionMutator](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-typescript/src/mutator/BinaryExpressionMutator.ts)\\nfor example. It might mutate:\\n\\n```typescript\\n\'foo\' + \'bar\';\\n```\\n\\ninto:\\n\\n```typescript\\n\'foo\' - \'bar\';\\n```\\n\\nAlthough this would be valid in JavaScript, it is _invalid_ in TypeScript.\\nThis means that the mutant will result in a `TranspileError`. It is _not_ tested and _not_ calculated into your mutation score.\\nLess work means it can be faster.\\n\\n## What\'s next?\\n\\nNext, we want to further improve upon our TypeScript support. For example we want to add support\\nfor [coverage analysis](https://github.com/stryker-mutator/stryker-js/tree/master/packages/stryker#type-of-coverage-analysis)\\nwhen using a transpiler. We\'re also thinking about an es6 mutator using Babel under the hood.\\n\\nPlease let us know what you think."},{"id":"stryker-0-8-0","metadata":{"permalink":"/blog/stryker-0-8-0","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2017-08-11-stryker-0-8-0.md","source":"@site/blog/2017-08-11-stryker-0-8-0.md","title":"Stryker 0.8 release","description":"Stryker 0.8 just released with better CI integration and configurable thresholds.","date":"2017-08-11T00:00:00.000Z","formattedDate":"August 11, 2017","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":1.37,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"stryker-0-8-0","title":"Stryker 0.8 release","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"TypeScript support","permalink":"/blog/typescript-support"},"nextItem":{"title":"Road to Stryker 1.0","permalink":"/blog/road-to-stryker-1-0"}},"content":"Stryker 0.8 just released with better CI integration and configurable thresholds.\\n\\n\x3c!--truncate--\x3e\\n\\nFor the entire changelog per package:\\n\\n- [stryker changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker/CHANGELOG.md)\\n- [stryker-api changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-api/CHANGELOG.md)\\n- [stryker-html-reporter changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-html-reporter/CHANGELOG.md)\\n- [stryker-mocha-runner changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-mocha-runner/CHANGELOG.md)\\n- [stryker-mocha-framework changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-mocha-framework/CHANGELOG.md)\\n\\n## Better CI integration\\n\\n[Original PR](https://github.com/stryker-mutator/stryker-js/pull/355)\\n\\nIt\'s now possible to let your build fail based on your mutation score.\\nThe way to do this is to make sure stryker runs inside your (nightly) build and configure the `threshold.break` value:\\n\\n```javascript\\n// stryker.conf.js\\n// ...\\nthresholds: {\\n    break: 70, // Fail if mutation score < 70\\n    // ..\\n}\\n// ...\\n```\\n\\nThis will break the build if your mutation score falls below 70%.\\n\\n```bash\\n[2017-08-11 13:46:10.190] [ERROR] ScoreResultCalculator - Final mutation score 66.97 under breaking threshold 70, setting exit code to 1 (failure).\\nnpm ERR! code ELIFECYCLE\\nnpm ERR! errno 1\\nnpm ERR! stryker@0.8.0 stryker: `node bin/stryker run`\\n```\\n\\nWant to know what a \'mutation score\' is? See [our faq](/docs/General/faq/).\\n\\n## Configurable color thresholds\\n\\n[Original PR](https://github.com/stryker-mutator/stryker-js/pull/355)\\n\\nThe clear-text and html reporters now honor configured high and low thresholds.\\nYou once again configure it using the `thresholds` config option:\\n\\n```javascript\\n// stryker.conf.js\\n// ...\\nthresholds: {\\n    high: 80,\\n    low: 60,\\n    // ...\\n}\\n// ...\\n```\\n\\nConfiguring these values will color mutation scores above 80% <span className=\\"text-success\\">green</span>, between 80 and 60% <span className=\\"text-warning\\">yellow</span> and anything below 60% <span className=\\"text-danger\\">red</span>.\\nYou can see an example of an html report based on stryker itself [here](https://stryker-mutator.github.io/stryker-html-reporter).\\n\\n## Bugfixes\\n\\nBugfixes this release:\\n\\n- [Incorrect relative path for html reporter #355](https://github.com/stryker-mutator/stryker-js/issues/335)\\n- [Mutation testing in node based environments can generate false warnings #350](https://github.com/stryker-mutator/stryker-js/issues/350)\\n\\n## Enjoy!\\n\\nEnjoy this new release! We\'re always happy with feedback, negative or positive."},{"id":"road-to-stryker-1-0","metadata":{"permalink":"/blog/road-to-stryker-1-0","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2017-07-14-road-to-stryker-1-0.md","source":"@site/blog/2017-07-14-road-to-stryker-1-0.md","title":"Road to Stryker 1.0","description":"Stryker is about two years old. During this time we achieved a lot. But it\'s far from finished. So, what\'s next? Let\'s take a glimpse in the future.","date":"2017-07-14T00:00:00.000Z","formattedDate":"July 14, 2017","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":5.77,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"road-to-stryker-1-0","title":"Road to Stryker 1.0","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Stryker 0.8 release","permalink":"/blog/stryker-0-8-0"},"nextItem":{"title":"Stryker 0.6.4 released","permalink":"/blog/stryker-0-6-4"}},"content":"Stryker is about two years old. During this time we achieved a lot. But it\'s far from finished. So, what\'s next? Let\'s take a glimpse in the future.\\n\\n\x3c!--truncate--\x3e\\n\\nSome of Strykers achievements are:\\n\\n- Stryker is the first functional mutation testing framework for JavaScript.\\n- Stryker is test framework and test runner agnostic.\\n- Stryker boosts performance by running tests in parallel.\\n- Stryker uses advance coverage analysis to do less work.\\n\\nThe way Stryker achieves all this, is using a plugin model. Want to use a different test runner?\\nCreate a class that implements the [TestRunner interface](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-api/src/test_runner/TestRunner.ts) and you\'re done.\\nHowever, Stryker does one assumption: your source code can be directly executed in your environment.\\n\\n## Road to v1\\n\\nWe\'re very happy with the results so far, but we\'re far from done. The JavaScript world is constantly evolving.\\nA couple of examples of modern use cases are:\\n\\n- A web project written in JSX / [React](https://facebook.github.io/react/)\\n- A node project written in [TypesScript](https://www.typescriptlang.org/) and executed using [ts-node](https://www.npmjs.com/package/ts-node)\\n- An Angular project generated with the [angular cli](https://www.npmjs.com/package/@angular/cli) using [webpack](https://webpack.js.org/) and [TypeScript](https://www.typescriptlang.org/)\\n- A web project using [VueJS](https://vuejs.org/)\\n- A web component written in HTML5 using [Polymer](https://www.polymer-project.org) and [webpack](https://webpack.js.org/)\\n\\nIn order to stay relevant, these use cases need to be supported in a user friendly way.\\nOnly then are we comfortable with tagging Stryker with a version _1_ tag.\\n\\n## False assumption\\n\\nIf you look at the modern use cases, they have something in common:\\nyour code cannot be directly executed in your JavaScript environment. It\'s not even JavaScript in some cases.\\nIt first needs to be compiled, transpiled and/or bundled, before it can be executed.\\nFor the sake of this article, let\'s call this step [transpiling](https://en.wikipedia.org/wiki/Source-to-source_compiler).\\nThis makes the assumption that Stryker does a false one: **it should not assume the code you write is the code that gets executed**.\\n\\n## First attempt\\n\\nWe\'ve had a lot of discussion within the Stryker team on how to support these use cases.\\nOne possibility is to first transpile your code before we run the normal Stryker process on it.\\n\\nIn the end we decided against this approach, because it comes with a big downside: it will cause a lot of false positives.\\n\\nLet\'s take this piece of TypeScript code as an example:\\n\\n```typescript\\nconst b = 42;\\nconst a = `the answer is ${b}`;\\n```\\n\\nThis might transpile to:\\n\\n```javascript\\nvar b = 42;\\nvar a = \'the answer is \' + b;\\n```\\n\\nWhen Stryker comes along: it changes `\'the answer is \' + b` to `\'the answer is \' - b`.\\nThis is a valid mutation for JavaScript (if you\'re curious: the answer is `NaN`).\\nHowever, `\'the answer is \' - b` is _not a valid TypeScript expression_. It results in the following compile error:\\n\\n```bash\\nThe left-hand side of an arithmetic operation must be of type \'any\', \'number\' or an enum type.\\n```\\n\\nThis is why we refer to it as a false positive. This mutation shouldn\'t be tested, because it\'s a waste of resources and it impacts the mutation score. This is why we shouldn\'t blindly mutate transpiled code.\\n\\n## Open heart surgery\\n\\nThe only solution for supporting these use cases is to transpile the code after it has been mutated. This way, we can make sure only valid mutations are done to your code because\\nwe _teach_ Stryker which mutations are valid and which are invalid and we won\'t have to worry about code that gets generated during the transpilation.\\n\\nHowever, we don\'t want to just hard code it all in Stryker, because that would force a dependency on TypeScript, Babel, Webpack, etc.\\nInstead the transpiling and mutating of the code will be the responsibility of a new plugin type.\\nLet\'s call this the `transpiler` plugin. Examples of these plugins may be (in the future): `stryker-typescript-transpiler`, `stryker-javascript-transpiler`, `stryker-babel-transpiler`, `stryker-webpack-transpiler`\\n\\nWe\'ve sketched the new workflow for the TypeScript use case on a whiteboard:\\n\\n![transpiler-plugin](/images/blogs/transpiler-plugin.jpg)\\n\\nLet\'s explain what happens in 2 steps:\\n\\n1. Initial test run\\n2. Mutation testing\\n\\n### Step 1: Initial test run\\n\\nStarting from the top left: Stryker starts by reading your Stryker configuration file.\\nAfter that, we read in the source files into memory. As you might have noticed, these will be the _typescript files_.\\nNext up: it\'s the new `stryker-typescript-transpiler` plugin\'s time to shine. It will transpile the _.ts files into _.js files\\nand it will use your \\"tsconfig.json\\" configuration for this. The JavaScript output of this process will\\nbe written to disk by Stryker in something that we call a _Sandbox_. In this Sandbox, Stryker can\\nstart the initial test run as usual.\\n\\nWhy this complicated setup? After all, if we want to do an initial test run, we might as well just let your build process transpile the code\\nand run the tests using your test runner. The answer is that we need a baseline of your tests ran by Stryker.\\nIn the next step, Stryker will write mutations to different Sandboxes and run your tests.\\nWe need a control step to make sure your tests pass under normal circumstances. Also: this is where\\nwe measure your code coverage results for every test (if your test framework and test runner support it), which\\nare used to speed up mutation testing.\\n\\n### Step 2: Mutation testing\\n\\nAfter the initial test run completed successfully, we proceed with the actual mutation testing. The first step here\\nis about figuring out how we can mutate your source code. This is again done by the `stryker-typescript-transpiler` plugin.\\nIt will mutate the TypeScript specific [abstract syntax tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree), but _only\\nin valid ways_. For example: it won\'t mutate `\'the answer is \' + 42` into `\'the answer is \' - 42`, but it might\\nmutate it into `\'Stryker was here\' + 42`. The output of this process is a list of (in-memory) mutants.\\n\\nA mutant will have 2 parts: a TypeScript part and a JavaScript part. Stryker itself only cares about the\\nJavaScript part, because that is the recipe to mutate the JavaScript code in the sandboxes.\\nThis will allow Stryker to do mutation testing without needing to compile the code for each mutant, which would be disastrous for performance.\\nThe TypeScript part of a mutant can be used to report the mutated code to the end user. So the mutants that will be reported\\nin the exact code and language that the end user uses.\\n\\n## Plain JavaScript projects\\n\\nBack to plain JavaScript projects. What will change for them? The answer is: not much.\\nWe\'ll basically move the current logic for mutating code to a new `stryker-javascript-transpiler` plugin.\\nIt will be a pass-through transpiler, meaning that the code you write will be used directly.\\nMutating of JavaScript code will move to this plugin as well.\\n\\n## Want to help?\\n\\nWant to help? Great! We\'re really looking for people interested in helping us reach our goal of supporting all JavaScript based projects!"},{"id":"stryker-0-6-4","metadata":{"permalink":"/blog/stryker-0-6-4","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2017-06-10-stryker-0-6-4.md","source":"@site/blog/2017-06-10-stryker-0-6-4.md","title":"Stryker 0.6.4 released","description":"This release of Stryker brings a number of new features and improvements. Including a new quickstart and a number of reporter improvements.","date":"2017-06-10T00:00:00.000Z","formattedDate":"June 10, 2017","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":2.465,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"stryker-0-6-4","title":"Stryker 0.6.4 released","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Road to Stryker 1.0","permalink":"/blog/road-to-stryker-1-0"},"nextItem":{"title":"Stryker weekend","permalink":"/blog/stryker-weekend"}},"content":"This release of Stryker brings a number of new features and improvements. Including a new quickstart and a number of reporter improvements.\\n\\n\x3c!--truncate--\x3e\\n\\nFor the entire changelog per package:\\n\\n- [stryker changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker/CHANGELOG.md)\\n- [stryker-api changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-api/CHANGELOG.md)\\n- [stryker-mocha-runner changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-mocha-runner/CHANGELOG.md)\\n- [stryker-mocha-framework changelog](https://github.com/stryker-mutator/stryker-js/blob/master/packages/stryker-mocha-framework/CHANGELOG.md)\\n\\n## New quickstart\\n\\nA new version of Stryker has been released that comes with a new way to initialize your project: an interactive questionnaire.\\n\\nPreviously, when you wanted to start using Stryker in your project, you probably used the quickstart on the website.\\nInstead of evolving the quickstart on the website, we\'ve chosen to build it right into Stryker. Try it out: `stryker init`.\\n\\n![](/images/blogs/stryker-init.gif)\\n**Note:** This is using the new [stryker-cli](https://www.npmjs.com/package/stryker-cli). More on that in a separate blog article.\\n\\nThis new \'init\' command has some advantages:\\n\\n- The test runners, test frameworks and reporters are **dynamically queried** on npm.\\n- You can only select **test frameworks** that are actually **supported by your test runner**.\\n- The required plugins are **automatically installed**.\\n- Your Stryker configuration gets **automatically generated**.\\n\\n**A note for plugin creators**: `stryker init` will automatically find your plugin as long as you add the correct keywords to your `package.json` file.\\nMore on that in a separate article or take a look at the PR.\\n\\nPlease take a look at [PR #269 for more details](https://github.com/stryker-mutator/stryker-js/pull/269)\\n\\n## New clear-text reporter summary\\n\\nThe summary at the end of the clear-text reporter got a new look:\\n\\n```js\\n-----------|---------|----------|-----------|------------|----------|---------|\\nFile       | % score | # killed | # timeout | # survived | # no cov | # error |\\n-----------|---------|----------|-----------|------------|----------|---------|\\nAll files  |   69.57 |       16 |         0 |          3 |        4 |       0 |\\nAdd.js     |   82.35 |       14 |         0 |          1 |        2 |       0 |\\nCircle.js  |   33.33 |        2 |         0 |          2 |        2 |       0 |\\n-----------|---------|----------|-----------|------------|----------|---------|\\n```\\n\\nThis works with a new reporter callback: `onScoreCalculated`, which provides a tree\\nof score results per directory/file. This should be used as a single source of truth for all reporters.\\nWe\'re planning to migrate the stryker-html-reporter to this new way of working.\\n\\nPlease take a look at [PR #309 for more details](https://github.com/stryker-mutator/stryker-js/pull/309)\\n\\n## Stryker mocha framework\\n\\nPreviously, the stryker-mocha-framework was included in the stryker-mocha-runner package. We\'ve noticed that this was quite confusing.\\nThat\'s why it\'s now migrated in it\'s own package.\\n\\n**BREAKING CHANGE:** If you are using `testRunner: \'mocha\', testFramework: \'mocha\'` right now,\\nplease also install stryker-mocha-framework when upgrading from stryker-mocha-runner@0.3.x to stryker-mocha-runner@0.4.0.\\n\\nThe stryker-mocha-framework currently only supports test runner \'mocha\'. You\'ll get a warning when you configure an other runner.\\nAs configuring a test framework is always optional, you\'ll still be able to run your mocha tests in karma.\\n\\nPlease take a look at [PR #308 for more details](https://github.com/stryker-mutator/stryker-js/pull/308)\\n\\n## New mutator\\n\\nPlease welcome our latest mutator: **boolean substitution**. It mutates your code in 3 ways:\\n\\n```js\\ntrue -> false\\nfalse -> true\\n!a -> a\\n```\\n\\nPlease take a look at [PR #294 for more details](https://github.com/stryker-mutator/stryker-js/pull/294)"},{"id":"stryker-weekend","metadata":{"permalink":"/blog/stryker-weekend","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2017-02-21-stryker-weekend.md","source":"@site/blog/2017-02-21-stryker-weekend.md","title":"Stryker weekend","description":"During the last weekend of January we spent a weekend with ten students from the HAN University and University of Twente developing valuable features for Stryker!","date":"2017-02-21T00:00:00.000Z","formattedDate":"February 21, 2017","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":1.73,"hasTruncateMarker":true,"authors":[{"name":"Simon de Lang","title":"Stryker Team","url":"https://github.com/simondel","imageURL":"https://avatars1.githubusercontent.com/u/4221997?s=460&u=d09f7c27690d66764ff2f2ebb6d9f8d5431ad9e3&v=4"}],"frontMatter":{"slug":"stryker-weekend","title":"Stryker weekend","author":"Simon de Lang","author_title":"Stryker Team","author_url":"https://github.com/simondel","author_image_url":"https://avatars1.githubusercontent.com/u/4221997?s=460&u=d09f7c27690d66764ff2f2ebb6d9f8d5431ad9e3&v=4","tags":["stryker-js"]},"prevItem":{"title":"Stryker 0.6.4 released","permalink":"/blog/stryker-0-6-4"},"nextItem":{"title":"Introduction to mutation testing","permalink":"/blog/introduction-to-mutation-testing"}},"content":"During the last weekend of January we spent a weekend with ten students from the HAN University and University of Twente developing valuable features for Stryker!\\n\\n\x3c!--truncate--\x3e\\n\\nThe group was divided into four teams, each with their own goal. Nico Jansen provided a short TypeScript course to get everyone up to speed on developing using TypeScript and after that everyone started working hard on improving Stryker.\\n\\n![](/images/blogs/stryker-weekend-team-photo.jpg)\\n\\n[Sander](https://github.com/Archcry) and [Wessel](https://github.com/wesselhendriks) decided to dive deep into the Stryker codebase to introduce `async`-`await` in as much of the Stryker repository as possible. They learned that it was not possible to use it everywhere, but nevertheless it cleaned up the codebase nicely!\\n\\n[Florian](https://github.com/Floormidabel) and [Stijn](https://github.com/stienis96) decided to introduce another new TypeScript feature. They added the `strictNullChecks` feature to the Stryker codebase. By adding the feature, they force us to write cleaner code. However, before they could compile the codebase with the feature turned on they had to fix two full pages filled with errors, but that didn\'t stop Olaf and Stijn!\\n\\nNot everyone decided to try out new TypeScript features, some also decided to improve the core functionality of Stryker: mutating code. [Jelle](https://github.com/JellePetersHAN), [Mark](https://github.com/MarktHart) and [Wouter](https://github.com/Wouter1810) added two new mutators and added tests for one of the existing mutators. Their `ArrayDeclarationMutator` is capable of creating an empty array whenever you initialize an array with values. For example, the code `[1, 2, \'Hello\']` could be mutated to: `[]`. They also added the `ConstantNumberMutator` which will change the declaration of a `const` to `0`.\\n\\nLast but not least, [Nico](https://github.com/korthout), [Olaf](https://github.com/OlafHaalstra), [Diederik](https://github.com/DiedB) and [Alex](https://github.com/avassem85) worked on improving the onboarding of new projects by creating the stryker-cli. This tool is capable of integrating Stryker into your project in an interactive way. It\'s even capable of installing the required packages so you can start using Stryker with minimal effort!\\n\\nIn the end, the weekend was a success. We all had a blast and we managed to develop more features than we had expected. The students exceeded our expectations with their skill and enthusiasm. This is something we definitely want to do more often!\\n\\n![](/images/blogs/stryker-ascii.jpg)"},{"id":"introduction-to-mutation-testing","metadata":{"permalink":"/blog/introduction-to-mutation-testing","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2017-01-17-introduction-to-mutation-testing.md","source":"@site/blog/2017-01-17-introduction-to-mutation-testing.md","title":"Introduction to mutation testing","description":"Writing unit tests can be hard. Even for an easy example such as a calculator app.","date":"2017-01-17T00:00:00.000Z","formattedDate":"January 17, 2017","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":4.505,"hasTruncateMarker":true,"authors":[{"name":"Simon de Lang","title":"Stryker Team","url":"https://github.com/simondel","imageURL":"https://avatars1.githubusercontent.com/u/4221997?s=460&u=d09f7c27690d66764ff2f2ebb6d9f8d5431ad9e3&v=4"}],"frontMatter":{"slug":"introduction-to-mutation-testing","title":"Introduction to mutation testing","author":"Simon de Lang","author_title":"Stryker Team","author_url":"https://github.com/simondel","author_image_url":"https://avatars1.githubusercontent.com/u/4221997?s=460&u=d09f7c27690d66764ff2f2ebb6d9f8d5431ad9e3&v=4","tags":["stryker-js"]},"prevItem":{"title":"Stryker weekend","permalink":"/blog/stryker-weekend"},"nextItem":{"title":"Happy new Stryker!","permalink":"/blog/happy-new-stryker"}},"content":"Writing unit tests can be hard. Even for an easy example such as a calculator app.\\nThere are unlimited combinations of inputs for a calculator and you\'re not going to test every single one. So when are you done testing?\\n\\n\x3c!--truncate--\x3e\\n\\nSay you\'re building an online casino, users can only enter the casino when they\'re over 18. So you write the following piece of code to check if someone is allowed to use the website:\\n\\n```javascript\\nfunction isUserOldEnough(user) {\\n  return user.age >= 18;\\n}\\n```\\n\\nEasy right? So what inputs do you use to test? Perhaps you would pick your own age (25 for example) if you\'re over 18 and pick something below 18 (16 or so) to check the other outcome.\\nYou run your code coverage tool on the code and it turns out your code is 100% covered. Great, we\'re done testing!\\n\\n## The code coverage problem\\n\\nI used to think that code coverage tells you which code is tested. But I realized I was wrong. Code coverage doesn\u2019t tell you which code is tested, it only tells you which code is being executed during testing. There is an important difference here. You could write one test which hits 100 lines of code, but that doesn\u2019t mean that all 100 lines of code work as you would expect. If you would write 10 tests for that piece of code, you may still have the same code coverage. You could even write tests without assertions to boost your code coverage.\\n\\nAnd how do you know that enough is enough? Some teams even have code coverage goals that they have to hit (100% anyone?). As if that would make you write better tests. Sure, it forces you to write tests, but it doesn\u2019t promise that they\u2019re good tests. It even encourages bad behavior for some people. During one of my projects as a student, our school decided a little competition would be fun. The team with the highest code coverage at the end of the project would win a small prize. It didn\u2019t take long to find out that tests could be written without assertions to easily boost their code coverage (of course, I would never do that ;)).\\n\\nThe only way to know that a test actually _works_ is when it fails when you make a code change.\\n\\n## Mutation testing\\n\\nYou could go through your code base and make changes to see if certain tests fail. However, this process is time consuming. You\'re much better off using a mutation testing framework. A mutation testing framework will look through your code to see where it can introduce bugs, which we will call _mutants_ from now on.\\n\\nSay you have the following code:\\n\\n```javascript\\nfunction isUserOldEnough(user) {\\n  return user.age >= 18;\\n}\\n```\\n\\nA mutation testing framework will find the return statement and decide to change it in a number of ways:\\n\\n```javascript\\n/* 1 */ return user.age > 18;\\n/* 2 */ return user.age < 18;\\n/* 3 */ return false;\\n/* 4 */ return true;\\n```\\n\\nEach one of those mutants should make a test fail. After the mutants have been found, they are applied one by one and your tests will be executed. If at least one of your tests fail, we say the mutant is _killed_. If no tests fail, it _survived_. The better your tests, the less mutants survive. The first mutant would have survived if we had a test with a user aged 16 and 25, since we didn\'t test the boundary.\\n\\nWith mutation testing you\u2019re testing your tests.\\n\\n## Getting started\\n\\nThe best thing to do if you\u2019re not already using mutation testing is to just try it once. Most languages have a mutation testing framework.\\nJust take a look on GitHub and you will probably find one for the language you use.\\n\\nIf you\u2019re using JavaScript, I would suggest looking at Stryker. It has a great [quickstart page](http://stryker-mutator.github.io/quickstart.html) to get you up and running.\\n\\nIf you\'ve first used a mutation testing framework, you may find that there are a lot of mutations that survive, but that\u2019s ok!\\n\\n## Setting goals\\n\\nAfter you\u2019ve used a mutation framework a couple of times, you may think about setting a mutation testing goal,\\njust like with your code coverage goal. I sometimes get asked what a good goal is for mutation testing.\\nIt can be a difficult question to answer and I honestly don\u2019t know what a good goal is for your application.\\n\\nMutation testing frameworks make very different changes depending on the language or even framework you\u2019re using.\\nStryker could assign any value to any variable since it tests JavaScript. That doesn\u2019t work for a framework like [PIT](http://pitest.org/),\\nwhich can be used to mutation test Java code. This means that your score could differ a lot depending on the language and framework you use.\\nThe goal you want to set may also differ depending on the type of application that you\'re writing. A banking application may require a higher mutation score than some side project.\\n\\nI would suggest running a mutation testing framework and set a higher goal than your current score.\\nI would not advise to make 100% mutation coverage your goal though. The most important thing is that you write good tests and mutation testing can help you achieve that.\\nSo if you\u2019re going to set any goal, make writing good tests your goal."},{"id":"happy-new-stryker","metadata":{"permalink":"/blog/happy-new-stryker","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2017-01-01-happy-new-stryker.md","source":"@site/blog/2017-01-01-happy-new-stryker.md","title":"Happy new Stryker!","description":"2017 - The year to invest into test quality","date":"2017-01-01T00:00:00.000Z","formattedDate":"January 1, 2017","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":2.855,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"happy-new-stryker","title":"Happy new Stryker!","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Introduction to mutation testing","permalink":"/blog/introduction-to-mutation-testing"},"nextItem":{"title":"Stryker 0.5.5 released!","permalink":"/blog/stryker-0-5-5"}},"content":"## 2017 - The year to invest into test quality\\n\\nUp until now, when you were writing unit tests, you were actually investing in _code quality_. Catching bugs early by continuously\\nexercising your code with unit tests and keeping your stakeholders happy by presenting them with a code coverage number of 85% or higher.\\nBut does code coverage tell the entire story? Are your tests actually able to detect bugs? How do you test _your tests_?\\nThat\'s the problem [mutation testing](https://en.wikipedia.org/wiki/Mutation_testing) sets out to solve.\\n\\n\x3c!--truncate--\x3e\\n\\n### Mutation testing in JavaScript\\n\\nDue to JavaScript\'s dynamic nature, unit testing has become a fundamental tool to bring a higher level of robustness to JavaScript projects.\\nYour average JavaScript app can easily have around 1,000 unit tests. Ensuring that these are actually _effective_ can be a full-time job. This is where Stryker comes in.\\n[Stryker Mutator](http://stryker-mutator.github.io/) is our approach to providing a comprehensive mutation testing tool for the JavaScript environment.\\n\\nWe start out by altering your source code ever so slightly (e.g. turning a `+` into `-`) and then running your tests to see if they are\\nresilient to this _\\"mutant\\"_. If they are (and they fail), all is fine - the _mutant is dead_. If they don\'t, the _mutant_ survived and you have to fix your test.\\n\\n## Stryker Hackweek 2016\\n\\nStryker began its life as the thesis project of Simon de Lang. After graduating, his thesis tutor Nico Jansen joined him and continued development in the open on [GitHub](https://github.com/stryker-mutator/).\\nSince then they had five major releases, improving performance, adding support for the [Karma](http://karma-runner.github.io/1.0/index.html) and [Mocha](http://mochajs.org/) test runners,\\nas well as creating a fancy [HTML reporter](https://github.com/stryker-mutator/mutation-testing-elements/tree/master/packages/mutation-testing-elements).\\n\\nUp until now, the two of them did all of this in their own time, next to their daytime jobs as software engineers.\\n\\nAround came the traditionally slow Christmas time period, allowing a select few of their colleagues at [Info Support](https://www.infosupport.com/) to join them for 4 days for the **_Stryker Hackweek 2016_**.\\n\\n### Achieved goals\\n\\nThe whole team enjoyed the experience a lot and had good fun extending Stryker and fixing issues.\\nWe mostly concentrated on integrating Stryker with SonarQube, as well as improving the first time usage experience.\\n\\nAll in all we made **47 commits**, closed **18 issues**, eat **6 kebabs** and **4 subway sandwiches**!\\nHere\'s a quick overview of what we did:\\n\\n- Created a [Stryker SonarQube plugin](https://github.com/stryker-mutator/sonar-stryker-plugin), that turns survived mutants into neat SonarQube issues\\n- Added [a blog](http://stryker-mutator.github.io/blog.html) to the Stryker homepage\\n- Upgraded the TypeScript compiler in all projects to 2.1\\n- Released [version 0.5.5 of Stryker](http://stryker-mutator.github.io/blog/2016-12-30/stryker-0-5-5.html), including:\\n  - A new progress reporter\\n  - Limit the number of test-names to log in the clear text reporter\\n  - Support to [exclude online files from globbing](https://github.com/stryker-mutator/stryker-js/issues/90)\\n- Support for [karma config parsing in the stryker-karma-runner](https://github.com/stryker-mutator/stryker-js/tree/master/packages/stryker-karma-runner/issues/7)\\n- Improved documentation for first time-users\\n- A plan for a series of blog articles\\n\\n### The Hackweek Team\\n\\n![The Hackweek Team (f.l.t.r.): Alex van Assem, Nico Jansen, Simon de Lang, Philipp Weissenbacher, Jasper Catthoor, Wannes Van Regenmortel](/images/blogs/stryker-team-photo.jpg)\\n\\nThe Stryker Hackweek team consisted of (from left to right):\\n\\n- Alex van Assem: Agile coach and TypeScript hacker\\n- Nico Jansen: T-shaped software engineer\\n- Simon de Lang: Software engineer and TypeScript aficionado\\n- Philipp Weissenbacher: Software/BI engineer\\n- Jasper Catthoor: Software engineer (via Info Support Belgium)\\n- Wannes Van Regenmortel: Software engineer (via Info Support Belgium)\\n\\n#### Want to try out Stryker? Begin with the handy [quick start guide](http://stryker-mutator.github.io/quickstart.html)."},{"id":"stryker-0-5-5","metadata":{"permalink":"/blog/stryker-0-5-5","editUrl":"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2016-12-30-stryker-0-5-5.md","source":"@site/blog/2016-12-30-stryker-0-5-5.md","title":"Stryker 0.5.5 released!","description":"The full changelog can be found on GitHub. In this post we\'ll dive into a couple of new features.","date":"2016-12-30T00:00:00.000Z","formattedDate":"December 30, 2016","tags":[{"label":"stryker-js","permalink":"/blog/tags/stryker-js"}],"readingTime":1.87,"hasTruncateMarker":true,"authors":[{"name":"Nico Jansen","title":"Stryker Team","url":"https://github.com/nicojs","imageURL":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4"}],"frontMatter":{"slug":"stryker-0-5-5","title":"Stryker 0.5.5 released!","author":"Nico Jansen","author_title":"Stryker Team","author_url":"https://github.com/nicojs","author_image_url":"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4","tags":["stryker-js"]},"prevItem":{"title":"Happy new Stryker!","permalink":"/blog/happy-new-stryker"}},"content":"The full changelog can be found on [GitHub](https://github.com/stryker-mutator/stryker-js/blob/master/CHANGELOG.md). In this post we\'ll dive into a couple of new features.\\n\\nTo upgrade to Stryker 0.5.5, simply run: `npm i --save-dev stryker-api@0.4.2 stryker@0.5.5`\\n\\n\x3c!--truncate--\x3e\\n\\n### New progress reporter\\n\\nThe `progress` reporter got a fresh new look! It will now display a progress bar, the percentage of doneness and an ETC (Estimated Time of Completion).\\nGone are the days of guessing how far Stryker has come and how long it\'ll need!\\nYou can use it by setting reporter to `\'progress\'` in your `stryker.conf.js`.\\n\\n**The new progress reporter looks like this:**\\n![new progress reporter image](/images/blogs/progress-reporter.png)\\n\\nDo you still want to use the **old** reporter? It\'s still there! Just use the repoter `\'dots\'` in your configuration.\\n\\n### Clear text reporter updated\\n\\nThe clear text reporter no longer prints every single test that was executed for a mutant. It now only prints the first three tests and mentions how many more tests were executed.\\nIf desired, you can overwrite this behavior by adding the following piece of config to your `stryker.conf.js`:\\n\\n```js\\nclearTextReporter: {\\n    maxTestsToLog: 25\\n},\\n```\\n\\nDon\'t want to know which tests were executed? Feel free to set the `maxTestsToLog` property to 0.\\n\\n### Karma config parsing\\n\\nIn addition to this release of Stryker, we\'ve also added support for an often requested feature: reading your existing `karma.conf.js` in the [stryker-karma-runner](https://github.com/stryker-mutator/stryker-js/tree/master/packages/stryker-karma-runner)!\\nStarting with version 0.3.3, you can add the location of your karma config file to `Stryker.conf.js` and have it automatically be picked up by the plugin. This reduces code duplication between these two files.\\n\\nThis is what your new `stryker.conf.js` might look like:\\n\\n```js\\n// Stryker.conf.js\\nmodule.exports = function (config) {\\n    config.set({\\n        testRunner: \'karma\',\\n        testFramework: \'jasmine\', // <-- add your testFramework here\\n        karmaConfigFile: \'karma.conf.js\' // <-- add your karma.conf.js file here\\n        mutate: [\\n            \'src/**/*.js\' // <-- mark files for mutation here\\n        ]\\n    });\\n}\\n```\\n\\nAs you can see, there is no need to specify which files Stryker should use! You only have to specify which files you want to mutate.\\nA more detailed explanation of this feature can be found in the [stryker-karma-runner README.md](https://github.com/stryker-mutator/stryker-js/tree/master/packages/stryker-karma-runner/blob/master/README.md#configuring).\\n\\n#### We hope you enjoy this new version of Stryker! We\'d love to hear your feedback on [Slack](https://join.slack.com/t/stryker-mutator/shared_invite/enQtOTUyMTYyNTg1NDQ0LTU4ODNmZDlmN2I3MmEyMTVhYjZlYmJkOThlNTY3NTM1M2QxYmM5YTM3ODQxYmJjY2YyYzllM2RkMmM1NjNjZjM) and/or Twitter (with hashtag #strykermutator)!"}]}')}}]);