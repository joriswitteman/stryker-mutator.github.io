"use strict";(self.webpackChunkstryker_mutator_github_io=self.webpackChunkstryker_mutator_github_io||[]).push([[6047],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,d=p["".concat(u,".").concat(h)]||p[h]||m[h]||o;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9397:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c}});n(7294);var r=n(3905);function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}const o={title:"Research",sidebar_position:20,custom_edit_url:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/research.md"},i=void 0,l={unversionedId:"stryker-net/technical-reference/research",id:"stryker-net/technical-reference/research",title:"Research",description:"Stryker.NET wants to be a blazing fast mutation test framework. To achieve this some research has taken place before designing the framework.",source:"@site/docs/stryker-net/technical-reference/research.md",sourceDirName:"stryker-net/technical-reference",slug:"/stryker-net/technical-reference/research",permalink:"/docs/stryker-net/technical-reference/research",draft:!1,editUrl:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/research.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Research",sidebar_position:20,custom_edit_url:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/research.md"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/stryker-net/technical-reference/introduction"},next:{title:"Mutant schemata",permalink:"/docs/stryker-net/technical-reference/mutant-schemata"}},u={},c=[{value:"Criteria",id:"criteria",level:2},{value:"Options",id:"options",level:2},{value:"Comparison",id:"comparison",level:2},{value:"Mutating source code",id:"mutating-source-code",level:3},{value:"Mutating byte code",id:"mutating-byte-code",level:3},{value:"Mutant schemata (mutation switching)",id:"mutant-schemata-mutation-switching",level:3},{value:"Conclusion",id:"conclusion",level:2}],s={toc:c};function m({components:e,...t}){return(0,r.kt)("wrapper",a({},s,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Stryker.NET wants to be a blazing fast mutation test framework. To achieve this some research has taken place before designing the framework."),(0,r.kt)("h2",a({},{id:"criteria"}),"Criteria"),(0,r.kt)("p",null,"The framework had to conform the following criteria:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Be fast"),(0,r.kt)("li",{parentName:"ul"},"Be able to show the exact location of the mutations to the user"),(0,r.kt)("li",{parentName:"ul"},"The following mutations should be able to be made",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Binary mutations"),(0,r.kt)("li",{parentName:"ul"},"Boolean mutations"),(0,r.kt)("li",{parentName:"ul"},"Logical mutations"),(0,r.kt)("li",{parentName:"ul"},"Conditional mutations"),(0,r.kt)("li",{parentName:"ul"},"Unary mutations"),(0,r.kt)("li",{parentName:"ul"},"Return value mutations")))),(0,r.kt)("h2",a({},{id:"options"}),"Options"),(0,r.kt)("p",null,"By looking at other frameworks two options could be found regarding architectures:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Mutating source code (",(0,r.kt)("a",a({parentName:"li"},{href:"https://stryker-mutator.io/"}),"Stryker"),")"),(0,r.kt)("li",{parentName:"ul"},"Mutating byte code (",(0,r.kt)("a",a({parentName:"li"},{href:"http://pitest.org/"}),"PiTest"),")")),(0,r.kt)("p",null,"Later another architecture was found: mutant schemata (also dubbed mutation switching). This technique places all mutations inside if statements. Such an if statement could look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-csharp"}),'if(Environment.GetEnvironmentVariable("ActiveMutation") == "1") {\n  i--; // mutated code\n} else {\n  i++; // original code\n}\n')),(0,r.kt)("h2",a({},{id:"comparison"}),"Comparison"),(0,r.kt)("p",null,"For each option a separate prototype has been created. The results showed the following pros and cons. "),(0,r.kt)("h3",a({},{id:"mutating-source-code"}),"Mutating source code"),(0,r.kt)("p",null,"Pros:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Exact location can be shown to users.")),(0,r.kt)("p",null,"Cons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each mutation has to be compiled separate. So mutating is slow.")),(0,r.kt)("h3",a({},{id:"mutating-byte-code"}),"Mutating byte code"),(0,r.kt)("p",null,"Pros:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fast")),(0,r.kt)("p",null,"Cons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Mutators are difficult to create."),(0,r.kt)("li",{parentName:"ul"},"Exact location cannot be shown to users.")),(0,r.kt)("h3",a({},{id:"mutant-schemata-mutation-switching"}),"Mutant schemata (mutation switching)"),(0,r.kt)("p",null,"Pros:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All mutants can be compiled at once, so mutating is fast."),(0,r.kt)("li",{parentName:"ul"},"Exact location can be shown to users."),(0,r.kt)("li",{parentName:"ul"},"Mutated assembly can be kept in memory during mutation testruns."),(0,r.kt)("li",{parentName:"ul"},"Mutation coverage can be easily calculated."),(0,r.kt)("li",{parentName:"ul"},"Testing multiple mutations in one testrun is possible.")),(0,r.kt)("p",null,"Cons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Not all mutations are possible",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Mutating constant values"),(0,r.kt)("li",{parentName:"ul"},"Mutating method names"),(0,r.kt)("li",{parentName:"ul"},"Mutating access modifiers"))),(0,r.kt)("li",{parentName:"ul"},"Compile errors should not occur.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Since all mutations will compile at once, all mutations should compile correctly")))),(0,r.kt)("h2",a({},{id:"conclusion"}),"Conclusion"),(0,r.kt)("p",null,"Mutant schemata works fastest and the exact location for every mutation can be shown to the user. Stryker.NET has chosen the path of mutant schemata."))}m.isMDXComponent=!0}}]);